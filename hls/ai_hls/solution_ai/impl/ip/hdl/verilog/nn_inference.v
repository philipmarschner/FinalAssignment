// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nn_inference_nn_inference,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.284616,HLS_SYN_LAT=1949,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=6185,HLS_SYN_LUT=8024,HLS_VERSION=2020_2}" *)

module nn_inference (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_img_address0,
        input_img_ce0,
        input_img_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 40'd1;
parameter    ap_ST_fsm_pp0_stage0 = 40'd2;
parameter    ap_ST_fsm_state6 = 40'd4;
parameter    ap_ST_fsm_state7 = 40'd8;
parameter    ap_ST_fsm_pp1_stage0 = 40'd16;
parameter    ap_ST_fsm_state11 = 40'd32;
parameter    ap_ST_fsm_pp2_stage0 = 40'd64;
parameter    ap_ST_fsm_state16 = 40'd128;
parameter    ap_ST_fsm_state17 = 40'd256;
parameter    ap_ST_fsm_state18 = 40'd512;
parameter    ap_ST_fsm_state19 = 40'd1024;
parameter    ap_ST_fsm_state20 = 40'd2048;
parameter    ap_ST_fsm_state21 = 40'd4096;
parameter    ap_ST_fsm_state22 = 40'd8192;
parameter    ap_ST_fsm_state23 = 40'd16384;
parameter    ap_ST_fsm_state24 = 40'd32768;
parameter    ap_ST_fsm_state25 = 40'd65536;
parameter    ap_ST_fsm_state26 = 40'd131072;
parameter    ap_ST_fsm_state27 = 40'd262144;
parameter    ap_ST_fsm_state28 = 40'd524288;
parameter    ap_ST_fsm_state29 = 40'd1048576;
parameter    ap_ST_fsm_state30 = 40'd2097152;
parameter    ap_ST_fsm_state31 = 40'd4194304;
parameter    ap_ST_fsm_state32 = 40'd8388608;
parameter    ap_ST_fsm_pp3_stage0 = 40'd16777216;
parameter    ap_ST_fsm_state41 = 40'd33554432;
parameter    ap_ST_fsm_pp4_stage0 = 40'd67108864;
parameter    ap_ST_fsm_state46 = 40'd134217728;
parameter    ap_ST_fsm_state47 = 40'd268435456;
parameter    ap_ST_fsm_state48 = 40'd536870912;
parameter    ap_ST_fsm_state49 = 40'd1073741824;
parameter    ap_ST_fsm_state50 = 40'd2147483648;
parameter    ap_ST_fsm_state51 = 40'd4294967296;
parameter    ap_ST_fsm_state52 = 40'd8589934592;
parameter    ap_ST_fsm_state53 = 40'd17179869184;
parameter    ap_ST_fsm_state54 = 40'd34359738368;
parameter    ap_ST_fsm_pp5_stage0 = 40'd68719476736;
parameter    ap_ST_fsm_state59 = 40'd137438953472;
parameter    ap_ST_fsm_state60 = 40'd274877906944;
parameter    ap_ST_fsm_state61 = 40'd549755813888;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_img_address0;
output   input_img_ce0;
input  [31:0] input_img_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_img_ce0;

(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] weights_layer1_weights_V_address0;
reg    weights_layer1_weights_V_ce0;
wire  signed [8:0] weights_layer1_weights_V_q0;
wire   [11:0] weights_layer1_weights_V_address1;
reg    weights_layer1_weights_V_ce1;
wire  signed [8:0] weights_layer1_weights_V_q1;
wire   [3:0] layer2_weights_V_0_address0;
reg    layer2_weights_V_0_ce0;
wire  signed [8:0] layer2_weights_V_0_q0;
wire   [3:0] layer2_weights_V_1_address0;
reg    layer2_weights_V_1_ce0;
wire  signed [7:0] layer2_weights_V_1_q0;
wire   [3:0] layer2_weights_V_2_address0;
reg    layer2_weights_V_2_ce0;
wire  signed [9:0] layer2_weights_V_2_q0;
wire   [3:0] layer2_weights_V_3_address0;
reg    layer2_weights_V_3_ce0;
wire  signed [7:0] layer2_weights_V_3_q0;
wire   [3:0] layer2_weights_V_4_address0;
reg    layer2_weights_V_4_ce0;
wire  signed [7:0] layer2_weights_V_4_q0;
wire   [3:0] layer2_weights_V_5_address0;
reg    layer2_weights_V_5_ce0;
wire  signed [7:0] layer2_weights_V_5_q0;
wire   [3:0] layer2_weights_V_6_address0;
reg    layer2_weights_V_6_ce0;
wire  signed [7:0] layer2_weights_V_6_q0;
wire   [3:0] layer2_weights_V_7_address0;
reg    layer2_weights_V_7_ce0;
wire  signed [9:0] layer2_weights_V_7_q0;
wire   [3:0] layer2_weights_V_8_address0;
reg    layer2_weights_V_8_ce0;
wire  signed [8:0] layer2_weights_V_8_q0;
wire   [3:0] layer2_weights_V_9_address0;
reg    layer2_weights_V_9_ce0;
wire  signed [9:0] layer2_weights_V_9_q0;
wire   [3:0] layer2_weights_V_10_address0;
reg    layer2_weights_V_10_ce0;
wire  signed [8:0] layer2_weights_V_10_q0;
wire   [3:0] layer2_weights_V_11_address0;
reg    layer2_weights_V_11_ce0;
wire  signed [7:0] layer2_weights_V_11_q0;
wire   [3:0] layer2_weights_V_12_address0;
reg    layer2_weights_V_12_ce0;
wire  signed [7:0] layer2_weights_V_12_q0;
wire   [3:0] layer2_weights_V_13_address0;
reg    layer2_weights_V_13_ce0;
wire  signed [8:0] layer2_weights_V_13_q0;
wire   [3:0] layer2_weights_V_14_address0;
reg    layer2_weights_V_14_ce0;
wire  signed [7:0] layer2_weights_V_14_q0;
wire   [3:0] layer2_weights_V_15_address0;
reg    layer2_weights_V_15_ce0;
wire  signed [8:0] layer2_weights_V_15_q0;
wire   [3:0] layer2_weights_V_16_address0;
reg    layer2_weights_V_16_ce0;
wire  signed [8:0] layer2_weights_V_16_q0;
wire   [3:0] layer2_weights_V_17_address0;
reg    layer2_weights_V_17_ce0;
wire  signed [8:0] layer2_weights_V_17_q0;
wire   [3:0] layer2_weights_V_18_address0;
reg    layer2_weights_V_18_ce0;
wire  signed [8:0] layer2_weights_V_18_q0;
wire   [3:0] layer2_weights_V_19_address0;
reg    layer2_weights_V_19_ce0;
wire  signed [8:0] layer2_weights_V_19_q0;
wire   [3:0] layer2_weights_V_20_address0;
reg    layer2_weights_V_20_ce0;
wire  signed [7:0] layer2_weights_V_20_q0;
wire   [3:0] layer2_weights_V_21_address0;
reg    layer2_weights_V_21_ce0;
wire  signed [7:0] layer2_weights_V_21_q0;
wire   [3:0] layer2_weights_V_22_address0;
reg    layer2_weights_V_22_ce0;
wire  signed [8:0] layer2_weights_V_22_q0;
wire   [3:0] layer2_weights_V_23_address0;
reg    layer2_weights_V_23_ce0;
wire  signed [7:0] layer2_weights_V_23_q0;
wire   [3:0] layer2_weights_V_24_address0;
reg    layer2_weights_V_24_ce0;
wire  signed [8:0] layer2_weights_V_24_q0;
wire   [3:0] layer2_weights_V_25_address0;
reg    layer2_weights_V_25_ce0;
wire  signed [8:0] layer2_weights_V_25_q0;
wire   [3:0] layer2_weights_V_26_address0;
reg    layer2_weights_V_26_ce0;
wire  signed [7:0] layer2_weights_V_26_q0;
wire   [3:0] layer2_weights_V_27_address0;
reg    layer2_weights_V_27_ce0;
wire  signed [7:0] layer2_weights_V_27_q0;
wire   [3:0] layer2_weights_V_28_address0;
reg    layer2_weights_V_28_ce0;
wire  signed [7:0] layer2_weights_V_28_q0;
wire   [3:0] layer2_weights_V_29_address0;
reg    layer2_weights_V_29_ce0;
wire  signed [8:0] layer2_weights_V_29_q0;
wire   [3:0] layer2_weights_V_30_address0;
reg    layer2_weights_V_30_ce0;
wire   [7:0] layer2_weights_V_30_q0;
wire   [3:0] layer2_weights_V_31_address0;
reg    layer2_weights_V_31_ce0;
wire  signed [8:0] layer2_weights_V_31_q0;
reg   [6:0] i_reg_1348;
reg   [6:0] k_reg_1371;
reg   [31:0] sum_V_2_reg_1382;
reg   [5:0] i_1_reg_1395;
reg   [4:0] j_1_reg_1406;
reg   [4:0] i_2_reg_1417;
reg   [1:0] j_2_reg_1428;
reg   [1:0] j_2_reg_1428_pp5_iter1_reg;
wire    ap_CS_fsm_pp5_stage0;
wire    ap_block_state55_pp5_stage0_iter0;
wire    ap_block_state56_pp5_stage0_iter1;
wire    ap_block_state57_pp5_stage0_iter2;
wire    ap_block_state58_pp5_stage0_iter3;
wire    ap_block_pp5_stage0_11001;
reg   [1:0] j_2_reg_1428_pp5_iter2_reg;
wire   [6:0] add_ln5_fu_1482_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln5_fu_1488_p2;
reg   [0:0] icmp_ln5_reg_4644;
reg   [0:0] icmp_ln5_reg_4644_pp0_iter1_reg;
reg   [0:0] icmp_ln5_reg_4644_pp0_iter2_reg;
wire   [63:0] i_cast_fu_1494_p1;
reg   [63:0] i_cast_reg_4648;
reg   [63:0] i_cast_reg_4648_pp0_iter1_reg;
reg   [63:0] i_cast_reg_4648_pp0_iter2_reg;
reg   [31:0] input_img_load_reg_4658;
reg   [31:0] input_img_load_reg_4658_pp0_iter2_reg;
reg   [0:0] p_Result_8_reg_4668;
wire   [51:0] trunc_ln565_fu_1534_p1;
reg   [51:0] trunc_ln565_reg_4673;
wire   [0:0] icmp_ln571_fu_1538_p2;
reg   [0:0] icmp_ln571_reg_4678;
wire   [11:0] F2_fu_1544_p2;
reg   [11:0] F2_reg_4686;
wire   [4:0] temp_output_0_V_addr_reg_4694;
wire    ap_CS_fsm_state6;
wire   [3:0] temp_output2_0_V_addr_reg_4699;
wire   [5:0] add_ln21_fu_1770_p2;
reg   [5:0] add_ln21_reg_4704;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln21_fu_1776_p2;
wire   [63:0] zext_ln21_fu_1782_p1;
reg   [63:0] zext_ln21_reg_4713;
wire   [11:0] zext_ln21_1_fu_1786_p1;
reg   [11:0] zext_ln21_1_reg_4718;
wire   [0:0] icmp_ln25_fu_1790_p2;
reg   [0:0] icmp_ln25_reg_4723;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln25_reg_4723_pp1_iter1_reg;
wire   [6:0] add_ln25_fu_1796_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [6:0] or_ln25_fu_1830_p2;
reg   [6:0] or_ln25_reg_4742;
wire   [39:0] mul_ln1192_fu_1849_p2;
reg   [39:0] mul_ln1192_reg_4752;
wire   [31:0] fp_input_img_V_q0;
reg  signed [31:0] r_V_1_reg_4762;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
wire   [5:0] add_ln77_fu_1932_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state12_pp2_stage0_iter0;
wire    ap_block_state13_pp2_stage0_iter1;
wire    ap_block_state14_pp2_stage0_iter2;
wire    ap_block_state15_pp2_stage0_iter3;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln77_fu_1938_p2;
reg   [4:0] temp_output_0_V_addr_1_reg_4781;
reg   [4:0] temp_output_0_V_addr_1_reg_4781_pp2_iter1_reg;
reg   [4:0] temp_output_0_V_addr_1_reg_4781_pp2_iter2_reg;
wire   [0:0] icmp_ln885_fu_1949_p2;
reg   [0:0] icmp_ln885_reg_4787;
reg   [0:0] icmp_ln885_reg_4787_pp2_iter2_reg;
wire   [0:0] p_Result_10_fu_1955_p3;
reg   [0:0] p_Result_10_reg_4791;
wire   [31:0] tmp_V_4_fu_1969_p3;
reg   [31:0] tmp_V_4_reg_4796;
wire   [0:0] icmp_ln908_fu_2089_p2;
reg   [0:0] icmp_ln908_reg_4801;
wire   [31:0] add_ln908_fu_2103_p2;
reg   [31:0] add_ln908_reg_4806;
wire   [31:0] sub_ln909_fu_2115_p2;
reg   [31:0] sub_ln909_reg_4811;
wire   [0:0] select_ln908_fu_2121_p3;
reg   [0:0] select_ln908_reg_4816;
wire   [10:0] trunc_ln893_fu_2129_p1;
reg   [10:0] trunc_ln893_reg_4821;
wire   [63:0] bitcast_ln734_fu_2230_p1;
wire   [0:0] icmp_ln1506_fu_2245_p2;
reg   [0:0] icmp_ln1506_reg_4831;
wire   [0:0] icmp_ln1506_1_fu_2251_p2;
reg   [0:0] icmp_ln1506_1_reg_4836;
wire    ap_CS_fsm_state16;
wire   [31:0] temp_output_0_V_q0;
reg   [31:0] temp_output_0_V_load_reg_4849;
wire    ap_CS_fsm_state17;
wire   [31:0] temp_output_0_V_q1;
reg   [31:0] temp_output_0_V_load_1_reg_4854;
reg   [31:0] temp_output_0_V_load_2_reg_4869;
wire    ap_CS_fsm_state18;
reg   [31:0] temp_output_0_V_load_3_reg_4874;
reg   [31:0] temp_output_0_V_load_4_reg_4889;
wire    ap_CS_fsm_state19;
reg   [31:0] temp_output_0_V_load_5_reg_4894;
reg   [31:0] temp_output_0_V_load_6_reg_4909;
wire    ap_CS_fsm_state20;
reg   [31:0] temp_output_0_V_load_7_reg_4914;
reg   [31:0] temp_output_0_V_load_8_reg_4929;
wire    ap_CS_fsm_state21;
reg   [31:0] temp_output_0_V_load_9_reg_4934;
reg   [31:0] temp_output_0_V_load_10_reg_4949;
wire    ap_CS_fsm_state22;
reg   [31:0] temp_output_0_V_load_11_reg_4954;
reg   [31:0] temp_output_0_V_load_12_reg_4969;
wire    ap_CS_fsm_state23;
reg   [31:0] temp_output_0_V_load_13_reg_4974;
reg   [31:0] temp_output_0_V_load_14_reg_4989;
wire    ap_CS_fsm_state24;
reg   [31:0] temp_output_0_V_load_15_reg_4994;
reg   [31:0] temp_output_0_V_load_16_reg_5009;
wire    ap_CS_fsm_state25;
reg   [31:0] temp_output_0_V_load_17_reg_5014;
reg   [31:0] temp_output_0_V_load_18_reg_5029;
wire    ap_CS_fsm_state26;
reg   [31:0] temp_output_0_V_load_19_reg_5034;
reg   [31:0] temp_output_0_V_load_20_reg_5049;
wire    ap_CS_fsm_state27;
reg   [31:0] temp_output_0_V_load_21_reg_5054;
reg   [31:0] temp_output_0_V_load_22_reg_5069;
wire    ap_CS_fsm_state28;
reg   [31:0] temp_output_0_V_load_23_reg_5074;
reg   [31:0] temp_output_0_V_load_24_reg_5089;
wire    ap_CS_fsm_state29;
reg   [31:0] temp_output_0_V_load_25_reg_5094;
reg   [31:0] temp_output_0_V_load_26_reg_5109;
wire    ap_CS_fsm_state30;
reg   [31:0] temp_output_0_V_load_27_reg_5114;
reg   [31:0] temp_output_0_V_load_28_reg_5129;
wire    ap_CS_fsm_state31;
reg   [31:0] temp_output_0_V_load_29_reg_5134;
wire  signed [39:0] sext_ln708_fu_2267_p1;
reg  signed [39:0] sext_ln708_reg_5149;
wire    ap_CS_fsm_state32;
wire  signed [39:0] sext_ln1116_fu_2270_p1;
reg  signed [39:0] sext_ln1116_reg_5154;
wire  signed [39:0] sext_ln1192_fu_2273_p1;
reg  signed [39:0] sext_ln1192_reg_5159;
wire  signed [39:0] sext_ln1116_1_fu_2276_p1;
reg  signed [39:0] sext_ln1116_1_reg_5164;
wire  signed [39:0] sext_ln1116_2_fu_2279_p1;
reg  signed [39:0] sext_ln1116_2_reg_5169;
wire  signed [39:0] sext_ln1116_3_fu_2282_p1;
reg  signed [39:0] sext_ln1116_3_reg_5174;
wire  signed [39:0] sext_ln1116_4_fu_2285_p1;
reg  signed [39:0] sext_ln1116_4_reg_5179;
wire  signed [39:0] sext_ln1192_1_fu_2288_p1;
reg  signed [39:0] sext_ln1192_1_reg_5184;
wire  signed [39:0] sext_ln1192_2_fu_2291_p1;
reg  signed [39:0] sext_ln1192_2_reg_5189;
wire  signed [39:0] sext_ln1192_3_fu_2294_p1;
reg  signed [39:0] sext_ln1192_3_reg_5194;
wire  signed [39:0] sext_ln1192_4_fu_2297_p1;
reg  signed [39:0] sext_ln1192_4_reg_5199;
wire  signed [39:0] sext_ln1116_5_fu_2300_p1;
reg  signed [39:0] sext_ln1116_5_reg_5204;
wire  signed [39:0] sext_ln1116_6_fu_2303_p1;
reg  signed [39:0] sext_ln1116_6_reg_5209;
wire  signed [39:0] sext_ln1192_5_fu_2306_p1;
reg  signed [39:0] sext_ln1192_5_reg_5214;
wire  signed [39:0] sext_ln1116_7_fu_2309_p1;
reg  signed [39:0] sext_ln1116_7_reg_5219;
wire  signed [39:0] sext_ln1192_6_fu_2312_p1;
reg  signed [39:0] sext_ln1192_6_reg_5224;
wire  signed [39:0] sext_ln1192_7_fu_2315_p1;
reg  signed [39:0] sext_ln1192_7_reg_5229;
wire  signed [39:0] sext_ln1192_8_fu_2318_p1;
reg  signed [39:0] sext_ln1192_8_reg_5234;
wire  signed [39:0] sext_ln1192_9_fu_2321_p1;
reg  signed [39:0] sext_ln1192_9_reg_5239;
wire  signed [39:0] sext_ln1192_10_fu_2324_p1;
reg  signed [39:0] sext_ln1192_10_reg_5244;
wire  signed [39:0] sext_ln1116_8_fu_2327_p1;
reg  signed [39:0] sext_ln1116_8_reg_5249;
wire  signed [39:0] sext_ln1116_9_fu_2330_p1;
reg  signed [39:0] sext_ln1116_9_reg_5254;
wire  signed [39:0] sext_ln1192_11_fu_2333_p1;
reg  signed [39:0] sext_ln1192_11_reg_5259;
wire  signed [39:0] sext_ln1116_10_fu_2336_p1;
reg  signed [39:0] sext_ln1116_10_reg_5264;
wire  signed [39:0] sext_ln1192_12_fu_2339_p1;
reg  signed [39:0] sext_ln1192_12_reg_5269;
wire  signed [39:0] sext_ln1192_13_fu_2342_p1;
reg  signed [39:0] sext_ln1192_13_reg_5274;
wire  signed [39:0] sext_ln1116_11_fu_2345_p1;
reg  signed [39:0] sext_ln1116_11_reg_5279;
wire  signed [39:0] sext_ln1116_12_fu_2348_p1;
reg  signed [39:0] sext_ln1116_12_reg_5284;
wire  signed [39:0] sext_ln1116_13_fu_2351_p1;
reg  signed [39:0] sext_ln1116_13_reg_5289;
wire  signed [39:0] sext_ln1192_14_fu_2354_p1;
reg  signed [39:0] sext_ln1192_14_reg_5294;
wire  signed [39:0] sext_ln1116_14_fu_2357_p1;
reg  signed [39:0] sext_ln1116_14_reg_5299;
wire  signed [39:0] sext_ln1192_15_fu_2361_p1;
reg  signed [39:0] sext_ln1192_15_reg_5304;
wire   [4:0] add_ln40_fu_2365_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state33_pp3_stage0_iter0;
wire    ap_block_state34_pp3_stage0_iter1;
wire    ap_block_state35_pp3_stage0_iter2;
wire    ap_block_state36_pp3_stage0_iter3;
wire    ap_block_state37_pp3_stage0_iter4;
wire    ap_block_state38_pp3_stage0_iter5;
wire    ap_block_state39_pp3_stage0_iter6;
wire    ap_block_state40_pp3_stage0_iter7;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln40_fu_2371_p2;
reg   [0:0] icmp_ln40_reg_5314;
reg   [0:0] icmp_ln40_reg_5314_pp3_iter1_reg;
reg   [0:0] icmp_ln40_reg_5314_pp3_iter2_reg;
reg   [0:0] icmp_ln40_reg_5314_pp3_iter3_reg;
reg   [0:0] icmp_ln40_reg_5314_pp3_iter4_reg;
reg   [0:0] icmp_ln40_reg_5314_pp3_iter5_reg;
reg   [0:0] icmp_ln40_reg_5314_pp3_iter6_reg;
wire   [63:0] j_1_cast_fu_2377_p1;
reg   [63:0] j_1_cast_reg_5318;
reg   [63:0] j_1_cast_reg_5318_pp3_iter1_reg;
reg   [63:0] j_1_cast_reg_5318_pp3_iter2_reg;
reg   [63:0] j_1_cast_reg_5318_pp3_iter3_reg;
reg   [63:0] j_1_cast_reg_5318_pp3_iter4_reg;
reg   [63:0] j_1_cast_reg_5318_pp3_iter5_reg;
reg   [63:0] j_1_cast_reg_5318_pp3_iter6_reg;
wire   [39:0] mul_ln703_1_fu_2466_p2;
reg   [39:0] mul_ln703_1_reg_5379;
reg   [31:0] tmp_27_reg_5384;
wire   [39:0] mul_ln703_2_fu_2485_p2;
reg   [39:0] mul_ln703_2_reg_5389;
wire   [39:0] mul_ln703_3_fu_2494_p2;
reg   [39:0] mul_ln703_3_reg_5394;
wire   [39:0] mul_ln1192_4_fu_2627_p2;
reg   [39:0] mul_ln1192_4_reg_5424;
reg   [31:0] tmp_32_reg_5429;
wire   [39:0] mul_ln1192_5_fu_2646_p2;
reg   [39:0] mul_ln1192_5_reg_5434;
wire   [39:0] mul_ln1192_6_fu_2655_p2;
reg   [39:0] mul_ln1192_6_reg_5439;
wire   [39:0] mul_ln1192_7_fu_2788_p2;
reg   [39:0] mul_ln1192_7_reg_5469;
reg   [31:0] tmp_37_reg_5474;
wire   [39:0] mul_ln703_7_fu_2807_p2;
reg   [39:0] mul_ln703_7_reg_5479;
wire   [39:0] mul_ln1192_8_fu_2816_p2;
reg   [39:0] mul_ln1192_8_reg_5484;
wire   [39:0] mul_ln1192_11_fu_2949_p2;
reg   [39:0] mul_ln1192_11_reg_5514;
reg   [31:0] tmp_42_reg_5519;
wire   [39:0] mul_ln1192_12_fu_2968_p2;
reg   [39:0] mul_ln1192_12_reg_5524;
wire   [39:0] mul_ln703_8_fu_2977_p2;
reg   [39:0] mul_ln703_8_reg_5529;
wire   [39:0] mul_ln703_10_fu_3110_p2;
reg   [39:0] mul_ln703_10_reg_5559;
reg   [31:0] tmp_47_reg_5564;
wire   [39:0] mul_ln1192_14_fu_3129_p2;
reg   [39:0] mul_ln1192_14_reg_5569;
wire   [39:0] mul_ln1192_15_fu_3138_p2;
reg   [39:0] mul_ln1192_15_reg_5574;
wire   [39:0] mul_ln703_13_fu_3271_p2;
reg   [39:0] mul_ln703_13_reg_5604;
reg   [31:0] tmp_52_reg_5609;
wire   [39:0] mul_ln1192_16_fu_3290_p2;
reg   [39:0] mul_ln1192_16_reg_5614;
reg  signed [7:0] layer2_weights_V_30_load_reg_5619;
wire   [4:0] add_ln92_fu_3406_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state42_pp4_stage0_iter0;
wire    ap_block_state43_pp4_stage0_iter1;
wire    ap_block_state44_pp4_stage0_iter2;
wire    ap_block_state45_pp4_stage0_iter3;
wire    ap_block_pp4_stage0_11001;
wire   [0:0] icmp_ln92_fu_3412_p2;
reg   [3:0] temp_output2_0_V_addr_2_reg_5638;
reg   [3:0] temp_output2_0_V_addr_2_reg_5638_pp4_iter1_reg;
reg   [3:0] temp_output2_0_V_addr_2_reg_5638_pp4_iter2_reg;
wire   [0:0] icmp_ln885_1_fu_3423_p2;
reg   [0:0] icmp_ln885_1_reg_5644;
reg   [0:0] icmp_ln885_1_reg_5644_pp4_iter2_reg;
wire   [0:0] p_Result_14_fu_3429_p3;
reg   [0:0] p_Result_14_reg_5648;
wire   [31:0] tmp_V_5_fu_3443_p3;
reg   [31:0] tmp_V_5_reg_5653;
wire   [0:0] icmp_ln908_1_fu_3563_p2;
reg   [0:0] icmp_ln908_1_reg_5658;
wire   [31:0] add_ln908_1_fu_3577_p2;
reg   [31:0] add_ln908_1_reg_5663;
wire   [31:0] sub_ln909_1_fu_3589_p2;
reg   [31:0] sub_ln909_1_reg_5668;
wire   [0:0] select_ln908_2_fu_3595_p3;
reg   [0:0] select_ln908_2_reg_5673;
wire   [10:0] trunc_ln893_1_fu_3603_p1;
reg   [10:0] trunc_ln893_1_reg_5678;
wire   [63:0] bitcast_ln734_1_fu_3704_p1;
wire   [0:0] icmp_ln1506_2_fu_3719_p2;
reg   [0:0] icmp_ln1506_2_reg_5688;
wire   [0:0] icmp_ln1506_3_fu_3725_p2;
reg   [0:0] icmp_ln1506_3_reg_5693;
wire    ap_CS_fsm_state46;
wire   [31:0] temp_output2_0_V_q0;
reg   [31:0] temp_output2_0_V_load_reg_5725;
wire    ap_CS_fsm_state47;
wire   [31:0] temp_output2_0_V_q1;
reg   [31:0] temp_output2_0_V_load_1_reg_5730;
reg   [31:0] temp_output2_0_V_load_2_reg_5745;
wire    ap_CS_fsm_state48;
reg   [31:0] temp_output2_0_V_load_3_reg_5750;
reg   [31:0] temp_output2_0_V_load_4_reg_5765;
wire    ap_CS_fsm_state49;
reg   [31:0] temp_output2_0_V_load_5_reg_5770;
reg   [31:0] temp_output2_0_V_load_6_reg_5785;
wire    ap_CS_fsm_state50;
reg   [31:0] temp_output2_0_V_load_7_reg_5790;
reg   [31:0] temp_output2_0_V_load_8_reg_5805;
wire    ap_CS_fsm_state51;
reg   [31:0] temp_output2_0_V_load_9_reg_5810;
reg   [31:0] temp_output2_0_V_load_10_reg_5825;
wire    ap_CS_fsm_state52;
reg   [31:0] temp_output2_0_V_load_11_reg_5830;
reg   [31:0] temp_output2_0_V_load_12_reg_5845;
wire    ap_CS_fsm_state53;
reg   [31:0] temp_output2_0_V_load_13_reg_5850;
wire  signed [39:0] sext_ln1116_15_fu_3746_p1;
reg  signed [39:0] sext_ln1116_15_reg_5865;
wire    ap_CS_fsm_state54;
wire  signed [39:0] sext_ln1116_16_fu_3749_p1;
reg  signed [39:0] sext_ln1116_16_reg_5870;
wire  signed [39:0] sext_ln1116_17_fu_3752_p1;
reg  signed [39:0] sext_ln1116_17_reg_5875;
wire  signed [39:0] sext_ln1116_18_fu_3755_p1;
reg  signed [39:0] sext_ln1116_18_reg_5880;
wire  signed [39:0] sext_ln1116_19_fu_3758_p1;
reg  signed [39:0] sext_ln1116_19_reg_5885;
wire  signed [39:0] sext_ln1116_20_fu_3761_p1;
reg  signed [39:0] sext_ln1116_20_reg_5890;
wire  signed [39:0] sext_ln1116_21_fu_3764_p1;
reg  signed [39:0] sext_ln1116_21_reg_5895;
wire  signed [39:0] sext_ln1116_22_fu_3767_p1;
reg  signed [39:0] sext_ln1116_22_reg_5900;
wire  signed [39:0] sext_ln1116_23_fu_3770_p1;
reg  signed [39:0] sext_ln1116_23_reg_5905;
wire  signed [39:0] sext_ln1116_24_fu_3773_p1;
reg  signed [39:0] sext_ln1116_24_reg_5910;
wire  signed [39:0] sext_ln1116_25_fu_3776_p1;
reg  signed [39:0] sext_ln1116_25_reg_5915;
wire  signed [39:0] sext_ln1116_26_fu_3779_p1;
reg  signed [39:0] sext_ln1116_26_reg_5920;
wire  signed [39:0] sext_ln1116_27_fu_3782_p1;
reg  signed [39:0] sext_ln1116_27_reg_5925;
wire  signed [39:0] sext_ln1116_28_fu_3785_p1;
reg  signed [39:0] sext_ln1116_28_reg_5930;
wire  signed [39:0] sext_ln1116_29_fu_3788_p1;
reg  signed [39:0] sext_ln1116_29_reg_5935;
wire  signed [39:0] temp_output2_0_V_load_15_cast_fu_3792_p1;
reg  signed [39:0] temp_output2_0_V_load_15_cast_reg_5940;
wire   [1:0] add_ln59_fu_3796_p2;
reg   [1:0] add_ln59_reg_5945;
reg    ap_enable_reg_pp5_iter0;
wire   [0:0] icmp_ln59_fu_3802_p2;
reg   [0:0] icmp_ln59_reg_5950;
wire   [39:0] mul_ln1118_3_fu_3935_p2;
reg   [39:0] mul_ln1118_3_reg_5954;
reg   [31:0] tmp_58_reg_5959;
wire   [39:0] mul_ln1118_4_fu_3966_p2;
reg   [39:0] mul_ln1118_4_reg_5964;
wire   [39:0] mul_ln1118_5_fu_3987_p2;
reg   [39:0] mul_ln1118_5_reg_5969;
wire   [39:0] mul_ln1118_8_fu_4156_p2;
reg   [39:0] mul_ln1118_8_reg_5974;
reg   [31:0] tmp_63_reg_5979;
wire   [39:0] mul_ln1118_9_fu_4187_p2;
reg   [39:0] mul_ln1118_9_reg_5984;
wire   [39:0] mul_ln1118_10_fu_4208_p2;
reg   [39:0] mul_ln1118_10_reg_5989;
wire   [39:0] mul_ln1118_13_fu_4377_p2;
reg   [39:0] mul_ln1118_13_reg_5994;
reg   [31:0] tmp_68_reg_5999;
wire   [31:0] tmp_17_fu_4392_p5;
reg  signed [31:0] tmp_17_reg_6004;
wire   [1:0] add_ln109_fu_4518_p2;
wire    ap_CS_fsm_state60;
wire   [31:0] max_val_V_1_fu_4557_p3;
wire   [0:0] icmp_ln109_fu_4524_p2;
wire   [31:0] max_idx_V_1_fu_4577_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter1_state9;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state12;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state33;
reg    ap_enable_reg_pp3_iter1;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter6;
reg    ap_enable_reg_pp3_iter7;
wire    ap_CS_fsm_state41;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state42;
reg    ap_enable_reg_pp4_iter1;
reg    ap_enable_reg_pp4_iter2;
reg    ap_enable_reg_pp4_iter3;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state55;
reg    ap_enable_reg_pp5_iter1;
reg    ap_enable_reg_pp5_iter2;
reg    ap_enable_reg_pp5_iter3;
reg   [6:0] fp_input_img_V_address0;
reg    fp_input_img_V_ce0;
reg    fp_input_img_V_we0;
reg   [31:0] fp_input_img_V_d0;
wire   [6:0] fp_input_img_V_address1;
reg    fp_input_img_V_ce1;
wire  signed [31:0] fp_input_img_V_q1;
reg   [4:0] temp_output_0_V_address0;
reg    temp_output_0_V_ce0;
reg    temp_output_0_V_we0;
reg   [31:0] temp_output_0_V_d0;
reg   [4:0] temp_output_0_V_address1;
reg    temp_output_0_V_ce1;
reg   [3:0] temp_output2_0_V_address0;
reg    temp_output2_0_V_ce0;
reg    temp_output2_0_V_we0;
reg   [31:0] temp_output2_0_V_d0;
reg   [3:0] temp_output2_0_V_address1;
reg    temp_output2_0_V_ce1;
reg   [5:0] j_reg_1359;
wire    ap_CS_fsm_state11;
wire    ap_block_pp1_stage0;
reg   [1:0] ap_phi_mux_j_2_phi_fu_1432_p4;
wire    ap_block_pp5_stage0;
reg   [1:0] i_3_reg_1440;
wire    ap_CS_fsm_state59;
reg   [31:0] max_idx_V_reg_1451;
reg   [31:0] max_val_V_reg_1463;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1118_fu_1825_p1;
wire   [63:0] k_cast75_fu_1802_p1;
wire   [63:0] zext_ln23_fu_1836_p1;
wire   [63:0] zext_ln1118_1_fu_1867_p1;
wire   [63:0] i_1_cast_fu_1944_p1;
wire    ap_block_pp2_stage0;
wire    ap_block_pp3_stage0;
wire   [63:0] i_2_cast_fu_3418_p1;
wire    ap_block_pp4_stage0;
reg   [31:0] temp_output3_0_2_V_fu_408;
reg   [31:0] temp_output3_0_2_V_1_fu_412;
reg   [31:0] temp_output3_0_2_V_2_fu_416;
wire   [31:0] select_ln571_4_fu_1761_p3;
wire   [0:0] and_ln1506_fu_2261_p2;
wire   [0:0] and_ln1506_1_fu_3735_p2;
wire   [31:0] grp_fu_1474_p0;
reg   [63:0] grp_fu_1477_p0;
wire   [63:0] grp_fu_1474_p1;
wire   [63:0] ireg_fu_1504_p1;
wire   [10:0] exp_tmp_fu_1520_p4;
wire   [62:0] trunc_ln555_fu_1508_p1;
wire   [11:0] zext_ln455_fu_1530_p1;
wire   [52:0] p_Result_9_fu_1550_p3;
wire   [53:0] zext_ln569_fu_1557_p1;
wire   [53:0] man_V_1_fu_1561_p2;
wire   [0:0] icmp_ln581_fu_1574_p2;
wire   [11:0] add_ln581_fu_1579_p2;
wire   [11:0] sub_ln581_fu_1584_p2;
wire  signed [11:0] sh_amt_fu_1589_p3;
wire   [53:0] man_V_2_fu_1567_p3;
wire   [6:0] tmp_21_fu_1610_p4;
wire  signed [31:0] sext_ln581_fu_1597_p1;
wire   [53:0] zext_ln586_fu_1626_p1;
wire   [53:0] ashr_ln586_fu_1630_p2;
wire   [0:0] tmp_72_fu_1640_p3;
wire   [31:0] trunc_ln583_fu_1606_p1;
wire   [0:0] icmp_ln582_fu_1601_p2;
wire   [0:0] xor_ln571_fu_1661_p2;
wire   [0:0] or_ln582_fu_1672_p2;
wire   [0:0] xor_ln582_fu_1677_p2;
wire   [0:0] and_ln581_fu_1683_p2;
wire   [0:0] icmp_ln585_fu_1689_p2;
wire   [0:0] or_ln581_fu_1701_p2;
wire   [0:0] icmp_ln603_fu_1620_p2;
wire   [0:0] xor_ln581_fu_1707_p2;
wire   [31:0] shl_ln604_fu_1655_p2;
wire   [0:0] and_ln603_fu_1713_p2;
wire   [0:0] and_ln585_fu_1695_p2;
wire   [31:0] select_ln588_fu_1647_p3;
wire   [31:0] trunc_ln586_fu_1636_p1;
wire   [0:0] and_ln582_fu_1666_p2;
wire   [0:0] or_ln571_fu_1726_p2;
wire   [31:0] select_ln571_fu_1719_p3;
wire   [31:0] select_ln571_1_fu_1731_p3;
wire   [0:0] or_ln571_1_fu_1755_p2;
wire   [31:0] select_ln571_3_fu_1747_p3;
wire   [31:0] select_ln571_2_fu_1739_p3;
wire   [5:0] tmp_20_fu_1807_p4;
wire   [11:0] tmp_22_fu_1817_p3;
wire   [11:0] tmp_23_fu_1855_p3;
wire   [11:0] add_ln1118_fu_1862_p2;
wire   [39:0] lhs_1_fu_1872_p3;
wire   [39:0] ret_V_fu_1880_p2;
wire   [31:0] tmp_24_fu_1898_p4;
wire   [39:0] lhs_2_fu_1908_p3;
wire   [39:0] mul_ln1192_1_fu_1892_p2;
wire   [39:0] ret_V_1_fu_1916_p2;
wire   [31:0] tmp_V_fu_1963_p2;
reg   [31:0] p_Result_11_fu_1977_p4;
reg   [31:0] l_fu_1987_p3;
wire   [31:0] sub_ln894_fu_1995_p2;
wire   [31:0] lsb_index_fu_2001_p2;
wire   [30:0] tmp_74_fu_2007_p4;
wire   [5:0] trunc_ln897_fu_2023_p1;
wire   [5:0] sub_ln897_fu_2027_p2;
wire   [31:0] zext_ln897_fu_2033_p1;
wire   [31:0] lshr_ln897_fu_2037_p2;
wire   [31:0] shl_ln899_fu_2043_p2;
wire   [31:0] or_ln899_2_fu_2049_p2;
wire   [31:0] and_ln899_fu_2055_p2;
wire   [0:0] tmp_75_fu_2067_p3;
wire   [0:0] icmp_ln896_fu_2017_p2;
wire   [0:0] icmp_ln899_fu_2061_p2;
wire   [0:0] p_Result_12_fu_2081_p3;
wire   [0:0] xor_ln899_fu_2075_p2;
wire   [0:0] select_ln896_fu_2095_p3;
wire   [0:0] and_ln899_1_fu_2109_p2;
wire   [63:0] zext_ln907_fu_2133_p1;
wire   [63:0] zext_ln908_fu_2136_p1;
wire   [63:0] zext_ln909_fu_2145_p1;
wire   [63:0] lshr_ln908_fu_2139_p2;
wire   [63:0] shl_ln909_fu_2148_p2;
wire   [63:0] m_2_fu_2154_p3;
wire   [63:0] zext_ln911_fu_2161_p1;
wire   [63:0] m_3_fu_2164_p2;
wire   [62:0] m_8_fu_2170_p4;
wire   [0:0] p_Result_s_fu_2184_p3;
wire   [10:0] sub_ln915_fu_2200_p2;
wire   [10:0] select_ln893_fu_2192_p3;
wire   [10:0] add_ln915_fu_2205_p2;
wire   [63:0] zext_ln912_fu_2180_p1;
wire   [11:0] tmp_s_fu_2211_p3;
wire   [63:0] p_Result_13_fu_2218_p5;
wire   [51:0] trunc_ln6_fu_2235_p4;
wire   [0:0] or_ln1506_fu_2257_p2;
wire   [0:0] grp_fu_1477_p2;
wire  signed [31:0] mul_ln708_fu_2391_p1;
wire  signed [31:0] mul_ln703_fu_2400_p1;
wire   [39:0] mul_ln708_fu_2391_p2;
wire   [31:0] tmp_25_fu_2405_p4;
wire   [39:0] shl_ln_fu_2415_p3;
wire   [39:0] mul_ln703_fu_2400_p2;
wire  signed [31:0] mul_ln1192_2_fu_2433_p1;
wire   [39:0] add_ln1192_fu_2423_p2;
wire   [31:0] tmp_26_fu_2438_p4;
wire   [39:0] shl_ln728_1_fu_2448_p3;
wire   [39:0] mul_ln1192_2_fu_2433_p2;
wire  signed [31:0] mul_ln703_1_fu_2466_p1;
wire   [39:0] add_ln1192_1_fu_2456_p2;
wire  signed [31:0] mul_ln703_2_fu_2485_p1;
wire  signed [31:0] mul_ln703_3_fu_2494_p1;
wire   [39:0] shl_ln728_2_fu_2499_p3;
wire   [39:0] add_ln1192_2_fu_2506_p2;
wire   [31:0] tmp_28_fu_2511_p4;
wire   [39:0] shl_ln728_3_fu_2521_p3;
wire   [39:0] add_ln1192_3_fu_2529_p2;
wire   [31:0] tmp_29_fu_2534_p4;
wire   [39:0] shl_ln728_4_fu_2544_p3;
wire  signed [31:0] mul_ln703_4_fu_2561_p1;
wire   [39:0] add_ln1192_4_fu_2552_p2;
wire   [31:0] tmp_30_fu_2566_p4;
wire   [39:0] shl_ln728_5_fu_2576_p3;
wire   [39:0] mul_ln703_4_fu_2561_p2;
wire  signed [31:0] mul_ln1192_3_fu_2594_p1;
wire   [39:0] add_ln1192_5_fu_2584_p2;
wire   [31:0] tmp_31_fu_2599_p4;
wire   [39:0] shl_ln728_6_fu_2609_p3;
wire   [39:0] mul_ln1192_3_fu_2594_p2;
wire  signed [31:0] mul_ln1192_4_fu_2627_p1;
wire   [39:0] add_ln1192_6_fu_2617_p2;
wire  signed [31:0] mul_ln1192_5_fu_2646_p1;
wire  signed [31:0] mul_ln1192_6_fu_2655_p1;
wire   [39:0] shl_ln728_7_fu_2660_p3;
wire   [39:0] add_ln1192_7_fu_2667_p2;
wire   [31:0] tmp_33_fu_2672_p4;
wire   [39:0] shl_ln728_8_fu_2682_p3;
wire   [39:0] add_ln1192_8_fu_2690_p2;
wire   [31:0] tmp_34_fu_2695_p4;
wire   [39:0] shl_ln728_9_fu_2705_p3;
wire  signed [31:0] mul_ln703_5_fu_2722_p1;
wire   [39:0] add_ln1192_9_fu_2713_p2;
wire   [31:0] tmp_35_fu_2727_p4;
wire   [39:0] shl_ln728_s_fu_2737_p3;
wire   [39:0] mul_ln703_5_fu_2722_p2;
wire  signed [31:0] mul_ln703_6_fu_2755_p1;
wire   [39:0] add_ln1192_10_fu_2745_p2;
wire   [31:0] tmp_36_fu_2760_p4;
wire   [39:0] shl_ln728_10_fu_2770_p3;
wire   [39:0] mul_ln703_6_fu_2755_p2;
wire  signed [31:0] mul_ln1192_7_fu_2788_p1;
wire   [39:0] add_ln1192_11_fu_2778_p2;
wire  signed [31:0] mul_ln703_7_fu_2807_p1;
wire  signed [31:0] mul_ln1192_8_fu_2816_p1;
wire   [39:0] shl_ln728_11_fu_2821_p3;
wire   [39:0] add_ln1192_12_fu_2828_p2;
wire   [31:0] tmp_38_fu_2833_p4;
wire   [39:0] shl_ln728_12_fu_2843_p3;
wire   [39:0] add_ln1192_13_fu_2851_p2;
wire   [31:0] tmp_39_fu_2856_p4;
wire   [39:0] shl_ln728_13_fu_2866_p3;
wire  signed [31:0] mul_ln1192_9_fu_2883_p1;
wire   [39:0] add_ln1192_14_fu_2874_p2;
wire   [31:0] tmp_40_fu_2888_p4;
wire   [39:0] shl_ln728_14_fu_2898_p3;
wire   [39:0] mul_ln1192_9_fu_2883_p2;
wire  signed [31:0] mul_ln1192_10_fu_2916_p1;
wire   [39:0] add_ln1192_15_fu_2906_p2;
wire   [31:0] tmp_41_fu_2921_p4;
wire   [39:0] shl_ln728_15_fu_2931_p3;
wire   [39:0] mul_ln1192_10_fu_2916_p2;
wire  signed [31:0] mul_ln1192_11_fu_2949_p1;
wire   [39:0] add_ln1192_16_fu_2939_p2;
wire  signed [31:0] mul_ln1192_12_fu_2968_p1;
wire  signed [31:0] mul_ln703_8_fu_2977_p1;
wire   [39:0] shl_ln728_16_fu_2982_p3;
wire   [39:0] add_ln1192_17_fu_2989_p2;
wire   [31:0] tmp_43_fu_2994_p4;
wire   [39:0] shl_ln728_17_fu_3004_p3;
wire   [39:0] add_ln1192_18_fu_3012_p2;
wire   [31:0] tmp_44_fu_3017_p4;
wire   [39:0] shl_ln728_18_fu_3027_p3;
wire  signed [31:0] mul_ln703_9_fu_3044_p1;
wire   [39:0] add_ln1192_19_fu_3035_p2;
wire   [31:0] tmp_45_fu_3049_p4;
wire   [39:0] shl_ln728_19_fu_3059_p3;
wire   [39:0] mul_ln703_9_fu_3044_p2;
wire  signed [31:0] mul_ln1192_13_fu_3077_p1;
wire   [39:0] add_ln1192_20_fu_3067_p2;
wire   [31:0] tmp_46_fu_3082_p4;
wire   [39:0] shl_ln728_20_fu_3092_p3;
wire   [39:0] mul_ln1192_13_fu_3077_p2;
wire  signed [31:0] mul_ln703_10_fu_3110_p1;
wire   [39:0] add_ln1192_21_fu_3100_p2;
wire  signed [31:0] mul_ln1192_14_fu_3129_p1;
wire  signed [31:0] mul_ln1192_15_fu_3138_p1;
wire   [39:0] shl_ln728_21_fu_3143_p3;
wire   [39:0] add_ln1192_22_fu_3150_p2;
wire   [31:0] tmp_48_fu_3155_p4;
wire   [39:0] shl_ln728_22_fu_3165_p3;
wire   [39:0] add_ln1192_23_fu_3173_p2;
wire   [31:0] tmp_49_fu_3178_p4;
wire   [39:0] shl_ln728_23_fu_3188_p3;
wire  signed [31:0] mul_ln703_11_fu_3205_p1;
wire   [39:0] add_ln1192_24_fu_3196_p2;
wire   [31:0] tmp_50_fu_3210_p4;
wire   [39:0] shl_ln728_24_fu_3220_p3;
wire   [39:0] mul_ln703_11_fu_3205_p2;
wire  signed [31:0] mul_ln703_12_fu_3238_p1;
wire   [39:0] add_ln1192_25_fu_3228_p2;
wire   [31:0] tmp_51_fu_3243_p4;
wire   [39:0] shl_ln728_25_fu_3253_p3;
wire   [39:0] mul_ln703_12_fu_3238_p2;
wire  signed [31:0] mul_ln703_13_fu_3271_p1;
wire   [39:0] add_ln1192_26_fu_3261_p2;
wire  signed [31:0] mul_ln1192_16_fu_3290_p1;
wire   [39:0] shl_ln728_26_fu_3295_p3;
wire   [39:0] add_ln1192_27_fu_3302_p2;
wire   [31:0] tmp_53_fu_3307_p4;
wire   [39:0] shl_ln728_27_fu_3317_p3;
wire  signed [31:0] mul_ln703_14_fu_3333_p1;
wire   [39:0] add_ln1192_28_fu_3325_p2;
wire   [31:0] tmp_54_fu_3338_p4;
wire   [39:0] shl_ln728_28_fu_3348_p3;
wire   [39:0] mul_ln703_14_fu_3333_p2;
wire  signed [31:0] mul_ln1192_17_fu_3366_p1;
wire   [39:0] add_ln1192_29_fu_3356_p2;
wire   [31:0] tmp_55_fu_3371_p4;
wire   [39:0] shl_ln728_29_fu_3381_p3;
wire   [39:0] mul_ln1192_17_fu_3366_p2;
wire   [39:0] add_ln1192_30_fu_3389_p2;
wire   [31:0] tmp_V_2_fu_3437_p2;
reg   [31:0] p_Result_15_fu_3451_p4;
reg   [31:0] l_1_fu_3461_p3;
wire   [31:0] sub_ln894_1_fu_3469_p2;
wire   [31:0] lsb_index_1_fu_3475_p2;
wire   [30:0] tmp_78_fu_3481_p4;
wire   [5:0] trunc_ln897_1_fu_3497_p1;
wire   [5:0] sub_ln897_1_fu_3501_p2;
wire   [31:0] zext_ln897_1_fu_3507_p1;
wire   [31:0] lshr_ln897_1_fu_3511_p2;
wire   [31:0] shl_ln899_1_fu_3517_p2;
wire   [31:0] or_ln899_fu_3523_p2;
wire   [31:0] and_ln899_2_fu_3529_p2;
wire   [0:0] tmp_79_fu_3541_p3;
wire   [0:0] icmp_ln896_1_fu_3491_p2;
wire   [0:0] icmp_ln899_1_fu_3535_p2;
wire   [0:0] p_Result_16_fu_3555_p3;
wire   [0:0] xor_ln899_1_fu_3549_p2;
wire   [0:0] select_ln896_1_fu_3569_p3;
wire   [0:0] and_ln899_3_fu_3583_p2;
wire   [63:0] zext_ln907_1_fu_3607_p1;
wire   [63:0] zext_ln908_1_fu_3610_p1;
wire   [63:0] zext_ln909_1_fu_3619_p1;
wire   [63:0] lshr_ln908_1_fu_3613_p2;
wire   [63:0] shl_ln909_1_fu_3622_p2;
wire   [63:0] m_4_fu_3628_p3;
wire   [63:0] zext_ln911_1_fu_3635_p1;
wire   [63:0] m_5_fu_3638_p2;
wire   [62:0] m_fu_3644_p4;
wire   [0:0] p_Result_5_fu_3658_p3;
wire   [10:0] sub_ln915_1_fu_3674_p2;
wire   [10:0] select_ln893_1_fu_3666_p3;
wire   [10:0] add_ln915_1_fu_3679_p2;
wire   [63:0] zext_ln912_1_fu_3654_p1;
wire   [11:0] tmp_1_fu_3685_p3;
wire   [63:0] p_Result_17_fu_3692_p5;
wire   [51:0] trunc_ln1506_1_fu_3709_p4;
wire   [0:0] or_ln1506_1_fu_3731_p2;
wire  signed [31:0] tmp_3_fu_3808_p5;
wire  signed [31:0] mul_ln1118_fu_3824_p1;
wire  signed [31:0] tmp_4_fu_3829_p5;
wire  signed [31:0] mul_ln1118_1_fu_3845_p1;
wire   [39:0] mul_ln1118_fu_3824_p2;
wire   [31:0] tmp_56_fu_3850_p4;
wire   [39:0] shl_ln728_30_fu_3860_p3;
wire   [39:0] mul_ln1118_1_fu_3845_p2;
wire  signed [31:0] tmp_5_fu_3874_p5;
wire  signed [31:0] mul_ln1118_2_fu_3890_p1;
wire   [39:0] add_ln1192_33_fu_3868_p2;
wire   [31:0] tmp_57_fu_3895_p4;
wire   [39:0] shl_ln728_31_fu_3905_p3;
wire   [39:0] mul_ln1118_2_fu_3890_p2;
wire  signed [31:0] tmp_6_fu_3919_p5;
wire  signed [31:0] mul_ln1118_3_fu_3935_p1;
wire   [39:0] add_ln1192_34_fu_3913_p2;
wire  signed [31:0] tmp_7_fu_3950_p5;
wire  signed [31:0] mul_ln1118_4_fu_3966_p1;
wire  signed [31:0] tmp_8_fu_3971_p5;
wire  signed [31:0] mul_ln1118_5_fu_3987_p1;
wire   [39:0] shl_ln728_32_fu_3992_p3;
wire   [39:0] add_ln1192_35_fu_3999_p2;
wire   [31:0] tmp_59_fu_4004_p4;
wire   [39:0] shl_ln728_33_fu_4014_p3;
wire   [39:0] add_ln1192_36_fu_4022_p2;
wire   [31:0] tmp_60_fu_4027_p4;
wire   [39:0] shl_ln728_34_fu_4037_p3;
wire  signed [31:0] tmp_9_fu_4050_p5;
wire  signed [31:0] mul_ln1118_6_fu_4066_p1;
wire   [39:0] add_ln1192_37_fu_4045_p2;
wire   [31:0] tmp_61_fu_4071_p4;
wire   [39:0] shl_ln728_35_fu_4081_p3;
wire   [39:0] mul_ln1118_6_fu_4066_p2;
wire  signed [31:0] tmp_10_fu_4095_p5;
wire  signed [31:0] mul_ln1118_7_fu_4111_p1;
wire   [39:0] add_ln1192_38_fu_4089_p2;
wire   [31:0] tmp_62_fu_4116_p4;
wire   [39:0] shl_ln728_36_fu_4126_p3;
wire   [39:0] mul_ln1118_7_fu_4111_p2;
wire  signed [31:0] tmp_11_fu_4140_p5;
wire  signed [31:0] mul_ln1118_8_fu_4156_p1;
wire   [39:0] add_ln1192_39_fu_4134_p2;
wire  signed [31:0] tmp_12_fu_4171_p5;
wire  signed [31:0] mul_ln1118_9_fu_4187_p1;
wire  signed [31:0] tmp_13_fu_4192_p5;
wire  signed [31:0] mul_ln1118_10_fu_4208_p1;
wire   [39:0] shl_ln728_37_fu_4213_p3;
wire   [39:0] add_ln1192_40_fu_4220_p2;
wire   [31:0] tmp_64_fu_4225_p4;
wire   [39:0] shl_ln728_38_fu_4235_p3;
wire   [39:0] add_ln1192_41_fu_4243_p2;
wire   [31:0] tmp_65_fu_4248_p4;
wire   [39:0] shl_ln728_39_fu_4258_p3;
wire  signed [31:0] tmp_14_fu_4271_p5;
wire  signed [31:0] mul_ln1118_11_fu_4287_p1;
wire   [39:0] add_ln1192_42_fu_4266_p2;
wire   [31:0] tmp_66_fu_4292_p4;
wire   [39:0] shl_ln728_40_fu_4302_p3;
wire   [39:0] mul_ln1118_11_fu_4287_p2;
wire  signed [31:0] tmp_15_fu_4316_p5;
wire  signed [31:0] mul_ln1118_12_fu_4332_p1;
wire   [39:0] add_ln1192_43_fu_4310_p2;
wire   [31:0] tmp_67_fu_4337_p4;
wire   [39:0] shl_ln728_41_fu_4347_p3;
wire   [39:0] mul_ln1118_12_fu_4332_p2;
wire  signed [31:0] tmp_16_fu_4361_p5;
wire  signed [31:0] mul_ln1118_13_fu_4377_p1;
wire   [39:0] add_ln1192_44_fu_4355_p2;
wire   [39:0] shl_ln728_42_fu_4404_p3;
wire  signed [31:0] mul_ln1118_14_fu_4419_p1;
wire   [39:0] add_ln1192_45_fu_4411_p2;
wire   [31:0] tmp_69_fu_4424_p4;
wire   [39:0] shl_ln728_43_fu_4434_p3;
wire   [39:0] mul_ln1118_14_fu_4419_p2;
wire  signed [31:0] tmp_18_fu_4448_p5;
wire  signed [31:0] mul_ln1118_15_fu_4464_p1;
wire   [39:0] add_ln1192_46_fu_4442_p2;
wire   [31:0] tmp_70_fu_4469_p4;
wire   [39:0] shl_ln728_44_fu_4479_p3;
wire   [39:0] mul_ln1118_15_fu_4464_p2;
wire   [39:0] add_ln1192_47_fu_4487_p2;
wire   [31:0] tmp_19_fu_4539_p5;
wire   [0:0] icmp_ln1494_fu_4551_p2;
wire   [9:0] shl_ln1_fu_4565_p3;
wire   [31:0] zext_ln111_fu_4573_p1;
wire    ap_CS_fsm_state61;
wire   [7:0] trunc_ln851_fu_4603_p1;
wire   [23:0] ret_V_2_fu_4585_p4;
wire   [0:0] icmp_ln851_fu_4607_p2;
wire   [23:0] ret_V_3_fu_4613_p2;
wire   [0:0] p_Result_7_fu_4595_p3;
wire   [23:0] select_ln850_fu_4619_p3;
wire   [23:0] ret_V_5_fu_4627_p3;
wire    ap_block_pp2_stage0_00001;
wire    ap_block_pp4_stage0_00001;
reg   [39:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter3 = 1'b0;
end

nn_inference_weights_layer1_weights_V #(
    .DataWidth( 9 ),
    .AddressRange( 3200 ),
    .AddressWidth( 12 ))
weights_layer1_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_layer1_weights_V_address0),
    .ce0(weights_layer1_weights_V_ce0),
    .q0(weights_layer1_weights_V_q0),
    .address1(weights_layer1_weights_V_address1),
    .ce1(weights_layer1_weights_V_ce1),
    .q1(weights_layer1_weights_V_q1)
);

nn_inference_layer2_weights_V_0 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_0_address0),
    .ce0(layer2_weights_V_0_ce0),
    .q0(layer2_weights_V_0_q0)
);

nn_inference_layer2_weights_V_1 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_1_address0),
    .ce0(layer2_weights_V_1_ce0),
    .q0(layer2_weights_V_1_q0)
);

nn_inference_layer2_weights_V_2 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_2_address0),
    .ce0(layer2_weights_V_2_ce0),
    .q0(layer2_weights_V_2_q0)
);

nn_inference_layer2_weights_V_3 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_3_address0),
    .ce0(layer2_weights_V_3_ce0),
    .q0(layer2_weights_V_3_q0)
);

nn_inference_layer2_weights_V_4 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_4_address0),
    .ce0(layer2_weights_V_4_ce0),
    .q0(layer2_weights_V_4_q0)
);

nn_inference_layer2_weights_V_5 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_5_address0),
    .ce0(layer2_weights_V_5_ce0),
    .q0(layer2_weights_V_5_q0)
);

nn_inference_layer2_weights_V_6 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_6_address0),
    .ce0(layer2_weights_V_6_ce0),
    .q0(layer2_weights_V_6_q0)
);

nn_inference_layer2_weights_V_7 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_7_address0),
    .ce0(layer2_weights_V_7_ce0),
    .q0(layer2_weights_V_7_q0)
);

nn_inference_layer2_weights_V_8 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_8_address0),
    .ce0(layer2_weights_V_8_ce0),
    .q0(layer2_weights_V_8_q0)
);

nn_inference_layer2_weights_V_9 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_9_address0),
    .ce0(layer2_weights_V_9_ce0),
    .q0(layer2_weights_V_9_q0)
);

nn_inference_layer2_weights_V_10 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_10_address0),
    .ce0(layer2_weights_V_10_ce0),
    .q0(layer2_weights_V_10_q0)
);

nn_inference_layer2_weights_V_11 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_11_address0),
    .ce0(layer2_weights_V_11_ce0),
    .q0(layer2_weights_V_11_q0)
);

nn_inference_layer2_weights_V_12 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_12_address0),
    .ce0(layer2_weights_V_12_ce0),
    .q0(layer2_weights_V_12_q0)
);

nn_inference_layer2_weights_V_13 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_13_address0),
    .ce0(layer2_weights_V_13_ce0),
    .q0(layer2_weights_V_13_q0)
);

nn_inference_layer2_weights_V_14 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_14_address0),
    .ce0(layer2_weights_V_14_ce0),
    .q0(layer2_weights_V_14_q0)
);

nn_inference_layer2_weights_V_15 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_15_address0),
    .ce0(layer2_weights_V_15_ce0),
    .q0(layer2_weights_V_15_q0)
);

nn_inference_layer2_weights_V_16 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_16_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_16_address0),
    .ce0(layer2_weights_V_16_ce0),
    .q0(layer2_weights_V_16_q0)
);

nn_inference_layer2_weights_V_17 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_17_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_17_address0),
    .ce0(layer2_weights_V_17_ce0),
    .q0(layer2_weights_V_17_q0)
);

nn_inference_layer2_weights_V_18 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_18_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_18_address0),
    .ce0(layer2_weights_V_18_ce0),
    .q0(layer2_weights_V_18_q0)
);

nn_inference_layer2_weights_V_19 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_19_address0),
    .ce0(layer2_weights_V_19_ce0),
    .q0(layer2_weights_V_19_q0)
);

nn_inference_layer2_weights_V_20 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_20_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_20_address0),
    .ce0(layer2_weights_V_20_ce0),
    .q0(layer2_weights_V_20_q0)
);

nn_inference_layer2_weights_V_21 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_21_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_21_address0),
    .ce0(layer2_weights_V_21_ce0),
    .q0(layer2_weights_V_21_q0)
);

nn_inference_layer2_weights_V_22 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_22_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_22_address0),
    .ce0(layer2_weights_V_22_ce0),
    .q0(layer2_weights_V_22_q0)
);

nn_inference_layer2_weights_V_23 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_23_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_23_address0),
    .ce0(layer2_weights_V_23_ce0),
    .q0(layer2_weights_V_23_q0)
);

nn_inference_layer2_weights_V_24 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_24_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_24_address0),
    .ce0(layer2_weights_V_24_ce0),
    .q0(layer2_weights_V_24_q0)
);

nn_inference_layer2_weights_V_25 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_25_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_25_address0),
    .ce0(layer2_weights_V_25_ce0),
    .q0(layer2_weights_V_25_q0)
);

nn_inference_layer2_weights_V_26 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_26_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_26_address0),
    .ce0(layer2_weights_V_26_ce0),
    .q0(layer2_weights_V_26_q0)
);

nn_inference_layer2_weights_V_27 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_27_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_27_address0),
    .ce0(layer2_weights_V_27_ce0),
    .q0(layer2_weights_V_27_q0)
);

nn_inference_layer2_weights_V_28 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_28_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_28_address0),
    .ce0(layer2_weights_V_28_ce0),
    .q0(layer2_weights_V_28_q0)
);

nn_inference_layer2_weights_V_29 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_29_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_29_address0),
    .ce0(layer2_weights_V_29_ce0),
    .q0(layer2_weights_V_29_q0)
);

nn_inference_layer2_weights_V_30 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_30_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_30_address0),
    .ce0(layer2_weights_V_30_ce0),
    .q0(layer2_weights_V_30_q0)
);

nn_inference_layer2_weights_V_31 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_31_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_31_address0),
    .ce0(layer2_weights_V_31_ce0),
    .q0(layer2_weights_V_31_q0)
);

nn_inference_fp_input_img_V #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
fp_input_img_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fp_input_img_V_address0),
    .ce0(fp_input_img_V_ce0),
    .we0(fp_input_img_V_we0),
    .d0(fp_input_img_V_d0),
    .q0(fp_input_img_V_q0),
    .address1(fp_input_img_V_address1),
    .ce1(fp_input_img_V_ce1),
    .q1(fp_input_img_V_q1)
);

nn_inference_temp_output_0_V #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
temp_output_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_output_0_V_address0),
    .ce0(temp_output_0_V_ce0),
    .we0(temp_output_0_V_we0),
    .d0(temp_output_0_V_d0),
    .q0(temp_output_0_V_q0),
    .address1(temp_output_0_V_address1),
    .ce1(temp_output_0_V_ce1),
    .q1(temp_output_0_V_q1)
);

nn_inference_temp_output2_0_V #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
temp_output2_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_output2_0_V_address0),
    .ce0(temp_output2_0_V_ce0),
    .we0(temp_output2_0_V_we0),
    .d0(temp_output2_0_V_d0),
    .q0(temp_output2_0_V_q0),
    .address1(temp_output2_0_V_address1),
    .ce1(temp_output2_0_V_ce1),
    .q1(temp_output2_0_V_q1)
);

nn_inference_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1474_p0),
    .ce(1'b1),
    .dout(grp_fu_1474_p1)
);

nn_inference_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1477_p0),
    .din1(64'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_1477_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U3(
    .din0(weights_layer1_weights_V_q1),
    .din1(fp_input_img_V_q1),
    .dout(mul_ln1192_fu_1849_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U4(
    .din0(weights_layer1_weights_V_q0),
    .din1(r_V_1_reg_4762),
    .dout(mul_ln1192_1_fu_1892_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U5(
    .din0(layer2_weights_V_0_q0),
    .din1(mul_ln708_fu_2391_p1),
    .dout(mul_ln708_fu_2391_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U6(
    .din0(layer2_weights_V_1_q0),
    .din1(mul_ln703_fu_2400_p1),
    .dout(mul_ln703_fu_2400_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U7(
    .din0(layer2_weights_V_2_q0),
    .din1(mul_ln1192_2_fu_2433_p1),
    .dout(mul_ln1192_2_fu_2433_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U8(
    .din0(layer2_weights_V_3_q0),
    .din1(mul_ln703_1_fu_2466_p1),
    .dout(mul_ln703_1_fu_2466_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U9(
    .din0(layer2_weights_V_4_q0),
    .din1(mul_ln703_2_fu_2485_p1),
    .dout(mul_ln703_2_fu_2485_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U10(
    .din0(layer2_weights_V_5_q0),
    .din1(mul_ln703_3_fu_2494_p1),
    .dout(mul_ln703_3_fu_2494_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U11(
    .din0(layer2_weights_V_6_q0),
    .din1(mul_ln703_4_fu_2561_p1),
    .dout(mul_ln703_4_fu_2561_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U12(
    .din0(layer2_weights_V_7_q0),
    .din1(mul_ln1192_3_fu_2594_p1),
    .dout(mul_ln1192_3_fu_2594_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U13(
    .din0(layer2_weights_V_8_q0),
    .din1(mul_ln1192_4_fu_2627_p1),
    .dout(mul_ln1192_4_fu_2627_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U14(
    .din0(layer2_weights_V_9_q0),
    .din1(mul_ln1192_5_fu_2646_p1),
    .dout(mul_ln1192_5_fu_2646_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U15(
    .din0(layer2_weights_V_10_q0),
    .din1(mul_ln1192_6_fu_2655_p1),
    .dout(mul_ln1192_6_fu_2655_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U16(
    .din0(layer2_weights_V_11_q0),
    .din1(mul_ln703_5_fu_2722_p1),
    .dout(mul_ln703_5_fu_2722_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U17(
    .din0(layer2_weights_V_12_q0),
    .din1(mul_ln703_6_fu_2755_p1),
    .dout(mul_ln703_6_fu_2755_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U18(
    .din0(layer2_weights_V_13_q0),
    .din1(mul_ln1192_7_fu_2788_p1),
    .dout(mul_ln1192_7_fu_2788_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U19(
    .din0(layer2_weights_V_14_q0),
    .din1(mul_ln703_7_fu_2807_p1),
    .dout(mul_ln703_7_fu_2807_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U20(
    .din0(layer2_weights_V_15_q0),
    .din1(mul_ln1192_8_fu_2816_p1),
    .dout(mul_ln1192_8_fu_2816_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U21(
    .din0(layer2_weights_V_16_q0),
    .din1(mul_ln1192_9_fu_2883_p1),
    .dout(mul_ln1192_9_fu_2883_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U22(
    .din0(layer2_weights_V_17_q0),
    .din1(mul_ln1192_10_fu_2916_p1),
    .dout(mul_ln1192_10_fu_2916_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U23(
    .din0(layer2_weights_V_18_q0),
    .din1(mul_ln1192_11_fu_2949_p1),
    .dout(mul_ln1192_11_fu_2949_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U24(
    .din0(layer2_weights_V_19_q0),
    .din1(mul_ln1192_12_fu_2968_p1),
    .dout(mul_ln1192_12_fu_2968_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U25(
    .din0(layer2_weights_V_20_q0),
    .din1(mul_ln703_8_fu_2977_p1),
    .dout(mul_ln703_8_fu_2977_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U26(
    .din0(layer2_weights_V_21_q0),
    .din1(mul_ln703_9_fu_3044_p1),
    .dout(mul_ln703_9_fu_3044_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U27(
    .din0(layer2_weights_V_22_q0),
    .din1(mul_ln1192_13_fu_3077_p1),
    .dout(mul_ln1192_13_fu_3077_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U28(
    .din0(layer2_weights_V_23_q0),
    .din1(mul_ln703_10_fu_3110_p1),
    .dout(mul_ln703_10_fu_3110_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U29(
    .din0(layer2_weights_V_24_q0),
    .din1(mul_ln1192_14_fu_3129_p1),
    .dout(mul_ln1192_14_fu_3129_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U30(
    .din0(layer2_weights_V_25_q0),
    .din1(mul_ln1192_15_fu_3138_p1),
    .dout(mul_ln1192_15_fu_3138_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U31(
    .din0(layer2_weights_V_26_q0),
    .din1(mul_ln703_11_fu_3205_p1),
    .dout(mul_ln703_11_fu_3205_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U32(
    .din0(layer2_weights_V_27_q0),
    .din1(mul_ln703_12_fu_3238_p1),
    .dout(mul_ln703_12_fu_3238_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U33(
    .din0(layer2_weights_V_28_q0),
    .din1(mul_ln703_13_fu_3271_p1),
    .dout(mul_ln703_13_fu_3271_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U34(
    .din0(layer2_weights_V_29_q0),
    .din1(mul_ln1192_16_fu_3290_p1),
    .dout(mul_ln1192_16_fu_3290_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U35(
    .din0(layer2_weights_V_30_load_reg_5619),
    .din1(mul_ln703_14_fu_3333_p1),
    .dout(mul_ln703_14_fu_3333_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U36(
    .din0(layer2_weights_V_31_q0),
    .din1(mul_ln1192_17_fu_3366_p1),
    .dout(mul_ln1192_17_fu_3366_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U37(
    .din0(32'd4294967207),
    .din1(32'd120),
    .din2(32'd4294967293),
    .din3(ap_phi_mux_j_2_phi_fu_1432_p4),
    .dout(tmp_3_fu_3808_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U38(
    .din0(tmp_3_fu_3808_p5),
    .din1(mul_ln1118_fu_3824_p1),
    .dout(mul_ln1118_fu_3824_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U39(
    .din0(32'd157),
    .din1(32'd65),
    .din2(32'd4294966938),
    .din3(ap_phi_mux_j_2_phi_fu_1432_p4),
    .dout(tmp_4_fu_3829_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U40(
    .din0(tmp_4_fu_3829_p5),
    .din1(mul_ln1118_1_fu_3845_p1),
    .dout(mul_ln1118_1_fu_3845_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U41(
    .din0(32'd206),
    .din1(32'd4294967073),
    .din2(32'd44),
    .din3(ap_phi_mux_j_2_phi_fu_1432_p4),
    .dout(tmp_5_fu_3874_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U42(
    .din0(tmp_5_fu_3874_p5),
    .din1(mul_ln1118_2_fu_3890_p1),
    .dout(mul_ln1118_2_fu_3890_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U43(
    .din0(32'd203),
    .din1(32'd4294967286),
    .din2(32'd4294966979),
    .din3(ap_phi_mux_j_2_phi_fu_1432_p4),
    .dout(tmp_6_fu_3919_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U44(
    .din0(tmp_6_fu_3919_p5),
    .din1(mul_ln1118_3_fu_3935_p1),
    .dout(mul_ln1118_3_fu_3935_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U45(
    .din0(32'd87),
    .din1(32'd100),
    .din2(32'd4294967278),
    .din3(ap_phi_mux_j_2_phi_fu_1432_p4),
    .dout(tmp_7_fu_3950_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U46(
    .din0(tmp_7_fu_3950_p5),
    .din1(mul_ln1118_4_fu_3966_p1),
    .dout(mul_ln1118_4_fu_3966_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U47(
    .din0(32'd344),
    .din1(32'd4294967087),
    .din2(32'd16),
    .din3(ap_phi_mux_j_2_phi_fu_1432_p4),
    .dout(tmp_8_fu_3971_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U48(
    .din0(tmp_8_fu_3971_p5),
    .din1(mul_ln1118_5_fu_3987_p1),
    .dout(mul_ln1118_5_fu_3987_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U49(
    .din0(32'd125),
    .din1(32'd227),
    .din2(32'd4294966973),
    .din3(j_2_reg_1428),
    .dout(tmp_9_fu_4050_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U50(
    .din0(tmp_9_fu_4050_p5),
    .din1(mul_ln1118_6_fu_4066_p1),
    .dout(mul_ln1118_6_fu_4066_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U51(
    .din0(32'd93),
    .din1(32'd4294967050),
    .din2(32'd140),
    .din3(j_2_reg_1428),
    .dout(tmp_10_fu_4095_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U52(
    .din0(tmp_10_fu_4095_p5),
    .din1(mul_ln1118_7_fu_4111_p1),
    .dout(mul_ln1118_7_fu_4111_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U53(
    .din0(32'd127),
    .din1(32'd4294967241),
    .din2(32'd4294967236),
    .din3(j_2_reg_1428),
    .dout(tmp_11_fu_4140_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U54(
    .din0(tmp_11_fu_4140_p5),
    .din1(mul_ln1118_8_fu_4156_p1),
    .dout(mul_ln1118_8_fu_4156_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U55(
    .din0(32'd18),
    .din1(32'd101),
    .din2(32'd13),
    .din3(j_2_reg_1428),
    .dout(tmp_12_fu_4171_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U56(
    .din0(tmp_12_fu_4171_p5),
    .din1(mul_ln1118_9_fu_4187_p1),
    .dout(mul_ln1118_9_fu_4187_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U57(
    .din0(32'd7),
    .din1(32'd4),
    .din2(32'd4294967205),
    .din3(j_2_reg_1428),
    .dout(tmp_13_fu_4192_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U58(
    .din0(tmp_13_fu_4192_p5),
    .din1(mul_ln1118_10_fu_4208_p1),
    .dout(mul_ln1118_10_fu_4208_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U59(
    .din0(32'd4294967086),
    .din1(32'd150),
    .din2(32'd186),
    .din3(j_2_reg_1428_pp5_iter1_reg),
    .dout(tmp_14_fu_4271_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U60(
    .din0(tmp_14_fu_4271_p5),
    .din1(mul_ln1118_11_fu_4287_p1),
    .dout(mul_ln1118_11_fu_4287_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U61(
    .din0(32'd220),
    .din1(32'd170),
    .din2(32'd4294967047),
    .din3(j_2_reg_1428_pp5_iter1_reg),
    .dout(tmp_15_fu_4316_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U62(
    .din0(tmp_15_fu_4316_p5),
    .din1(mul_ln1118_12_fu_4332_p1),
    .dout(mul_ln1118_12_fu_4332_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U63(
    .din0(32'd4294967267),
    .din1(32'd4294967165),
    .din2(32'd131),
    .din3(j_2_reg_1428_pp5_iter1_reg),
    .dout(tmp_16_fu_4361_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U64(
    .din0(tmp_16_fu_4361_p5),
    .din1(mul_ln1118_13_fu_4377_p1),
    .dout(mul_ln1118_13_fu_4377_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U65(
    .din0(32'd352),
    .din1(32'd4294967050),
    .din2(32'd4294967198),
    .din3(j_2_reg_1428_pp5_iter1_reg),
    .dout(tmp_17_fu_4392_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U66(
    .din0(tmp_17_reg_6004),
    .din1(mul_ln1118_14_fu_4419_p1),
    .dout(mul_ln1118_14_fu_4419_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U67(
    .din0(32'd4294967018),
    .din1(32'd38),
    .din2(32'd62),
    .din3(j_2_reg_1428_pp5_iter2_reg),
    .dout(tmp_18_fu_4448_p5)
);

nn_inference_mul_32s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_32s_32s_40_1_1_U68(
    .din0(tmp_18_fu_4448_p5),
    .din1(mul_ln1118_15_fu_4464_p1),
    .dout(mul_ln1118_15_fu_4464_p2)
);

nn_inference_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U69(
    .din0(temp_output3_0_2_V_fu_408),
    .din1(temp_output3_0_2_V_1_fu_412),
    .din2(temp_output3_0_2_V_2_fu_416),
    .din3(i_3_reg_1440),
    .dout(tmp_19_fu_4539_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln21_fu_1776_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((((icmp_ln21_fu_1776_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state9)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state9))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((icmp_ln21_fu_1776_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state12))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln21_fu_1776_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state12)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end else if (((icmp_ln21_fu_1776_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp2_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state33))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state33)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state33);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp3_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state42))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state41)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state42)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state42);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end else if ((1'b1 == ap_CS_fsm_state41)) begin
            ap_enable_reg_pp4_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state55))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state54)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state55)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state55);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
        end else if ((1'b1 == ap_CS_fsm_state54)) begin
            ap_enable_reg_pp5_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_1776_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_1_reg_1395 <= 6'd0;
    end else if (((icmp_ln77_fu_1938_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_1_reg_1395 <= add_ln77_fu_1932_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        i_2_reg_1417 <= 5'd0;
    end else if (((icmp_ln92_fu_3412_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i_2_reg_1417 <= add_ln92_fu_3406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        i_3_reg_1440 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state60) & (icmp_ln109_fu_4524_p2 == 1'd0))) begin
        i_3_reg_1440 <= add_ln109_fu_4518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_1348 <= 7'd0;
    end else if (((icmp_ln5_fu_1488_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_1348 <= add_ln5_fu_1482_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        j_1_reg_1406 <= 5'd0;
    end else if (((icmp_ln40_fu_2371_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        j_1_reg_1406 <= add_ln40_fu_2365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (icmp_ln59_reg_5950 == 1'd0))) begin
        j_2_reg_1428 <= add_ln59_reg_5945;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        j_2_reg_1428 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_1359 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_1359 <= add_ln21_reg_4704;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_1776_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        k_reg_1371 <= 7'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_1790_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        k_reg_1371 <= add_ln25_fu_1796_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        max_idx_V_reg_1451 <= 32'd4294967040;
    end else if (((1'b1 == ap_CS_fsm_state60) & (icmp_ln109_fu_4524_p2 == 1'd0))) begin
        max_idx_V_reg_1451 <= max_idx_V_1_fu_4577_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        max_val_V_reg_1463 <= 32'd4294935040;
    end else if (((1'b1 == ap_CS_fsm_state60) & (icmp_ln109_fu_4524_p2 == 1'd0))) begin
        max_val_V_reg_1463 <= max_val_V_1_fu_4557_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_1776_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sum_V_2_reg_1382 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln25_reg_4723_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_V_2_reg_1382 <= {{ret_V_1_fu_1916_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        temp_output3_0_2_V_fu_408 <= 32'd256;
    end else if (((j_2_reg_1428_pp5_iter2_reg == 2'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter3 == 1'b1))) begin
        temp_output3_0_2_V_fu_408 <= {{add_ln1192_47_fu_4487_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_4644_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        F2_reg_4686 <= F2_fu_1544_p2;
        icmp_ln571_reg_4678 <= icmp_ln571_fu_1538_p2;
        p_Result_8_reg_4668 <= ireg_fu_1504_p1[32'd63];
        trunc_ln565_reg_4673 <= trunc_ln565_fu_1534_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln21_reg_4704 <= add_ln21_fu_1770_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        add_ln59_reg_5945 <= add_ln59_fu_3796_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_1_fu_3423_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        add_ln908_1_reg_5663 <= add_ln908_1_fu_3577_p2;
        icmp_ln908_1_reg_5658 <= icmp_ln908_1_fu_3563_p2;
        p_Result_14_reg_5648 <= temp_output2_0_V_q1[32'd31];
        select_ln908_2_reg_5673 <= select_ln908_2_fu_3595_p3;
        sub_ln909_1_reg_5668 <= sub_ln909_1_fu_3589_p2;
        tmp_V_5_reg_5653 <= tmp_V_5_fu_3443_p3;
        trunc_ln893_1_reg_5678 <= trunc_ln893_1_fu_3603_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_fu_1949_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln908_reg_4806 <= add_ln908_fu_2103_p2;
        icmp_ln908_reg_4801 <= icmp_ln908_fu_2089_p2;
        p_Result_10_reg_4791 <= temp_output_0_V_q1[32'd31];
        select_ln908_reg_4816 <= select_ln908_fu_2121_p3;
        sub_ln909_reg_4811 <= sub_ln909_fu_2115_p2;
        tmp_V_4_reg_4796 <= tmp_V_4_fu_1969_p3;
        trunc_ln893_reg_4821 <= trunc_ln893_fu_2129_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_fu_1488_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast_reg_4648[6 : 0] <= i_cast_fu_1494_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast_reg_4648_pp0_iter1_reg[6 : 0] <= i_cast_reg_4648[6 : 0];
        icmp_ln5_reg_4644 <= icmp_ln5_fu_1488_p2;
        icmp_ln5_reg_4644_pp0_iter1_reg <= icmp_ln5_reg_4644;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_cast_reg_4648_pp0_iter2_reg[6 : 0] <= i_cast_reg_4648_pp0_iter1_reg[6 : 0];
        icmp_ln5_reg_4644_pp0_iter2_reg <= icmp_ln5_reg_4644_pp0_iter1_reg;
        input_img_load_reg_4658_pp0_iter2_reg <= input_img_load_reg_4658;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_reg_4787 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln1506_1_reg_4836 <= icmp_ln1506_1_fu_2251_p2;
        icmp_ln1506_reg_4831 <= icmp_ln1506_fu_2245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_1_reg_5644 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln1506_2_reg_5688 <= icmp_ln1506_2_fu_3719_p2;
        icmp_ln1506_3_reg_5693 <= icmp_ln1506_3_fu_3725_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln25_reg_4723 <= icmp_ln25_fu_1790_p2;
        icmp_ln25_reg_4723_pp1_iter1_reg <= icmp_ln25_reg_4723;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln40_reg_5314 <= icmp_ln40_fu_2371_p2;
        icmp_ln40_reg_5314_pp3_iter1_reg <= icmp_ln40_reg_5314;
        j_1_cast_reg_5318_pp3_iter1_reg[4 : 0] <= j_1_cast_reg_5318[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln40_reg_5314_pp3_iter2_reg <= icmp_ln40_reg_5314_pp3_iter1_reg;
        icmp_ln40_reg_5314_pp3_iter3_reg <= icmp_ln40_reg_5314_pp3_iter2_reg;
        icmp_ln40_reg_5314_pp3_iter4_reg <= icmp_ln40_reg_5314_pp3_iter3_reg;
        icmp_ln40_reg_5314_pp3_iter5_reg <= icmp_ln40_reg_5314_pp3_iter4_reg;
        icmp_ln40_reg_5314_pp3_iter6_reg <= icmp_ln40_reg_5314_pp3_iter5_reg;
        j_1_cast_reg_5318_pp3_iter2_reg[4 : 0] <= j_1_cast_reg_5318_pp3_iter1_reg[4 : 0];
        j_1_cast_reg_5318_pp3_iter3_reg[4 : 0] <= j_1_cast_reg_5318_pp3_iter2_reg[4 : 0];
        j_1_cast_reg_5318_pp3_iter4_reg[4 : 0] <= j_1_cast_reg_5318_pp3_iter3_reg[4 : 0];
        j_1_cast_reg_5318_pp3_iter5_reg[4 : 0] <= j_1_cast_reg_5318_pp3_iter4_reg[4 : 0];
        j_1_cast_reg_5318_pp3_iter6_reg[4 : 0] <= j_1_cast_reg_5318_pp3_iter5_reg[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln59_reg_5950 <= icmp_ln59_fu_3802_p2;
        j_2_reg_1428_pp5_iter1_reg <= j_2_reg_1428;
        mul_ln1118_10_reg_5989 <= mul_ln1118_10_fu_4208_p2;
        mul_ln1118_8_reg_5974 <= mul_ln1118_8_fu_4156_p2;
        mul_ln1118_9_reg_5984 <= mul_ln1118_9_fu_4187_p2;
        tmp_63_reg_5979 <= {{add_ln1192_39_fu_4134_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln885_1_reg_5644 <= icmp_ln885_1_fu_3423_p2;
        temp_output2_0_V_addr_2_reg_5638_pp4_iter1_reg <= temp_output2_0_V_addr_2_reg_5638;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp4_stage0_11001)) begin
        icmp_ln885_1_reg_5644_pp4_iter2_reg <= icmp_ln885_1_reg_5644;
        temp_output2_0_V_addr_2_reg_5638_pp4_iter2_reg <= temp_output2_0_V_addr_2_reg_5638_pp4_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln885_reg_4787 <= icmp_ln885_fu_1949_p2;
        temp_output_0_V_addr_1_reg_4781_pp2_iter1_reg <= temp_output_0_V_addr_1_reg_4781;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln885_reg_4787_pp2_iter2_reg <= icmp_ln885_reg_4787;
        temp_output_0_V_addr_1_reg_4781_pp2_iter2_reg <= temp_output_0_V_addr_1_reg_4781_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_4644 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_img_load_reg_4658 <= input_img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_2371_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        j_1_cast_reg_5318[4 : 0] <= j_1_cast_fu_2377_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp5_stage0_11001)) begin
        j_2_reg_1428_pp5_iter2_reg <= j_2_reg_1428_pp5_iter1_reg;
        mul_ln1118_13_reg_5994 <= mul_ln1118_13_fu_4377_p2;
        tmp_17_reg_6004 <= tmp_17_fu_4392_p5;
        tmp_68_reg_5999 <= {{add_ln1192_44_fu_4355_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5314_pp3_iter5_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        layer2_weights_V_30_load_reg_5619 <= layer2_weights_V_30_q0;
        mul_ln1192_16_reg_5614 <= mul_ln1192_16_fu_3290_p2;
        mul_ln703_13_reg_5604 <= mul_ln703_13_fu_3271_p2;
        tmp_52_reg_5609 <= {{add_ln1192_26_fu_3261_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln59_fu_3802_p2 == 1'd0))) begin
        mul_ln1118_3_reg_5954 <= mul_ln1118_3_fu_3935_p2;
        mul_ln1118_4_reg_5964 <= mul_ln1118_4_fu_3966_p2;
        mul_ln1118_5_reg_5969 <= mul_ln1118_5_fu_3987_p2;
        tmp_58_reg_5959 <= {{add_ln1192_34_fu_3913_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5314_pp3_iter3_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        mul_ln1192_11_reg_5514 <= mul_ln1192_11_fu_2949_p2;
        mul_ln1192_12_reg_5524 <= mul_ln1192_12_fu_2968_p2;
        mul_ln703_8_reg_5529 <= mul_ln703_8_fu_2977_p2;
        tmp_42_reg_5519 <= {{add_ln1192_16_fu_2939_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5314_pp3_iter4_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        mul_ln1192_14_reg_5569 <= mul_ln1192_14_fu_3129_p2;
        mul_ln1192_15_reg_5574 <= mul_ln1192_15_fu_3138_p2;
        mul_ln703_10_reg_5559 <= mul_ln703_10_fu_3110_p2;
        tmp_47_reg_5564 <= {{add_ln1192_21_fu_3100_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5314_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        mul_ln1192_4_reg_5424 <= mul_ln1192_4_fu_2627_p2;
        mul_ln1192_5_reg_5434 <= mul_ln1192_5_fu_2646_p2;
        mul_ln1192_6_reg_5439 <= mul_ln1192_6_fu_2655_p2;
        tmp_32_reg_5429 <= {{add_ln1192_6_fu_2617_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5314_pp3_iter2_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        mul_ln1192_7_reg_5469 <= mul_ln1192_7_fu_2788_p2;
        mul_ln1192_8_reg_5484 <= mul_ln1192_8_fu_2816_p2;
        mul_ln703_7_reg_5479 <= mul_ln703_7_fu_2807_p2;
        tmp_37_reg_5474 <= {{add_ln1192_11_fu_2778_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_4723 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        mul_ln1192_reg_4752 <= mul_ln1192_fu_1849_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5314 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        mul_ln703_1_reg_5379 <= mul_ln703_1_fu_2466_p2;
        mul_ln703_2_reg_5389 <= mul_ln703_2_fu_2485_p2;
        mul_ln703_3_reg_5394 <= mul_ln703_3_fu_2494_p2;
        tmp_27_reg_5384 <= {{add_ln1192_1_fu_2456_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_1790_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        or_ln25_reg_4742[6 : 1] <= or_ln25_fu_1830_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln25_reg_4723 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        r_V_1_reg_4762 <= fp_input_img_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        sext_ln1116_10_reg_5264 <= sext_ln1116_10_fu_2336_p1;
        sext_ln1116_11_reg_5279 <= sext_ln1116_11_fu_2345_p1;
        sext_ln1116_12_reg_5284 <= sext_ln1116_12_fu_2348_p1;
        sext_ln1116_13_reg_5289 <= sext_ln1116_13_fu_2351_p1;
        sext_ln1116_14_reg_5299 <= sext_ln1116_14_fu_2357_p1;
        sext_ln1116_1_reg_5164 <= sext_ln1116_1_fu_2276_p1;
        sext_ln1116_2_reg_5169 <= sext_ln1116_2_fu_2279_p1;
        sext_ln1116_3_reg_5174 <= sext_ln1116_3_fu_2282_p1;
        sext_ln1116_4_reg_5179 <= sext_ln1116_4_fu_2285_p1;
        sext_ln1116_5_reg_5204 <= sext_ln1116_5_fu_2300_p1;
        sext_ln1116_6_reg_5209 <= sext_ln1116_6_fu_2303_p1;
        sext_ln1116_7_reg_5219 <= sext_ln1116_7_fu_2309_p1;
        sext_ln1116_8_reg_5249 <= sext_ln1116_8_fu_2327_p1;
        sext_ln1116_9_reg_5254 <= sext_ln1116_9_fu_2330_p1;
        sext_ln1116_reg_5154 <= sext_ln1116_fu_2270_p1;
        sext_ln1192_10_reg_5244 <= sext_ln1192_10_fu_2324_p1;
        sext_ln1192_11_reg_5259 <= sext_ln1192_11_fu_2333_p1;
        sext_ln1192_12_reg_5269 <= sext_ln1192_12_fu_2339_p1;
        sext_ln1192_13_reg_5274 <= sext_ln1192_13_fu_2342_p1;
        sext_ln1192_14_reg_5294 <= sext_ln1192_14_fu_2354_p1;
        sext_ln1192_15_reg_5304 <= sext_ln1192_15_fu_2361_p1;
        sext_ln1192_1_reg_5184 <= sext_ln1192_1_fu_2288_p1;
        sext_ln1192_2_reg_5189 <= sext_ln1192_2_fu_2291_p1;
        sext_ln1192_3_reg_5194 <= sext_ln1192_3_fu_2294_p1;
        sext_ln1192_4_reg_5199 <= sext_ln1192_4_fu_2297_p1;
        sext_ln1192_5_reg_5214 <= sext_ln1192_5_fu_2306_p1;
        sext_ln1192_6_reg_5224 <= sext_ln1192_6_fu_2312_p1;
        sext_ln1192_7_reg_5229 <= sext_ln1192_7_fu_2315_p1;
        sext_ln1192_8_reg_5234 <= sext_ln1192_8_fu_2318_p1;
        sext_ln1192_9_reg_5239 <= sext_ln1192_9_fu_2321_p1;
        sext_ln1192_reg_5159 <= sext_ln1192_fu_2273_p1;
        sext_ln708_reg_5149 <= sext_ln708_fu_2267_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        sext_ln1116_15_reg_5865 <= sext_ln1116_15_fu_3746_p1;
        sext_ln1116_16_reg_5870 <= sext_ln1116_16_fu_3749_p1;
        sext_ln1116_17_reg_5875 <= sext_ln1116_17_fu_3752_p1;
        sext_ln1116_18_reg_5880 <= sext_ln1116_18_fu_3755_p1;
        sext_ln1116_19_reg_5885 <= sext_ln1116_19_fu_3758_p1;
        sext_ln1116_20_reg_5890 <= sext_ln1116_20_fu_3761_p1;
        sext_ln1116_21_reg_5895 <= sext_ln1116_21_fu_3764_p1;
        sext_ln1116_22_reg_5900 <= sext_ln1116_22_fu_3767_p1;
        sext_ln1116_23_reg_5905 <= sext_ln1116_23_fu_3770_p1;
        sext_ln1116_24_reg_5910 <= sext_ln1116_24_fu_3773_p1;
        sext_ln1116_25_reg_5915 <= sext_ln1116_25_fu_3776_p1;
        sext_ln1116_26_reg_5920 <= sext_ln1116_26_fu_3779_p1;
        sext_ln1116_27_reg_5925 <= sext_ln1116_27_fu_3782_p1;
        sext_ln1116_28_reg_5930 <= sext_ln1116_28_fu_3785_p1;
        sext_ln1116_29_reg_5935 <= sext_ln1116_29_fu_3788_p1;
        temp_output2_0_V_load_15_cast_reg_5940 <= temp_output2_0_V_load_15_cast_fu_3792_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_fu_3412_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        temp_output2_0_V_addr_2_reg_5638 <= i_2_cast_fu_3418_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        temp_output2_0_V_load_10_reg_5825 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_11_reg_5830 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        temp_output2_0_V_load_12_reg_5845 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_13_reg_5850 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        temp_output2_0_V_load_1_reg_5730 <= temp_output2_0_V_q1;
        temp_output2_0_V_load_reg_5725 <= temp_output2_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        temp_output2_0_V_load_2_reg_5745 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_3_reg_5750 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        temp_output2_0_V_load_4_reg_5765 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_5_reg_5770 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        temp_output2_0_V_load_6_reg_5785 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_7_reg_5790 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        temp_output2_0_V_load_8_reg_5805 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_9_reg_5810 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((j_2_reg_1428_pp5_iter2_reg == 2'd1) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter3 == 1'b1))) begin
        temp_output3_0_2_V_1_fu_412 <= {{add_ln1192_47_fu_4487_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~(j_2_reg_1428_pp5_iter2_reg == 2'd1) & ~(j_2_reg_1428_pp5_iter2_reg == 2'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter3 == 1'b1))) begin
        temp_output3_0_2_V_2_fu_416 <= {{add_ln1192_47_fu_4487_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_1938_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        temp_output_0_V_addr_1_reg_4781 <= i_1_cast_fu_1944_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_output_0_V_load_10_reg_4949 <= temp_output_0_V_q0;
        temp_output_0_V_load_11_reg_4954 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        temp_output_0_V_load_12_reg_4969 <= temp_output_0_V_q0;
        temp_output_0_V_load_13_reg_4974 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        temp_output_0_V_load_14_reg_4989 <= temp_output_0_V_q0;
        temp_output_0_V_load_15_reg_4994 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_output_0_V_load_16_reg_5009 <= temp_output_0_V_q0;
        temp_output_0_V_load_17_reg_5014 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_output_0_V_load_18_reg_5029 <= temp_output_0_V_q0;
        temp_output_0_V_load_19_reg_5034 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_output_0_V_load_1_reg_4854 <= temp_output_0_V_q1;
        temp_output_0_V_load_reg_4849 <= temp_output_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_output_0_V_load_20_reg_5049 <= temp_output_0_V_q0;
        temp_output_0_V_load_21_reg_5054 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_output_0_V_load_22_reg_5069 <= temp_output_0_V_q0;
        temp_output_0_V_load_23_reg_5074 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_output_0_V_load_24_reg_5089 <= temp_output_0_V_q0;
        temp_output_0_V_load_25_reg_5094 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_output_0_V_load_26_reg_5109 <= temp_output_0_V_q0;
        temp_output_0_V_load_27_reg_5114 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_output_0_V_load_28_reg_5129 <= temp_output_0_V_q0;
        temp_output_0_V_load_29_reg_5134 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_output_0_V_load_2_reg_4869 <= temp_output_0_V_q0;
        temp_output_0_V_load_3_reg_4874 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        temp_output_0_V_load_4_reg_4889 <= temp_output_0_V_q0;
        temp_output_0_V_load_5_reg_4894 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        temp_output_0_V_load_6_reg_4909 <= temp_output_0_V_q0;
        temp_output_0_V_load_7_reg_4914 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_output_0_V_load_8_reg_4929 <= temp_output_0_V_q0;
        temp_output_0_V_load_9_reg_4934 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_1776_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln21_1_reg_4718[5 : 0] <= zext_ln21_1_fu_1786_p1[5 : 0];
        zext_ln21_reg_4713[5 : 0] <= zext_ln21_fu_1782_p1[5 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln5_fu_1488_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state9 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_1790_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln77_fu_1938_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln40_fu_2371_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state33 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state33 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln92_fu_3412_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state42 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state42 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln59_fu_3802_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state55 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state55 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter3 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (icmp_ln59_reg_5950 == 1'd0))) begin
        ap_phi_mux_j_2_phi_fu_1432_p4 = add_ln59_reg_5945;
    end else begin
        ap_phi_mux_j_2_phi_fu_1432_p4 = j_2_reg_1428;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        fp_input_img_V_address0 = zext_ln23_fu_1836_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        fp_input_img_V_address0 = i_cast_reg_4648_pp0_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fp_input_img_V_address0 = 64'd0;
    end else begin
        fp_input_img_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        fp_input_img_V_ce0 = 1'b1;
    end else begin
        fp_input_img_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        fp_input_img_V_ce1 = 1'b1;
    end else begin
        fp_input_img_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        fp_input_img_V_d0 = select_ln571_4_fu_1761_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fp_input_img_V_d0 = 32'd256;
    end else begin
        fp_input_img_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln5_reg_4644_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        fp_input_img_V_we0 = 1'b1;
    end else begin
        fp_input_img_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        grp_fu_1477_p0 = bitcast_ln734_1_fu_3704_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        grp_fu_1477_p0 = bitcast_ln734_fu_2230_p1;
    end else begin
        grp_fu_1477_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_img_ce0 = 1'b1;
    end else begin
        input_img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_0_ce0 = 1'b1;
    end else begin
        layer2_weights_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_10_ce0 = 1'b1;
    end else begin
        layer2_weights_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_11_ce0 = 1'b1;
    end else begin
        layer2_weights_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_12_ce0 = 1'b1;
    end else begin
        layer2_weights_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_13_ce0 = 1'b1;
    end else begin
        layer2_weights_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_14_ce0 = 1'b1;
    end else begin
        layer2_weights_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_15_ce0 = 1'b1;
    end else begin
        layer2_weights_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_16_ce0 = 1'b1;
    end else begin
        layer2_weights_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_17_ce0 = 1'b1;
    end else begin
        layer2_weights_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_18_ce0 = 1'b1;
    end else begin
        layer2_weights_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_19_ce0 = 1'b1;
    end else begin
        layer2_weights_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_1_ce0 = 1'b1;
    end else begin
        layer2_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_20_ce0 = 1'b1;
    end else begin
        layer2_weights_V_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_21_ce0 = 1'b1;
    end else begin
        layer2_weights_V_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_22_ce0 = 1'b1;
    end else begin
        layer2_weights_V_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_23_ce0 = 1'b1;
    end else begin
        layer2_weights_V_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_24_ce0 = 1'b1;
    end else begin
        layer2_weights_V_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_25_ce0 = 1'b1;
    end else begin
        layer2_weights_V_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_26_ce0 = 1'b1;
    end else begin
        layer2_weights_V_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_27_ce0 = 1'b1;
    end else begin
        layer2_weights_V_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_28_ce0 = 1'b1;
    end else begin
        layer2_weights_V_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_29_ce0 = 1'b1;
    end else begin
        layer2_weights_V_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_2_ce0 = 1'b1;
    end else begin
        layer2_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_30_ce0 = 1'b1;
    end else begin
        layer2_weights_V_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter6 == 1'b1))) begin
        layer2_weights_V_31_ce0 = 1'b1;
    end else begin
        layer2_weights_V_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_3_ce0 = 1'b1;
    end else begin
        layer2_weights_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_4_ce0 = 1'b1;
    end else begin
        layer2_weights_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_5_ce0 = 1'b1;
    end else begin
        layer2_weights_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_6_ce0 = 1'b1;
    end else begin
        layer2_weights_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_7_ce0 = 1'b1;
    end else begin
        layer2_weights_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_8_ce0 = 1'b1;
    end else begin
        layer2_weights_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_9_ce0 = 1'b1;
    end else begin
        layer2_weights_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        temp_output2_0_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        temp_output2_0_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        temp_output2_0_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        temp_output2_0_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        temp_output2_0_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        temp_output2_0_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        temp_output2_0_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        temp_output2_0_V_address0 = temp_output2_0_V_addr_reg_4699;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        temp_output2_0_V_address0 = temp_output2_0_V_addr_2_reg_5638_pp4_iter2_reg;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter7 == 1'b1))) begin
        temp_output2_0_V_address0 = j_1_cast_reg_5318_pp3_iter6_reg;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output2_0_V_address0 = 64'd0;
    end else begin
        temp_output2_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        temp_output2_0_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        temp_output2_0_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        temp_output2_0_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        temp_output2_0_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        temp_output2_0_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        temp_output2_0_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        temp_output2_0_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        temp_output2_0_V_address1 = 64'd1;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        temp_output2_0_V_address1 = i_2_cast_fu_3418_p1;
    end else begin
        temp_output2_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter3 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1)))) begin
        temp_output2_0_V_ce0 = 1'b1;
    end else begin
        temp_output2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        temp_output2_0_V_ce1 = 1'b1;
    end else begin
        temp_output2_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        temp_output2_0_V_d0 = 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter7 == 1'b1))) begin
        temp_output2_0_V_d0 = {{add_ln1192_30_fu_3389_p2[39:8]}};
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output2_0_V_d0 = 32'd256;
    end else begin
        temp_output2_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln885_1_reg_5644_pp4_iter2_reg == 1'd0) & (1'd1 == and_ln1506_1_fu_3735_p2) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter3 == 1'b1)) | ((icmp_ln40_reg_5314_pp3_iter6_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1)))) begin
        temp_output2_0_V_we0 = 1'b1;
    end else begin
        temp_output2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_output_0_V_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_output_0_V_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_output_0_V_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_output_0_V_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_output_0_V_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_output_0_V_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_output_0_V_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        temp_output_0_V_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        temp_output_0_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_output_0_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_output_0_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        temp_output_0_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        temp_output_0_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_output_0_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_output_0_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        temp_output_0_V_address0 = temp_output_0_V_addr_reg_4694;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        temp_output_0_V_address0 = temp_output_0_V_addr_1_reg_4781_pp2_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_output_0_V_address0 = zext_ln21_reg_4713;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output_0_V_address0 = 64'd0;
    end else begin
        temp_output_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_output_0_V_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_output_0_V_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_output_0_V_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_output_0_V_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_output_0_V_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_output_0_V_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_output_0_V_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        temp_output_0_V_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        temp_output_0_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_output_0_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_output_0_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        temp_output_0_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        temp_output_0_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_output_0_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_output_0_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        temp_output_0_V_address1 = 64'd1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        temp_output_0_V_address1 = i_1_cast_fu_1944_p1;
    end else begin
        temp_output_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter3 == 1'b1)))) begin
        temp_output_0_V_ce0 = 1'b1;
    end else begin
        temp_output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        temp_output_0_V_ce1 = 1'b1;
    end else begin
        temp_output_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        temp_output_0_V_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_output_0_V_d0 = sum_V_2_reg_1382;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output_0_V_d0 = 32'd256;
    end else begin
        temp_output_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | ((icmp_ln885_reg_4787_pp2_iter2_reg == 1'd0) & (1'd1 == and_ln1506_fu_2261_p2) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter3 == 1'b1)))) begin
        temp_output_0_V_we0 = 1'b1;
    end else begin
        temp_output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weights_layer1_weights_V_ce0 = 1'b1;
    end else begin
        weights_layer1_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weights_layer1_weights_V_ce1 = 1'b1;
    end else begin
        weights_layer1_weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln5_fu_1488_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln5_fu_1488_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln21_fu_1776_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln77_fu_1938_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((icmp_ln77_fu_1938_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((icmp_ln40_fu_2371_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter7 == 1'b1) & (ap_enable_reg_pp3_iter6 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((icmp_ln40_fu_2371_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter7 == 1'b1) & (ap_enable_reg_pp3_iter6 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((icmp_ln92_fu_3412_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter3 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((icmp_ln92_fu_3412_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter3 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln59_fu_3802_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter3 == 1'b1) & (ap_enable_reg_pp5_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter3 == 1'b1) & (ap_enable_reg_pp5_iter2 == 1'b0)) | ((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln59_fu_3802_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & (icmp_ln109_fu_4524_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_1544_p2 = (12'd1075 - zext_ln455_fu_1530_p1);

assign add_ln109_fu_4518_p2 = (i_3_reg_1440 + 2'd1);

assign add_ln1118_fu_1862_p2 = (tmp_23_fu_1855_p3 + zext_ln21_1_reg_4718);

assign add_ln1192_10_fu_2745_p2 = (shl_ln728_s_fu_2737_p3 + mul_ln703_5_fu_2722_p2);

assign add_ln1192_11_fu_2778_p2 = (shl_ln728_10_fu_2770_p3 + mul_ln703_6_fu_2755_p2);

assign add_ln1192_12_fu_2828_p2 = (shl_ln728_11_fu_2821_p3 + mul_ln1192_7_reg_5469);

assign add_ln1192_13_fu_2851_p2 = (shl_ln728_12_fu_2843_p3 + mul_ln703_7_reg_5479);

assign add_ln1192_14_fu_2874_p2 = (shl_ln728_13_fu_2866_p3 + mul_ln1192_8_reg_5484);

assign add_ln1192_15_fu_2906_p2 = (shl_ln728_14_fu_2898_p3 + mul_ln1192_9_fu_2883_p2);

assign add_ln1192_16_fu_2939_p2 = (shl_ln728_15_fu_2931_p3 + mul_ln1192_10_fu_2916_p2);

assign add_ln1192_17_fu_2989_p2 = (shl_ln728_16_fu_2982_p3 + mul_ln1192_11_reg_5514);

assign add_ln1192_18_fu_3012_p2 = (shl_ln728_17_fu_3004_p3 + mul_ln1192_12_reg_5524);

assign add_ln1192_19_fu_3035_p2 = (shl_ln728_18_fu_3027_p3 + mul_ln703_8_reg_5529);

assign add_ln1192_1_fu_2456_p2 = (shl_ln728_1_fu_2448_p3 + mul_ln1192_2_fu_2433_p2);

assign add_ln1192_20_fu_3067_p2 = (shl_ln728_19_fu_3059_p3 + mul_ln703_9_fu_3044_p2);

assign add_ln1192_21_fu_3100_p2 = (shl_ln728_20_fu_3092_p3 + mul_ln1192_13_fu_3077_p2);

assign add_ln1192_22_fu_3150_p2 = (shl_ln728_21_fu_3143_p3 + mul_ln703_10_reg_5559);

assign add_ln1192_23_fu_3173_p2 = (shl_ln728_22_fu_3165_p3 + mul_ln1192_14_reg_5569);

assign add_ln1192_24_fu_3196_p2 = (shl_ln728_23_fu_3188_p3 + mul_ln1192_15_reg_5574);

assign add_ln1192_25_fu_3228_p2 = (shl_ln728_24_fu_3220_p3 + mul_ln703_11_fu_3205_p2);

assign add_ln1192_26_fu_3261_p2 = (shl_ln728_25_fu_3253_p3 + mul_ln703_12_fu_3238_p2);

assign add_ln1192_27_fu_3302_p2 = (shl_ln728_26_fu_3295_p3 + mul_ln703_13_reg_5604);

assign add_ln1192_28_fu_3325_p2 = (shl_ln728_27_fu_3317_p3 + mul_ln1192_16_reg_5614);

assign add_ln1192_29_fu_3356_p2 = (shl_ln728_28_fu_3348_p3 + mul_ln703_14_fu_3333_p2);

assign add_ln1192_2_fu_2506_p2 = (shl_ln728_2_fu_2499_p3 + mul_ln703_1_reg_5379);

assign add_ln1192_30_fu_3389_p2 = (shl_ln728_29_fu_3381_p3 + mul_ln1192_17_fu_3366_p2);

assign add_ln1192_33_fu_3868_p2 = (shl_ln728_30_fu_3860_p3 + mul_ln1118_1_fu_3845_p2);

assign add_ln1192_34_fu_3913_p2 = (shl_ln728_31_fu_3905_p3 + mul_ln1118_2_fu_3890_p2);

assign add_ln1192_35_fu_3999_p2 = (shl_ln728_32_fu_3992_p3 + mul_ln1118_3_reg_5954);

assign add_ln1192_36_fu_4022_p2 = (shl_ln728_33_fu_4014_p3 + mul_ln1118_4_reg_5964);

assign add_ln1192_37_fu_4045_p2 = (shl_ln728_34_fu_4037_p3 + mul_ln1118_5_reg_5969);

assign add_ln1192_38_fu_4089_p2 = (shl_ln728_35_fu_4081_p3 + mul_ln1118_6_fu_4066_p2);

assign add_ln1192_39_fu_4134_p2 = (shl_ln728_36_fu_4126_p3 + mul_ln1118_7_fu_4111_p2);

assign add_ln1192_3_fu_2529_p2 = (shl_ln728_3_fu_2521_p3 + mul_ln703_2_reg_5389);

assign add_ln1192_40_fu_4220_p2 = (shl_ln728_37_fu_4213_p3 + mul_ln1118_8_reg_5974);

assign add_ln1192_41_fu_4243_p2 = (shl_ln728_38_fu_4235_p3 + mul_ln1118_9_reg_5984);

assign add_ln1192_42_fu_4266_p2 = (shl_ln728_39_fu_4258_p3 + mul_ln1118_10_reg_5989);

assign add_ln1192_43_fu_4310_p2 = (shl_ln728_40_fu_4302_p3 + mul_ln1118_11_fu_4287_p2);

assign add_ln1192_44_fu_4355_p2 = (shl_ln728_41_fu_4347_p3 + mul_ln1118_12_fu_4332_p2);

assign add_ln1192_45_fu_4411_p2 = (shl_ln728_42_fu_4404_p3 + mul_ln1118_13_reg_5994);

assign add_ln1192_46_fu_4442_p2 = (shl_ln728_43_fu_4434_p3 + mul_ln1118_14_fu_4419_p2);

assign add_ln1192_47_fu_4487_p2 = (shl_ln728_44_fu_4479_p3 + mul_ln1118_15_fu_4464_p2);

assign add_ln1192_4_fu_2552_p2 = (shl_ln728_4_fu_2544_p3 + mul_ln703_3_reg_5394);

assign add_ln1192_5_fu_2584_p2 = (shl_ln728_5_fu_2576_p3 + mul_ln703_4_fu_2561_p2);

assign add_ln1192_6_fu_2617_p2 = (shl_ln728_6_fu_2609_p3 + mul_ln1192_3_fu_2594_p2);

assign add_ln1192_7_fu_2667_p2 = (shl_ln728_7_fu_2660_p3 + mul_ln1192_4_reg_5424);

assign add_ln1192_8_fu_2690_p2 = (shl_ln728_8_fu_2682_p3 + mul_ln1192_5_reg_5434);

assign add_ln1192_9_fu_2713_p2 = (shl_ln728_9_fu_2705_p3 + mul_ln1192_6_reg_5439);

assign add_ln1192_fu_2423_p2 = (shl_ln_fu_2415_p3 + mul_ln703_fu_2400_p2);

assign add_ln21_fu_1770_p2 = (j_reg_1359 + 6'd1);

assign add_ln25_fu_1796_p2 = (k_reg_1371 + 7'd2);

assign add_ln40_fu_2365_p2 = (j_1_reg_1406 + 5'd1);

assign add_ln581_fu_1579_p2 = ($signed(F2_reg_4686) + $signed(12'd4088));

assign add_ln59_fu_3796_p2 = (ap_phi_mux_j_2_phi_fu_1432_p4 + 2'd1);

assign add_ln5_fu_1482_p2 = (i_reg_1348 + 7'd1);

assign add_ln77_fu_1932_p2 = (i_1_reg_1395 + 6'd1);

assign add_ln908_1_fu_3577_p2 = ($signed(sub_ln894_1_fu_3469_p2) + $signed(32'd4294967242));

assign add_ln908_fu_2103_p2 = ($signed(sub_ln894_fu_1995_p2) + $signed(32'd4294967242));

assign add_ln915_1_fu_3679_p2 = (sub_ln915_1_fu_3674_p2 + select_ln893_1_fu_3666_p3);

assign add_ln915_fu_2205_p2 = (sub_ln915_fu_2200_p2 + select_ln893_fu_2192_p3);

assign add_ln92_fu_3406_p2 = (i_2_reg_1417 + 5'd1);

assign and_ln1506_1_fu_3735_p2 = (or_ln1506_1_fu_3731_p2 & grp_fu_1477_p2);

assign and_ln1506_fu_2261_p2 = (or_ln1506_fu_2257_p2 & grp_fu_1477_p2);

assign and_ln581_fu_1683_p2 = (xor_ln582_fu_1677_p2 & icmp_ln581_fu_1574_p2);

assign and_ln582_fu_1666_p2 = (xor_ln571_fu_1661_p2 & icmp_ln582_fu_1601_p2);

assign and_ln585_fu_1695_p2 = (icmp_ln585_fu_1689_p2 & and_ln581_fu_1683_p2);

assign and_ln603_fu_1713_p2 = (xor_ln581_fu_1707_p2 & icmp_ln603_fu_1620_p2);

assign and_ln899_1_fu_2109_p2 = (xor_ln899_fu_2075_p2 & p_Result_12_fu_2081_p3);

assign and_ln899_2_fu_3529_p2 = (tmp_V_5_fu_3443_p3 & or_ln899_fu_3523_p2);

assign and_ln899_3_fu_3583_p2 = (xor_ln899_1_fu_3549_p2 & p_Result_16_fu_3555_p3);

assign and_ln899_fu_2055_p2 = (tmp_V_4_fu_1969_p3 & or_ln899_2_fu_2049_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp5_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_return = $signed(ret_V_5_fu_4627_p3);

assign ashr_ln586_fu_1630_p2 = $signed(man_V_2_fu_1567_p3) >>> zext_ln586_fu_1626_p1;

assign bitcast_ln734_1_fu_3704_p1 = p_Result_17_fu_3692_p5;

assign bitcast_ln734_fu_2230_p1 = p_Result_13_fu_2218_p5;

assign exp_tmp_fu_1520_p4 = {{ireg_fu_1504_p1[62:52]}};

assign fp_input_img_V_address1 = k_cast75_fu_1802_p1;

assign grp_fu_1474_p0 = input_img_q0;

assign i_1_cast_fu_1944_p1 = i_1_reg_1395;

assign i_2_cast_fu_3418_p1 = i_2_reg_1417;

assign i_cast_fu_1494_p1 = i_reg_1348;

assign icmp_ln109_fu_4524_p2 = ((i_3_reg_1440 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_4551_p2 = (($signed(tmp_19_fu_4539_p5) > $signed(max_val_V_reg_1463)) ? 1'b1 : 1'b0);

assign icmp_ln1506_1_fu_2251_p2 = ((trunc_ln6_fu_2235_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1506_2_fu_3719_p2 = ((add_ln915_1_fu_3679_p2 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln1506_3_fu_3725_p2 = ((trunc_ln1506_1_fu_3709_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1506_fu_2245_p2 = ((add_ln915_fu_2205_p2 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_1776_p2 = ((j_reg_1359 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_1790_p2 = ((k_reg_1371 < 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_2371_p2 = ((j_1_reg_1406 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_1538_p2 = ((trunc_ln555_fu_1508_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_1574_p2 = (($signed(F2_reg_4686) > $signed(12'd8)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_1601_p2 = ((F2_reg_4686 == 12'd8) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_1689_p2 = ((sh_amt_fu_1589_p3 > 12'd53) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_3802_p2 = ((ap_phi_mux_j_2_phi_fu_1432_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_1488_p2 = ((i_reg_1348 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_1620_p2 = ((tmp_21_fu_1610_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_1938_p2 = ((i_1_reg_1395 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_4607_p2 = ((trunc_ln851_fu_4603_p1 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln885_1_fu_3423_p2 = ((temp_output2_0_V_q1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln885_fu_1949_p2 = ((temp_output_0_V_q1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln896_1_fu_3491_p2 = (($signed(tmp_78_fu_3481_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln896_fu_2017_p2 = (($signed(tmp_74_fu_2007_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln899_1_fu_3535_p2 = ((and_ln899_2_fu_3529_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln899_fu_2061_p2 = ((and_ln899_fu_2055_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln908_1_fu_3563_p2 = (($signed(lsb_index_1_fu_3475_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln908_fu_2089_p2 = (($signed(lsb_index_fu_2001_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_3412_p2 = ((i_2_reg_1417 == 5'd16) ? 1'b1 : 1'b0);

assign input_img_address0 = i_cast_fu_1494_p1;

assign ireg_fu_1504_p1 = grp_fu_1474_p1;

assign j_1_cast_fu_2377_p1 = j_1_reg_1406;

assign k_cast75_fu_1802_p1 = k_reg_1371;


always @ (p_Result_15_fu_3451_p4) begin
    if (p_Result_15_fu_3451_p4[0] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd0;
    end else if (p_Result_15_fu_3451_p4[1] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd1;
    end else if (p_Result_15_fu_3451_p4[2] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd2;
    end else if (p_Result_15_fu_3451_p4[3] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd3;
    end else if (p_Result_15_fu_3451_p4[4] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd4;
    end else if (p_Result_15_fu_3451_p4[5] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd5;
    end else if (p_Result_15_fu_3451_p4[6] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd6;
    end else if (p_Result_15_fu_3451_p4[7] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd7;
    end else if (p_Result_15_fu_3451_p4[8] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd8;
    end else if (p_Result_15_fu_3451_p4[9] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd9;
    end else if (p_Result_15_fu_3451_p4[10] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd10;
    end else if (p_Result_15_fu_3451_p4[11] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd11;
    end else if (p_Result_15_fu_3451_p4[12] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd12;
    end else if (p_Result_15_fu_3451_p4[13] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd13;
    end else if (p_Result_15_fu_3451_p4[14] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd14;
    end else if (p_Result_15_fu_3451_p4[15] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd15;
    end else if (p_Result_15_fu_3451_p4[16] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd16;
    end else if (p_Result_15_fu_3451_p4[17] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd17;
    end else if (p_Result_15_fu_3451_p4[18] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd18;
    end else if (p_Result_15_fu_3451_p4[19] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd19;
    end else if (p_Result_15_fu_3451_p4[20] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd20;
    end else if (p_Result_15_fu_3451_p4[21] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd21;
    end else if (p_Result_15_fu_3451_p4[22] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd22;
    end else if (p_Result_15_fu_3451_p4[23] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd23;
    end else if (p_Result_15_fu_3451_p4[24] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd24;
    end else if (p_Result_15_fu_3451_p4[25] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd25;
    end else if (p_Result_15_fu_3451_p4[26] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd26;
    end else if (p_Result_15_fu_3451_p4[27] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd27;
    end else if (p_Result_15_fu_3451_p4[28] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd28;
    end else if (p_Result_15_fu_3451_p4[29] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd29;
    end else if (p_Result_15_fu_3451_p4[30] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd30;
    end else if (p_Result_15_fu_3451_p4[31] == 1'b1) begin
        l_1_fu_3461_p3 = 32'd31;
    end else begin
        l_1_fu_3461_p3 = 32'd32;
    end
end


always @ (p_Result_11_fu_1977_p4) begin
    if (p_Result_11_fu_1977_p4[0] == 1'b1) begin
        l_fu_1987_p3 = 32'd0;
    end else if (p_Result_11_fu_1977_p4[1] == 1'b1) begin
        l_fu_1987_p3 = 32'd1;
    end else if (p_Result_11_fu_1977_p4[2] == 1'b1) begin
        l_fu_1987_p3 = 32'd2;
    end else if (p_Result_11_fu_1977_p4[3] == 1'b1) begin
        l_fu_1987_p3 = 32'd3;
    end else if (p_Result_11_fu_1977_p4[4] == 1'b1) begin
        l_fu_1987_p3 = 32'd4;
    end else if (p_Result_11_fu_1977_p4[5] == 1'b1) begin
        l_fu_1987_p3 = 32'd5;
    end else if (p_Result_11_fu_1977_p4[6] == 1'b1) begin
        l_fu_1987_p3 = 32'd6;
    end else if (p_Result_11_fu_1977_p4[7] == 1'b1) begin
        l_fu_1987_p3 = 32'd7;
    end else if (p_Result_11_fu_1977_p4[8] == 1'b1) begin
        l_fu_1987_p3 = 32'd8;
    end else if (p_Result_11_fu_1977_p4[9] == 1'b1) begin
        l_fu_1987_p3 = 32'd9;
    end else if (p_Result_11_fu_1977_p4[10] == 1'b1) begin
        l_fu_1987_p3 = 32'd10;
    end else if (p_Result_11_fu_1977_p4[11] == 1'b1) begin
        l_fu_1987_p3 = 32'd11;
    end else if (p_Result_11_fu_1977_p4[12] == 1'b1) begin
        l_fu_1987_p3 = 32'd12;
    end else if (p_Result_11_fu_1977_p4[13] == 1'b1) begin
        l_fu_1987_p3 = 32'd13;
    end else if (p_Result_11_fu_1977_p4[14] == 1'b1) begin
        l_fu_1987_p3 = 32'd14;
    end else if (p_Result_11_fu_1977_p4[15] == 1'b1) begin
        l_fu_1987_p3 = 32'd15;
    end else if (p_Result_11_fu_1977_p4[16] == 1'b1) begin
        l_fu_1987_p3 = 32'd16;
    end else if (p_Result_11_fu_1977_p4[17] == 1'b1) begin
        l_fu_1987_p3 = 32'd17;
    end else if (p_Result_11_fu_1977_p4[18] == 1'b1) begin
        l_fu_1987_p3 = 32'd18;
    end else if (p_Result_11_fu_1977_p4[19] == 1'b1) begin
        l_fu_1987_p3 = 32'd19;
    end else if (p_Result_11_fu_1977_p4[20] == 1'b1) begin
        l_fu_1987_p3 = 32'd20;
    end else if (p_Result_11_fu_1977_p4[21] == 1'b1) begin
        l_fu_1987_p3 = 32'd21;
    end else if (p_Result_11_fu_1977_p4[22] == 1'b1) begin
        l_fu_1987_p3 = 32'd22;
    end else if (p_Result_11_fu_1977_p4[23] == 1'b1) begin
        l_fu_1987_p3 = 32'd23;
    end else if (p_Result_11_fu_1977_p4[24] == 1'b1) begin
        l_fu_1987_p3 = 32'd24;
    end else if (p_Result_11_fu_1977_p4[25] == 1'b1) begin
        l_fu_1987_p3 = 32'd25;
    end else if (p_Result_11_fu_1977_p4[26] == 1'b1) begin
        l_fu_1987_p3 = 32'd26;
    end else if (p_Result_11_fu_1977_p4[27] == 1'b1) begin
        l_fu_1987_p3 = 32'd27;
    end else if (p_Result_11_fu_1977_p4[28] == 1'b1) begin
        l_fu_1987_p3 = 32'd28;
    end else if (p_Result_11_fu_1977_p4[29] == 1'b1) begin
        l_fu_1987_p3 = 32'd29;
    end else if (p_Result_11_fu_1977_p4[30] == 1'b1) begin
        l_fu_1987_p3 = 32'd30;
    end else if (p_Result_11_fu_1977_p4[31] == 1'b1) begin
        l_fu_1987_p3 = 32'd31;
    end else begin
        l_fu_1987_p3 = 32'd32;
    end
end

assign layer2_weights_V_0_address0 = j_1_cast_fu_2377_p1;

assign layer2_weights_V_10_address0 = j_1_cast_reg_5318;

assign layer2_weights_V_11_address0 = j_1_cast_reg_5318_pp3_iter1_reg;

assign layer2_weights_V_12_address0 = j_1_cast_reg_5318_pp3_iter1_reg;

assign layer2_weights_V_13_address0 = j_1_cast_reg_5318_pp3_iter1_reg;

assign layer2_weights_V_14_address0 = j_1_cast_reg_5318_pp3_iter1_reg;

assign layer2_weights_V_15_address0 = j_1_cast_reg_5318_pp3_iter1_reg;

assign layer2_weights_V_16_address0 = j_1_cast_reg_5318_pp3_iter2_reg;

assign layer2_weights_V_17_address0 = j_1_cast_reg_5318_pp3_iter2_reg;

assign layer2_weights_V_18_address0 = j_1_cast_reg_5318_pp3_iter2_reg;

assign layer2_weights_V_19_address0 = j_1_cast_reg_5318_pp3_iter2_reg;

assign layer2_weights_V_1_address0 = j_1_cast_fu_2377_p1;

assign layer2_weights_V_20_address0 = j_1_cast_reg_5318_pp3_iter2_reg;

assign layer2_weights_V_21_address0 = j_1_cast_reg_5318_pp3_iter3_reg;

assign layer2_weights_V_22_address0 = j_1_cast_reg_5318_pp3_iter3_reg;

assign layer2_weights_V_23_address0 = j_1_cast_reg_5318_pp3_iter3_reg;

assign layer2_weights_V_24_address0 = j_1_cast_reg_5318_pp3_iter3_reg;

assign layer2_weights_V_25_address0 = j_1_cast_reg_5318_pp3_iter3_reg;

assign layer2_weights_V_26_address0 = j_1_cast_reg_5318_pp3_iter4_reg;

assign layer2_weights_V_27_address0 = j_1_cast_reg_5318_pp3_iter4_reg;

assign layer2_weights_V_28_address0 = j_1_cast_reg_5318_pp3_iter4_reg;

assign layer2_weights_V_29_address0 = j_1_cast_reg_5318_pp3_iter4_reg;

assign layer2_weights_V_2_address0 = j_1_cast_fu_2377_p1;

assign layer2_weights_V_30_address0 = j_1_cast_reg_5318_pp3_iter4_reg;

assign layer2_weights_V_31_address0 = j_1_cast_reg_5318_pp3_iter5_reg;

assign layer2_weights_V_3_address0 = j_1_cast_fu_2377_p1;

assign layer2_weights_V_4_address0 = j_1_cast_fu_2377_p1;

assign layer2_weights_V_5_address0 = j_1_cast_fu_2377_p1;

assign layer2_weights_V_6_address0 = j_1_cast_reg_5318;

assign layer2_weights_V_7_address0 = j_1_cast_reg_5318;

assign layer2_weights_V_8_address0 = j_1_cast_reg_5318;

assign layer2_weights_V_9_address0 = j_1_cast_reg_5318;

assign lhs_1_fu_1872_p3 = {{sum_V_2_reg_1382}, {8'd0}};

assign lhs_2_fu_1908_p3 = {{tmp_24_fu_1898_p4}, {8'd0}};

assign lsb_index_1_fu_3475_p2 = ($signed(sub_ln894_1_fu_3469_p2) + $signed(32'd4294967243));

assign lsb_index_fu_2001_p2 = ($signed(sub_ln894_fu_1995_p2) + $signed(32'd4294967243));

assign lshr_ln897_1_fu_3511_p2 = 32'd4294967295 >> zext_ln897_1_fu_3507_p1;

assign lshr_ln897_fu_2037_p2 = 32'd4294967295 >> zext_ln897_fu_2033_p1;

assign lshr_ln908_1_fu_3613_p2 = zext_ln907_1_fu_3607_p1 >> zext_ln908_1_fu_3610_p1;

assign lshr_ln908_fu_2139_p2 = zext_ln907_fu_2133_p1 >> zext_ln908_fu_2136_p1;

assign m_2_fu_2154_p3 = ((icmp_ln908_reg_4801[0:0] == 1'b1) ? lshr_ln908_fu_2139_p2 : shl_ln909_fu_2148_p2);

assign m_3_fu_2164_p2 = (m_2_fu_2154_p3 + zext_ln911_fu_2161_p1);

assign m_4_fu_3628_p3 = ((icmp_ln908_1_reg_5658[0:0] == 1'b1) ? lshr_ln908_1_fu_3613_p2 : shl_ln909_1_fu_3622_p2);

assign m_5_fu_3638_p2 = (m_4_fu_3628_p3 + zext_ln911_1_fu_3635_p1);

assign m_8_fu_2170_p4 = {{m_3_fu_2164_p2[63:1]}};

assign m_fu_3644_p4 = {{m_5_fu_3638_p2[63:1]}};

assign man_V_1_fu_1561_p2 = (54'd0 - zext_ln569_fu_1557_p1);

assign man_V_2_fu_1567_p3 = ((p_Result_8_reg_4668[0:0] == 1'b1) ? man_V_1_fu_1561_p2 : zext_ln569_fu_1557_p1);

assign max_idx_V_1_fu_4577_p3 = ((icmp_ln1494_fu_4551_p2[0:0] == 1'b1) ? zext_ln111_fu_4573_p1 : max_idx_V_reg_1451);

assign max_val_V_1_fu_4557_p3 = ((icmp_ln1494_fu_4551_p2[0:0] == 1'b1) ? tmp_19_fu_4539_p5 : max_val_V_reg_1463);

assign mul_ln1118_10_fu_4208_p1 = sext_ln1116_25_reg_5915;

assign mul_ln1118_11_fu_4287_p1 = sext_ln1116_26_reg_5920;

assign mul_ln1118_12_fu_4332_p1 = sext_ln1116_27_reg_5925;

assign mul_ln1118_13_fu_4377_p1 = sext_ln1116_28_reg_5930;

assign mul_ln1118_14_fu_4419_p1 = sext_ln1116_29_reg_5935;

assign mul_ln1118_15_fu_4464_p1 = temp_output2_0_V_load_15_cast_reg_5940;

assign mul_ln1118_1_fu_3845_p1 = sext_ln1116_16_reg_5870;

assign mul_ln1118_2_fu_3890_p1 = sext_ln1116_17_reg_5875;

assign mul_ln1118_3_fu_3935_p1 = sext_ln1116_18_reg_5880;

assign mul_ln1118_4_fu_3966_p1 = sext_ln1116_19_reg_5885;

assign mul_ln1118_5_fu_3987_p1 = sext_ln1116_20_reg_5890;

assign mul_ln1118_6_fu_4066_p1 = sext_ln1116_21_reg_5895;

assign mul_ln1118_7_fu_4111_p1 = sext_ln1116_22_reg_5900;

assign mul_ln1118_8_fu_4156_p1 = sext_ln1116_23_reg_5905;

assign mul_ln1118_9_fu_4187_p1 = sext_ln1116_24_reg_5910;

assign mul_ln1118_fu_3824_p1 = sext_ln1116_15_reg_5865;

assign mul_ln1192_10_fu_2916_p1 = sext_ln1192_8_reg_5234;

assign mul_ln1192_11_fu_2949_p1 = sext_ln1192_9_reg_5239;

assign mul_ln1192_12_fu_2968_p1 = sext_ln1192_10_reg_5244;

assign mul_ln1192_13_fu_3077_p1 = sext_ln1192_11_reg_5259;

assign mul_ln1192_14_fu_3129_p1 = sext_ln1192_12_reg_5269;

assign mul_ln1192_15_fu_3138_p1 = sext_ln1192_13_reg_5274;

assign mul_ln1192_16_fu_3290_p1 = sext_ln1192_14_reg_5294;

assign mul_ln1192_17_fu_3366_p1 = sext_ln1192_15_reg_5304;

assign mul_ln1192_2_fu_2433_p1 = sext_ln1192_reg_5159;

assign mul_ln1192_3_fu_2594_p1 = sext_ln1192_1_reg_5184;

assign mul_ln1192_4_fu_2627_p1 = sext_ln1192_2_reg_5189;

assign mul_ln1192_5_fu_2646_p1 = sext_ln1192_3_reg_5194;

assign mul_ln1192_6_fu_2655_p1 = sext_ln1192_4_reg_5199;

assign mul_ln1192_7_fu_2788_p1 = sext_ln1192_5_reg_5214;

assign mul_ln1192_8_fu_2816_p1 = sext_ln1192_6_reg_5224;

assign mul_ln1192_9_fu_2883_p1 = sext_ln1192_7_reg_5229;

assign mul_ln703_10_fu_3110_p1 = sext_ln1116_10_reg_5264;

assign mul_ln703_11_fu_3205_p1 = sext_ln1116_11_reg_5279;

assign mul_ln703_12_fu_3238_p1 = sext_ln1116_12_reg_5284;

assign mul_ln703_13_fu_3271_p1 = sext_ln1116_13_reg_5289;

assign mul_ln703_14_fu_3333_p1 = sext_ln1116_14_reg_5299;

assign mul_ln703_1_fu_2466_p1 = sext_ln1116_1_reg_5164;

assign mul_ln703_2_fu_2485_p1 = sext_ln1116_2_reg_5169;

assign mul_ln703_3_fu_2494_p1 = sext_ln1116_3_reg_5174;

assign mul_ln703_4_fu_2561_p1 = sext_ln1116_4_reg_5179;

assign mul_ln703_5_fu_2722_p1 = sext_ln1116_5_reg_5204;

assign mul_ln703_6_fu_2755_p1 = sext_ln1116_6_reg_5209;

assign mul_ln703_7_fu_2807_p1 = sext_ln1116_7_reg_5219;

assign mul_ln703_8_fu_2977_p1 = sext_ln1116_8_reg_5249;

assign mul_ln703_9_fu_3044_p1 = sext_ln1116_9_reg_5254;

assign mul_ln703_fu_2400_p1 = sext_ln1116_reg_5154;

assign mul_ln708_fu_2391_p1 = sext_ln708_reg_5149;

assign or_ln1506_1_fu_3731_p2 = (icmp_ln1506_3_reg_5693 | icmp_ln1506_2_reg_5688);

assign or_ln1506_fu_2257_p2 = (icmp_ln1506_reg_4831 | icmp_ln1506_1_reg_4836);

assign or_ln25_fu_1830_p2 = (k_reg_1371 | 7'd1);

assign or_ln571_1_fu_1755_p2 = (or_ln571_fu_1726_p2 | and_ln581_fu_1683_p2);

assign or_ln571_fu_1726_p2 = (icmp_ln571_reg_4678 | and_ln603_fu_1713_p2);

assign or_ln581_fu_1701_p2 = (or_ln582_fu_1672_p2 | icmp_ln581_fu_1574_p2);

assign or_ln582_fu_1672_p2 = (icmp_ln582_fu_1601_p2 | icmp_ln571_reg_4678);

assign or_ln899_2_fu_2049_p2 = (shl_ln899_fu_2043_p2 | lshr_ln897_fu_2037_p2);

assign or_ln899_fu_3523_p2 = (shl_ln899_1_fu_3517_p2 | lshr_ln897_1_fu_3511_p2);

assign p_Result_10_fu_1955_p3 = temp_output_0_V_q1[32'd31];

integer ap_tvar_int_0;

always @ (tmp_V_4_fu_1969_p3) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_11_fu_1977_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_11_fu_1977_p4[ap_tvar_int_0] = tmp_V_4_fu_1969_p3[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_12_fu_2081_p3 = tmp_V_4_fu_1969_p3[lsb_index_fu_2001_p2];

assign p_Result_13_fu_2218_p5 = {{tmp_s_fu_2211_p3}, {zext_ln912_fu_2180_p1[51:0]}};

assign p_Result_14_fu_3429_p3 = temp_output2_0_V_q1[32'd31];

integer ap_tvar_int_1;

always @ (tmp_V_5_fu_3443_p3) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            p_Result_15_fu_3451_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            p_Result_15_fu_3451_p4[ap_tvar_int_1] = tmp_V_5_fu_3443_p3[31 - ap_tvar_int_1];
        end
    end
end

assign p_Result_16_fu_3555_p3 = tmp_V_5_fu_3443_p3[lsb_index_1_fu_3475_p2];

assign p_Result_17_fu_3692_p5 = {{tmp_1_fu_3685_p3}, {zext_ln912_1_fu_3654_p1[51:0]}};

assign p_Result_5_fu_3658_p3 = m_5_fu_3638_p2[32'd54];

assign p_Result_7_fu_4595_p3 = max_idx_V_reg_1451[32'd31];

assign p_Result_9_fu_1550_p3 = {{1'd1}, {trunc_ln565_reg_4673}};

assign p_Result_s_fu_2184_p3 = m_3_fu_2164_p2[32'd54];

assign ret_V_1_fu_1916_p2 = (lhs_2_fu_1908_p3 + mul_ln1192_1_fu_1892_p2);

assign ret_V_2_fu_4585_p4 = {{max_idx_V_reg_1451[31:8]}};

assign ret_V_3_fu_4613_p2 = (ret_V_2_fu_4585_p4 + 24'd1);

assign ret_V_5_fu_4627_p3 = ((p_Result_7_fu_4595_p3[0:0] == 1'b1) ? select_ln850_fu_4619_p3 : ret_V_2_fu_4585_p4);

assign ret_V_fu_1880_p2 = (lhs_1_fu_1872_p3 + mul_ln1192_reg_4752);

assign select_ln571_1_fu_1731_p3 = ((and_ln585_fu_1695_p2[0:0] == 1'b1) ? select_ln588_fu_1647_p3 : trunc_ln586_fu_1636_p1);

assign select_ln571_2_fu_1739_p3 = ((and_ln582_fu_1666_p2[0:0] == 1'b1) ? trunc_ln583_fu_1606_p1 : 32'd0);

assign select_ln571_3_fu_1747_p3 = ((or_ln571_fu_1726_p2[0:0] == 1'b1) ? select_ln571_fu_1719_p3 : select_ln571_1_fu_1731_p3);

assign select_ln571_4_fu_1761_p3 = ((or_ln571_1_fu_1755_p2[0:0] == 1'b1) ? select_ln571_3_fu_1747_p3 : select_ln571_2_fu_1739_p3);

assign select_ln571_fu_1719_p3 = ((icmp_ln571_reg_4678[0:0] == 1'b1) ? 32'd0 : shl_ln604_fu_1655_p2);

assign select_ln588_fu_1647_p3 = ((tmp_72_fu_1640_p3[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln850_fu_4619_p3 = ((icmp_ln851_fu_4607_p2[0:0] == 1'b1) ? ret_V_2_fu_4585_p4 : ret_V_3_fu_4613_p2);

assign select_ln893_1_fu_3666_p3 = ((p_Result_5_fu_3658_p3[0:0] == 1'b1) ? 11'd1023 : 11'd1022);

assign select_ln893_fu_2192_p3 = ((p_Result_s_fu_2184_p3[0:0] == 1'b1) ? 11'd1023 : 11'd1022);

assign select_ln896_1_fu_3569_p3 = ((icmp_ln896_1_fu_3491_p2[0:0] == 1'b1) ? icmp_ln899_1_fu_3535_p2 : p_Result_16_fu_3555_p3);

assign select_ln896_fu_2095_p3 = ((icmp_ln896_fu_2017_p2[0:0] == 1'b1) ? icmp_ln899_fu_2061_p2 : p_Result_12_fu_2081_p3);

assign select_ln908_2_fu_3595_p3 = ((icmp_ln908_1_fu_3563_p2[0:0] == 1'b1) ? select_ln896_1_fu_3569_p3 : and_ln899_3_fu_3583_p2);

assign select_ln908_fu_2121_p3 = ((icmp_ln908_fu_2089_p2[0:0] == 1'b1) ? select_ln896_fu_2095_p3 : and_ln899_1_fu_2109_p2);

assign sext_ln1116_10_fu_2336_p1 = $signed(temp_output_0_V_load_23_reg_5074);

assign sext_ln1116_11_fu_2345_p1 = $signed(temp_output_0_V_load_26_reg_5109);

assign sext_ln1116_12_fu_2348_p1 = $signed(temp_output_0_V_load_27_reg_5114);

assign sext_ln1116_13_fu_2351_p1 = $signed(temp_output_0_V_load_28_reg_5129);

assign sext_ln1116_14_fu_2357_p1 = $signed(temp_output_0_V_q0);

assign sext_ln1116_15_fu_3746_p1 = $signed(temp_output2_0_V_load_reg_5725);

assign sext_ln1116_16_fu_3749_p1 = $signed(temp_output2_0_V_load_1_reg_5730);

assign sext_ln1116_17_fu_3752_p1 = $signed(temp_output2_0_V_load_2_reg_5745);

assign sext_ln1116_18_fu_3755_p1 = $signed(temp_output2_0_V_load_3_reg_5750);

assign sext_ln1116_19_fu_3758_p1 = $signed(temp_output2_0_V_load_4_reg_5765);

assign sext_ln1116_1_fu_2276_p1 = $signed(temp_output_0_V_load_3_reg_4874);

assign sext_ln1116_20_fu_3761_p1 = $signed(temp_output2_0_V_load_5_reg_5770);

assign sext_ln1116_21_fu_3764_p1 = $signed(temp_output2_0_V_load_6_reg_5785);

assign sext_ln1116_22_fu_3767_p1 = $signed(temp_output2_0_V_load_7_reg_5790);

assign sext_ln1116_23_fu_3770_p1 = $signed(temp_output2_0_V_load_8_reg_5805);

assign sext_ln1116_24_fu_3773_p1 = $signed(temp_output2_0_V_load_9_reg_5810);

assign sext_ln1116_25_fu_3776_p1 = $signed(temp_output2_0_V_load_10_reg_5825);

assign sext_ln1116_26_fu_3779_p1 = $signed(temp_output2_0_V_load_11_reg_5830);

assign sext_ln1116_27_fu_3782_p1 = $signed(temp_output2_0_V_load_12_reg_5845);

assign sext_ln1116_28_fu_3785_p1 = $signed(temp_output2_0_V_load_13_reg_5850);

assign sext_ln1116_29_fu_3788_p1 = $signed(temp_output2_0_V_q0);

assign sext_ln1116_2_fu_2279_p1 = $signed(temp_output_0_V_load_4_reg_4889);

assign sext_ln1116_3_fu_2282_p1 = $signed(temp_output_0_V_load_5_reg_4894);

assign sext_ln1116_4_fu_2285_p1 = $signed(temp_output_0_V_load_6_reg_4909);

assign sext_ln1116_5_fu_2300_p1 = $signed(temp_output_0_V_load_11_reg_4954);

assign sext_ln1116_6_fu_2303_p1 = $signed(temp_output_0_V_load_12_reg_4969);

assign sext_ln1116_7_fu_2309_p1 = $signed(temp_output_0_V_load_14_reg_4989);

assign sext_ln1116_8_fu_2327_p1 = $signed(temp_output_0_V_load_20_reg_5049);

assign sext_ln1116_9_fu_2330_p1 = $signed(temp_output_0_V_load_21_reg_5054);

assign sext_ln1116_fu_2270_p1 = $signed(temp_output_0_V_load_1_reg_4854);

assign sext_ln1192_10_fu_2324_p1 = $signed(temp_output_0_V_load_19_reg_5034);

assign sext_ln1192_11_fu_2333_p1 = $signed(temp_output_0_V_load_22_reg_5069);

assign sext_ln1192_12_fu_2339_p1 = $signed(temp_output_0_V_load_24_reg_5089);

assign sext_ln1192_13_fu_2342_p1 = $signed(temp_output_0_V_load_25_reg_5094);

assign sext_ln1192_14_fu_2354_p1 = $signed(temp_output_0_V_load_29_reg_5134);

assign sext_ln1192_15_fu_2361_p1 = $signed(temp_output_0_V_q1);

assign sext_ln1192_1_fu_2288_p1 = $signed(temp_output_0_V_load_7_reg_4914);

assign sext_ln1192_2_fu_2291_p1 = $signed(temp_output_0_V_load_8_reg_4929);

assign sext_ln1192_3_fu_2294_p1 = $signed(temp_output_0_V_load_9_reg_4934);

assign sext_ln1192_4_fu_2297_p1 = $signed(temp_output_0_V_load_10_reg_4949);

assign sext_ln1192_5_fu_2306_p1 = $signed(temp_output_0_V_load_13_reg_4974);

assign sext_ln1192_6_fu_2312_p1 = $signed(temp_output_0_V_load_15_reg_4994);

assign sext_ln1192_7_fu_2315_p1 = $signed(temp_output_0_V_load_16_reg_5009);

assign sext_ln1192_8_fu_2318_p1 = $signed(temp_output_0_V_load_17_reg_5014);

assign sext_ln1192_9_fu_2321_p1 = $signed(temp_output_0_V_load_18_reg_5029);

assign sext_ln1192_fu_2273_p1 = $signed(temp_output_0_V_load_2_reg_4869);

assign sext_ln581_fu_1597_p1 = sh_amt_fu_1589_p3;

assign sext_ln708_fu_2267_p1 = $signed(temp_output_0_V_load_reg_4849);

assign sh_amt_fu_1589_p3 = ((icmp_ln581_fu_1574_p2[0:0] == 1'b1) ? add_ln581_fu_1579_p2 : sub_ln581_fu_1584_p2);

assign shl_ln1_fu_4565_p3 = {{i_3_reg_1440}, {8'd0}};

assign shl_ln604_fu_1655_p2 = trunc_ln583_fu_1606_p1 << sext_ln581_fu_1597_p1;

assign shl_ln728_10_fu_2770_p3 = {{tmp_36_fu_2760_p4}, {8'd0}};

assign shl_ln728_11_fu_2821_p3 = {{tmp_37_reg_5474}, {8'd0}};

assign shl_ln728_12_fu_2843_p3 = {{tmp_38_fu_2833_p4}, {8'd0}};

assign shl_ln728_13_fu_2866_p3 = {{tmp_39_fu_2856_p4}, {8'd0}};

assign shl_ln728_14_fu_2898_p3 = {{tmp_40_fu_2888_p4}, {8'd0}};

assign shl_ln728_15_fu_2931_p3 = {{tmp_41_fu_2921_p4}, {8'd0}};

assign shl_ln728_16_fu_2982_p3 = {{tmp_42_reg_5519}, {8'd0}};

assign shl_ln728_17_fu_3004_p3 = {{tmp_43_fu_2994_p4}, {8'd0}};

assign shl_ln728_18_fu_3027_p3 = {{tmp_44_fu_3017_p4}, {8'd0}};

assign shl_ln728_19_fu_3059_p3 = {{tmp_45_fu_3049_p4}, {8'd0}};

assign shl_ln728_1_fu_2448_p3 = {{tmp_26_fu_2438_p4}, {8'd0}};

assign shl_ln728_20_fu_3092_p3 = {{tmp_46_fu_3082_p4}, {8'd0}};

assign shl_ln728_21_fu_3143_p3 = {{tmp_47_reg_5564}, {8'd0}};

assign shl_ln728_22_fu_3165_p3 = {{tmp_48_fu_3155_p4}, {8'd0}};

assign shl_ln728_23_fu_3188_p3 = {{tmp_49_fu_3178_p4}, {8'd0}};

assign shl_ln728_24_fu_3220_p3 = {{tmp_50_fu_3210_p4}, {8'd0}};

assign shl_ln728_25_fu_3253_p3 = {{tmp_51_fu_3243_p4}, {8'd0}};

assign shl_ln728_26_fu_3295_p3 = {{tmp_52_reg_5609}, {8'd0}};

assign shl_ln728_27_fu_3317_p3 = {{tmp_53_fu_3307_p4}, {8'd0}};

assign shl_ln728_28_fu_3348_p3 = {{tmp_54_fu_3338_p4}, {8'd0}};

assign shl_ln728_29_fu_3381_p3 = {{tmp_55_fu_3371_p4}, {8'd0}};

assign shl_ln728_2_fu_2499_p3 = {{tmp_27_reg_5384}, {8'd0}};

assign shl_ln728_30_fu_3860_p3 = {{tmp_56_fu_3850_p4}, {8'd0}};

assign shl_ln728_31_fu_3905_p3 = {{tmp_57_fu_3895_p4}, {8'd0}};

assign shl_ln728_32_fu_3992_p3 = {{tmp_58_reg_5959}, {8'd0}};

assign shl_ln728_33_fu_4014_p3 = {{tmp_59_fu_4004_p4}, {8'd0}};

assign shl_ln728_34_fu_4037_p3 = {{tmp_60_fu_4027_p4}, {8'd0}};

assign shl_ln728_35_fu_4081_p3 = {{tmp_61_fu_4071_p4}, {8'd0}};

assign shl_ln728_36_fu_4126_p3 = {{tmp_62_fu_4116_p4}, {8'd0}};

assign shl_ln728_37_fu_4213_p3 = {{tmp_63_reg_5979}, {8'd0}};

assign shl_ln728_38_fu_4235_p3 = {{tmp_64_fu_4225_p4}, {8'd0}};

assign shl_ln728_39_fu_4258_p3 = {{tmp_65_fu_4248_p4}, {8'd0}};

assign shl_ln728_3_fu_2521_p3 = {{tmp_28_fu_2511_p4}, {8'd0}};

assign shl_ln728_40_fu_4302_p3 = {{tmp_66_fu_4292_p4}, {8'd0}};

assign shl_ln728_41_fu_4347_p3 = {{tmp_67_fu_4337_p4}, {8'd0}};

assign shl_ln728_42_fu_4404_p3 = {{tmp_68_reg_5999}, {8'd0}};

assign shl_ln728_43_fu_4434_p3 = {{tmp_69_fu_4424_p4}, {8'd0}};

assign shl_ln728_44_fu_4479_p3 = {{tmp_70_fu_4469_p4}, {8'd0}};

assign shl_ln728_4_fu_2544_p3 = {{tmp_29_fu_2534_p4}, {8'd0}};

assign shl_ln728_5_fu_2576_p3 = {{tmp_30_fu_2566_p4}, {8'd0}};

assign shl_ln728_6_fu_2609_p3 = {{tmp_31_fu_2599_p4}, {8'd0}};

assign shl_ln728_7_fu_2660_p3 = {{tmp_32_reg_5429}, {8'd0}};

assign shl_ln728_8_fu_2682_p3 = {{tmp_33_fu_2672_p4}, {8'd0}};

assign shl_ln728_9_fu_2705_p3 = {{tmp_34_fu_2695_p4}, {8'd0}};

assign shl_ln728_s_fu_2737_p3 = {{tmp_35_fu_2727_p4}, {8'd0}};

assign shl_ln899_1_fu_3517_p2 = 32'd1 << lsb_index_1_fu_3475_p2;

assign shl_ln899_fu_2043_p2 = 32'd1 << lsb_index_fu_2001_p2;

assign shl_ln909_1_fu_3622_p2 = zext_ln907_1_fu_3607_p1 << zext_ln909_1_fu_3619_p1;

assign shl_ln909_fu_2148_p2 = zext_ln907_fu_2133_p1 << zext_ln909_fu_2145_p1;

assign shl_ln_fu_2415_p3 = {{tmp_25_fu_2405_p4}, {8'd0}};

assign sub_ln581_fu_1584_p2 = (12'd8 - F2_reg_4686);

assign sub_ln894_1_fu_3469_p2 = (32'd32 - l_1_fu_3461_p3);

assign sub_ln894_fu_1995_p2 = (32'd32 - l_fu_1987_p3);

assign sub_ln897_1_fu_3501_p2 = (6'd22 - trunc_ln897_1_fu_3497_p1);

assign sub_ln897_fu_2027_p2 = (6'd22 - trunc_ln897_fu_2023_p1);

assign sub_ln909_1_fu_3589_p2 = (32'd54 - sub_ln894_1_fu_3469_p2);

assign sub_ln909_fu_2115_p2 = (32'd54 - sub_ln894_fu_1995_p2);

assign sub_ln915_1_fu_3674_p2 = (11'd24 - trunc_ln893_1_reg_5678);

assign sub_ln915_fu_2200_p2 = (11'd24 - trunc_ln893_reg_4821);

assign temp_output2_0_V_addr_reg_4699 = 64'd0;

assign temp_output2_0_V_load_15_cast_fu_3792_p1 = $signed(temp_output2_0_V_q1);

assign temp_output_0_V_addr_reg_4694 = 64'd0;

assign tmp_1_fu_3685_p3 = {{p_Result_14_reg_5648}, {add_ln915_1_fu_3679_p2}};

assign tmp_20_fu_1807_p4 = {{k_reg_1371[6:1]}};

assign tmp_21_fu_1610_p4 = {{sh_amt_fu_1589_p3[11:5]}};

assign tmp_22_fu_1817_p3 = {{tmp_20_fu_1807_p4}, {j_reg_1359}};

assign tmp_23_fu_1855_p3 = {{or_ln25_reg_4742}, {5'd0}};

assign tmp_24_fu_1898_p4 = {{ret_V_fu_1880_p2[39:8]}};

assign tmp_25_fu_2405_p4 = {{mul_ln708_fu_2391_p2[39:8]}};

assign tmp_26_fu_2438_p4 = {{add_ln1192_fu_2423_p2[39:8]}};

assign tmp_28_fu_2511_p4 = {{add_ln1192_2_fu_2506_p2[39:8]}};

assign tmp_29_fu_2534_p4 = {{add_ln1192_3_fu_2529_p2[39:8]}};

assign tmp_30_fu_2566_p4 = {{add_ln1192_4_fu_2552_p2[39:8]}};

assign tmp_31_fu_2599_p4 = {{add_ln1192_5_fu_2584_p2[39:8]}};

assign tmp_33_fu_2672_p4 = {{add_ln1192_7_fu_2667_p2[39:8]}};

assign tmp_34_fu_2695_p4 = {{add_ln1192_8_fu_2690_p2[39:8]}};

assign tmp_35_fu_2727_p4 = {{add_ln1192_9_fu_2713_p2[39:8]}};

assign tmp_36_fu_2760_p4 = {{add_ln1192_10_fu_2745_p2[39:8]}};

assign tmp_38_fu_2833_p4 = {{add_ln1192_12_fu_2828_p2[39:8]}};

assign tmp_39_fu_2856_p4 = {{add_ln1192_13_fu_2851_p2[39:8]}};

assign tmp_40_fu_2888_p4 = {{add_ln1192_14_fu_2874_p2[39:8]}};

assign tmp_41_fu_2921_p4 = {{add_ln1192_15_fu_2906_p2[39:8]}};

assign tmp_43_fu_2994_p4 = {{add_ln1192_17_fu_2989_p2[39:8]}};

assign tmp_44_fu_3017_p4 = {{add_ln1192_18_fu_3012_p2[39:8]}};

assign tmp_45_fu_3049_p4 = {{add_ln1192_19_fu_3035_p2[39:8]}};

assign tmp_46_fu_3082_p4 = {{add_ln1192_20_fu_3067_p2[39:8]}};

assign tmp_48_fu_3155_p4 = {{add_ln1192_22_fu_3150_p2[39:8]}};

assign tmp_49_fu_3178_p4 = {{add_ln1192_23_fu_3173_p2[39:8]}};

assign tmp_50_fu_3210_p4 = {{add_ln1192_24_fu_3196_p2[39:8]}};

assign tmp_51_fu_3243_p4 = {{add_ln1192_25_fu_3228_p2[39:8]}};

assign tmp_53_fu_3307_p4 = {{add_ln1192_27_fu_3302_p2[39:8]}};

assign tmp_54_fu_3338_p4 = {{add_ln1192_28_fu_3325_p2[39:8]}};

assign tmp_55_fu_3371_p4 = {{add_ln1192_29_fu_3356_p2[39:8]}};

assign tmp_56_fu_3850_p4 = {{mul_ln1118_fu_3824_p2[39:8]}};

assign tmp_57_fu_3895_p4 = {{add_ln1192_33_fu_3868_p2[39:8]}};

assign tmp_59_fu_4004_p4 = {{add_ln1192_35_fu_3999_p2[39:8]}};

assign tmp_60_fu_4027_p4 = {{add_ln1192_36_fu_4022_p2[39:8]}};

assign tmp_61_fu_4071_p4 = {{add_ln1192_37_fu_4045_p2[39:8]}};

assign tmp_62_fu_4116_p4 = {{add_ln1192_38_fu_4089_p2[39:8]}};

assign tmp_64_fu_4225_p4 = {{add_ln1192_40_fu_4220_p2[39:8]}};

assign tmp_65_fu_4248_p4 = {{add_ln1192_41_fu_4243_p2[39:8]}};

assign tmp_66_fu_4292_p4 = {{add_ln1192_42_fu_4266_p2[39:8]}};

assign tmp_67_fu_4337_p4 = {{add_ln1192_43_fu_4310_p2[39:8]}};

assign tmp_69_fu_4424_p4 = {{add_ln1192_45_fu_4411_p2[39:8]}};

assign tmp_70_fu_4469_p4 = {{add_ln1192_46_fu_4442_p2[39:8]}};

assign tmp_72_fu_1640_p3 = input_img_load_reg_4658_pp0_iter2_reg[32'd31];

assign tmp_74_fu_2007_p4 = {{lsb_index_fu_2001_p2[31:1]}};

assign tmp_75_fu_2067_p3 = lsb_index_fu_2001_p2[32'd31];

assign tmp_78_fu_3481_p4 = {{lsb_index_1_fu_3475_p2[31:1]}};

assign tmp_79_fu_3541_p3 = lsb_index_1_fu_3475_p2[32'd31];

assign tmp_V_2_fu_3437_p2 = (32'd0 - temp_output2_0_V_q1);

assign tmp_V_4_fu_1969_p3 = ((p_Result_10_fu_1955_p3[0:0] == 1'b1) ? tmp_V_fu_1963_p2 : temp_output_0_V_q1);

assign tmp_V_5_fu_3443_p3 = ((p_Result_14_fu_3429_p3[0:0] == 1'b1) ? tmp_V_2_fu_3437_p2 : temp_output2_0_V_q1);

assign tmp_V_fu_1963_p2 = (32'd0 - temp_output_0_V_q1);

assign tmp_s_fu_2211_p3 = {{p_Result_10_reg_4791}, {add_ln915_fu_2205_p2}};

assign trunc_ln1506_1_fu_3709_p4 = {{m_5_fu_3638_p2[52:1]}};

assign trunc_ln555_fu_1508_p1 = ireg_fu_1504_p1[62:0];

assign trunc_ln565_fu_1534_p1 = ireg_fu_1504_p1[51:0];

assign trunc_ln583_fu_1606_p1 = man_V_2_fu_1567_p3[31:0];

assign trunc_ln586_fu_1636_p1 = ashr_ln586_fu_1630_p2[31:0];

assign trunc_ln6_fu_2235_p4 = {{m_3_fu_2164_p2[52:1]}};

assign trunc_ln851_fu_4603_p1 = max_idx_V_reg_1451[7:0];

assign trunc_ln893_1_fu_3603_p1 = l_1_fu_3461_p3[10:0];

assign trunc_ln893_fu_2129_p1 = l_fu_1987_p3[10:0];

assign trunc_ln897_1_fu_3497_p1 = sub_ln894_1_fu_3469_p2[5:0];

assign trunc_ln897_fu_2023_p1 = sub_ln894_fu_1995_p2[5:0];

assign weights_layer1_weights_V_address0 = zext_ln1118_1_fu_1867_p1;

assign weights_layer1_weights_V_address1 = zext_ln1118_fu_1825_p1;

assign xor_ln571_fu_1661_p2 = (icmp_ln571_reg_4678 ^ 1'd1);

assign xor_ln581_fu_1707_p2 = (or_ln581_fu_1701_p2 ^ 1'd1);

assign xor_ln582_fu_1677_p2 = (or_ln582_fu_1672_p2 ^ 1'd1);

assign xor_ln899_1_fu_3549_p2 = (tmp_79_fu_3541_p3 ^ 1'd1);

assign xor_ln899_fu_2075_p2 = (tmp_75_fu_2067_p3 ^ 1'd1);

assign zext_ln1118_1_fu_1867_p1 = add_ln1118_fu_1862_p2;

assign zext_ln1118_fu_1825_p1 = tmp_22_fu_1817_p3;

assign zext_ln111_fu_4573_p1 = shl_ln1_fu_4565_p3;

assign zext_ln21_1_fu_1786_p1 = j_reg_1359;

assign zext_ln21_fu_1782_p1 = j_reg_1359;

assign zext_ln23_fu_1836_p1 = or_ln25_fu_1830_p2;

assign zext_ln455_fu_1530_p1 = exp_tmp_fu_1520_p4;

assign zext_ln569_fu_1557_p1 = p_Result_9_fu_1550_p3;

assign zext_ln586_fu_1626_p1 = $unsigned(sext_ln581_fu_1597_p1);

assign zext_ln897_1_fu_3507_p1 = sub_ln897_1_fu_3501_p2;

assign zext_ln897_fu_2033_p1 = sub_ln897_fu_2027_p2;

assign zext_ln907_1_fu_3607_p1 = tmp_V_5_reg_5653;

assign zext_ln907_fu_2133_p1 = tmp_V_4_reg_4796;

assign zext_ln908_1_fu_3610_p1 = add_ln908_1_reg_5663;

assign zext_ln908_fu_2136_p1 = add_ln908_reg_4806;

assign zext_ln909_1_fu_3619_p1 = sub_ln909_1_reg_5668;

assign zext_ln909_fu_2145_p1 = sub_ln909_reg_4811;

assign zext_ln911_1_fu_3635_p1 = select_ln908_2_reg_5673;

assign zext_ln911_fu_2161_p1 = select_ln908_reg_4816;

assign zext_ln912_1_fu_3654_p1 = m_fu_3644_p4;

assign zext_ln912_fu_2180_p1 = m_8_fu_2170_p4;

always @ (posedge ap_clk) begin
    i_cast_reg_4648[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_4648_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_4648_pp0_iter2_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln21_reg_4713[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln21_1_reg_4718[11:6] <= 6'b000000;
    or_ln25_reg_4742[0] <= 1'b1;
    j_1_cast_reg_5318[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5318_pp3_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5318_pp3_iter2_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5318_pp3_iter3_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5318_pp3_iter4_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5318_pp3_iter5_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5318_pp3_iter6_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //nn_inference
