// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nn_inference_nn_inference,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.284616,HLS_SYN_LAT=1965,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=6409,HLS_SYN_LUT=7914,HLS_VERSION=2020_2}" *)

module nn_inference (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_img_address0,
        input_img_ce0,
        input_img_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 40'd1;
parameter    ap_ST_fsm_pp0_stage0 = 40'd2;
parameter    ap_ST_fsm_state6 = 40'd4;
parameter    ap_ST_fsm_state7 = 40'd8;
parameter    ap_ST_fsm_pp1_stage0 = 40'd16;
parameter    ap_ST_fsm_state11 = 40'd32;
parameter    ap_ST_fsm_pp2_stage0 = 40'd64;
parameter    ap_ST_fsm_state16 = 40'd128;
parameter    ap_ST_fsm_state17 = 40'd256;
parameter    ap_ST_fsm_state18 = 40'd512;
parameter    ap_ST_fsm_state19 = 40'd1024;
parameter    ap_ST_fsm_state20 = 40'd2048;
parameter    ap_ST_fsm_state21 = 40'd4096;
parameter    ap_ST_fsm_state22 = 40'd8192;
parameter    ap_ST_fsm_state23 = 40'd16384;
parameter    ap_ST_fsm_state24 = 40'd32768;
parameter    ap_ST_fsm_state25 = 40'd65536;
parameter    ap_ST_fsm_state26 = 40'd131072;
parameter    ap_ST_fsm_state27 = 40'd262144;
parameter    ap_ST_fsm_state28 = 40'd524288;
parameter    ap_ST_fsm_state29 = 40'd1048576;
parameter    ap_ST_fsm_state30 = 40'd2097152;
parameter    ap_ST_fsm_state31 = 40'd4194304;
parameter    ap_ST_fsm_state32 = 40'd8388608;
parameter    ap_ST_fsm_pp3_stage0 = 40'd16777216;
parameter    ap_ST_fsm_state41 = 40'd33554432;
parameter    ap_ST_fsm_pp4_stage0 = 40'd67108864;
parameter    ap_ST_fsm_state46 = 40'd134217728;
parameter    ap_ST_fsm_state47 = 40'd268435456;
parameter    ap_ST_fsm_state48 = 40'd536870912;
parameter    ap_ST_fsm_state49 = 40'd1073741824;
parameter    ap_ST_fsm_state50 = 40'd2147483648;
parameter    ap_ST_fsm_state51 = 40'd4294967296;
parameter    ap_ST_fsm_state52 = 40'd8589934592;
parameter    ap_ST_fsm_state53 = 40'd17179869184;
parameter    ap_ST_fsm_state54 = 40'd34359738368;
parameter    ap_ST_fsm_pp5_stage0 = 40'd68719476736;
parameter    ap_ST_fsm_state60 = 40'd137438953472;
parameter    ap_ST_fsm_pp6_stage0 = 40'd274877906944;
parameter    ap_ST_fsm_state63 = 40'd549755813888;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_img_address0;
output   input_img_ce0;
input  [31:0] input_img_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_img_ce0;

(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] weights_layer1_weights_V_address0;
reg    weights_layer1_weights_V_ce0;
wire  signed [11:0] weights_layer1_weights_V_q0;
wire   [11:0] weights_layer1_weights_V_address1;
reg    weights_layer1_weights_V_ce1;
wire  signed [11:0] weights_layer1_weights_V_q1;
wire   [3:0] layer2_weights_V_0_address0;
reg    layer2_weights_V_0_ce0;
wire  signed [9:0] layer2_weights_V_0_q0;
wire   [3:0] layer2_weights_V_1_address0;
reg    layer2_weights_V_1_ce0;
wire  signed [9:0] layer2_weights_V_1_q0;
wire   [3:0] layer2_weights_V_2_address0;
reg    layer2_weights_V_2_ce0;
wire  signed [8:0] layer2_weights_V_2_q0;
wire   [3:0] layer2_weights_V_3_address0;
reg    layer2_weights_V_3_ce0;
wire  signed [9:0] layer2_weights_V_3_q0;
wire   [3:0] layer2_weights_V_4_address0;
reg    layer2_weights_V_4_ce0;
wire  signed [8:0] layer2_weights_V_4_q0;
wire   [3:0] layer2_weights_V_5_address0;
reg    layer2_weights_V_5_ce0;
wire  signed [10:0] layer2_weights_V_5_q0;
wire   [3:0] layer2_weights_V_6_address0;
reg    layer2_weights_V_6_ce0;
wire  signed [9:0] layer2_weights_V_6_q0;
wire   [3:0] layer2_weights_V_7_address0;
reg    layer2_weights_V_7_ce0;
wire  signed [8:0] layer2_weights_V_7_q0;
wire   [3:0] layer2_weights_V_8_address0;
reg    layer2_weights_V_8_ce0;
wire  signed [10:0] layer2_weights_V_8_q0;
wire   [3:0] layer2_weights_V_9_address0;
reg    layer2_weights_V_9_ce0;
wire  signed [9:0] layer2_weights_V_9_q0;
wire   [3:0] layer2_weights_V_10_address0;
reg    layer2_weights_V_10_ce0;
wire  signed [10:0] layer2_weights_V_10_q0;
wire   [3:0] layer2_weights_V_11_address0;
reg    layer2_weights_V_11_ce0;
wire  signed [9:0] layer2_weights_V_11_q0;
wire   [3:0] layer2_weights_V_12_address0;
reg    layer2_weights_V_12_ce0;
wire  signed [9:0] layer2_weights_V_12_q0;
wire   [3:0] layer2_weights_V_13_address0;
reg    layer2_weights_V_13_ce0;
wire  signed [9:0] layer2_weights_V_13_q0;
wire   [3:0] layer2_weights_V_14_address0;
reg    layer2_weights_V_14_ce0;
wire  signed [8:0] layer2_weights_V_14_q0;
wire   [3:0] layer2_weights_V_15_address0;
reg    layer2_weights_V_15_ce0;
wire  signed [10:0] layer2_weights_V_15_q0;
wire   [3:0] layer2_weights_V_16_address0;
reg    layer2_weights_V_16_ce0;
wire  signed [9:0] layer2_weights_V_16_q0;
wire   [3:0] layer2_weights_V_17_address0;
reg    layer2_weights_V_17_ce0;
wire  signed [8:0] layer2_weights_V_17_q0;
wire   [3:0] layer2_weights_V_18_address0;
reg    layer2_weights_V_18_ce0;
wire  signed [9:0] layer2_weights_V_18_q0;
wire   [3:0] layer2_weights_V_19_address0;
reg    layer2_weights_V_19_ce0;
wire  signed [8:0] layer2_weights_V_19_q0;
wire   [3:0] layer2_weights_V_20_address0;
reg    layer2_weights_V_20_ce0;
wire  signed [9:0] layer2_weights_V_20_q0;
wire   [3:0] layer2_weights_V_21_address0;
reg    layer2_weights_V_21_ce0;
wire  signed [10:0] layer2_weights_V_21_q0;
wire   [3:0] layer2_weights_V_22_address0;
reg    layer2_weights_V_22_ce0;
wire  signed [8:0] layer2_weights_V_22_q0;
wire   [3:0] layer2_weights_V_23_address0;
reg    layer2_weights_V_23_ce0;
wire  signed [8:0] layer2_weights_V_23_q0;
wire   [3:0] layer2_weights_V_24_address0;
reg    layer2_weights_V_24_ce0;
wire  signed [8:0] layer2_weights_V_24_q0;
wire   [3:0] layer2_weights_V_25_address0;
reg    layer2_weights_V_25_ce0;
wire  signed [8:0] layer2_weights_V_25_q0;
wire   [3:0] layer2_weights_V_26_address0;
reg    layer2_weights_V_26_ce0;
wire  signed [9:0] layer2_weights_V_26_q0;
wire   [3:0] layer2_weights_V_27_address0;
reg    layer2_weights_V_27_ce0;
wire  signed [9:0] layer2_weights_V_27_q0;
wire   [3:0] layer2_weights_V_28_address0;
reg    layer2_weights_V_28_ce0;
wire  signed [8:0] layer2_weights_V_28_q0;
wire   [3:0] layer2_weights_V_29_address0;
reg    layer2_weights_V_29_ce0;
wire  signed [9:0] layer2_weights_V_29_q0;
wire   [3:0] layer2_weights_V_30_address0;
reg    layer2_weights_V_30_ce0;
wire   [8:0] layer2_weights_V_30_q0;
wire   [3:0] layer2_weights_V_31_address0;
reg    layer2_weights_V_31_ce0;
wire  signed [9:0] layer2_weights_V_31_q0;
wire   [3:0] layer3_weights_V_0_address0;
reg    layer3_weights_V_0_ce0;
wire  signed [9:0] layer3_weights_V_0_q0;
wire   [3:0] layer3_weights_V_1_address0;
reg    layer3_weights_V_1_ce0;
wire  signed [8:0] layer3_weights_V_1_q0;
wire   [3:0] layer3_weights_V_2_address0;
reg    layer3_weights_V_2_ce0;
wire  signed [9:0] layer3_weights_V_2_q0;
wire   [3:0] layer3_weights_V_3_address0;
reg    layer3_weights_V_3_ce0;
wire  signed [9:0] layer3_weights_V_3_q0;
wire   [3:0] layer3_weights_V_4_address0;
reg    layer3_weights_V_4_ce0;
wire  signed [9:0] layer3_weights_V_4_q0;
wire   [3:0] layer3_weights_V_5_address0;
reg    layer3_weights_V_5_ce0;
wire  signed [9:0] layer3_weights_V_5_q0;
wire   [3:0] layer3_weights_V_6_address0;
reg    layer3_weights_V_6_ce0;
wire  signed [9:0] layer3_weights_V_6_q0;
wire   [3:0] layer3_weights_V_7_address0;
reg    layer3_weights_V_7_ce0;
wire  signed [10:0] layer3_weights_V_7_q0;
wire   [3:0] layer3_weights_V_8_address0;
reg    layer3_weights_V_8_ce0;
wire  signed [9:0] layer3_weights_V_8_q0;
wire   [3:0] layer3_weights_V_9_address0;
reg    layer3_weights_V_9_ce0;
wire  signed [10:0] layer3_weights_V_9_q0;
wire   [3:0] layer3_weights_V_10_address0;
reg    layer3_weights_V_10_ce0;
wire  signed [9:0] layer3_weights_V_10_q0;
wire   [3:0] layer3_weights_V_11_address0;
reg    layer3_weights_V_11_ce0;
wire  signed [9:0] layer3_weights_V_11_q0;
wire   [3:0] layer3_weights_V_12_address0;
reg    layer3_weights_V_12_ce0;
wire  signed [9:0] layer3_weights_V_12_q0;
wire   [3:0] layer3_weights_V_13_address0;
reg    layer3_weights_V_13_ce0;
wire  signed [9:0] layer3_weights_V_13_q0;
wire   [3:0] layer3_weights_V_14_address0;
reg    layer3_weights_V_14_ce0;
wire   [9:0] layer3_weights_V_14_q0;
wire   [3:0] layer3_weights_V_15_address0;
reg    layer3_weights_V_15_ce0;
wire  signed [10:0] layer3_weights_V_15_q0;
reg   [6:0] i_reg_1514;
reg   [6:0] k_reg_1537;
reg   [31:0] sum_V_2_reg_1548;
reg   [5:0] i_1_reg_1561;
reg   [4:0] j_1_reg_1572;
reg   [4:0] i_2_reg_1583;
reg   [3:0] j_2_reg_1594;
reg   [3:0] i_3_reg_1605;
reg   [31:0] max_idx_V_reg_1617;
reg   [31:0] max_val_V_reg_1629;
wire   [6:0] add_ln5_fu_1648_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln5_fu_1654_p2;
reg   [0:0] icmp_ln5_reg_4593;
reg   [0:0] icmp_ln5_reg_4593_pp0_iter1_reg;
reg   [0:0] icmp_ln5_reg_4593_pp0_iter2_reg;
wire   [63:0] i_cast_fu_1660_p1;
reg   [63:0] i_cast_reg_4597;
reg   [63:0] i_cast_reg_4597_pp0_iter1_reg;
reg   [63:0] i_cast_reg_4597_pp0_iter2_reg;
reg   [31:0] input_img_load_reg_4607;
reg   [31:0] input_img_load_reg_4607_pp0_iter2_reg;
reg   [0:0] p_Result_8_reg_4617;
wire   [51:0] trunc_ln565_fu_1700_p1;
reg   [51:0] trunc_ln565_reg_4622;
wire   [0:0] icmp_ln571_fu_1704_p2;
reg   [0:0] icmp_ln571_reg_4627;
wire   [11:0] F2_fu_1710_p2;
reg   [11:0] F2_reg_4635;
wire   [4:0] temp_output_0_V_addr_reg_4643;
wire    ap_CS_fsm_state6;
wire   [3:0] temp_output2_0_V_addr_reg_4648;
wire   [5:0] add_ln21_fu_1936_p2;
reg   [5:0] add_ln21_reg_4653;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln21_fu_1942_p2;
wire   [63:0] zext_ln21_fu_1948_p1;
reg   [63:0] zext_ln21_reg_4662;
wire   [11:0] zext_ln21_1_fu_1952_p1;
reg   [11:0] zext_ln21_1_reg_4667;
wire   [0:0] icmp_ln25_fu_1956_p2;
reg   [0:0] icmp_ln25_reg_4672;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln25_reg_4672_pp1_iter1_reg;
wire   [6:0] add_ln25_fu_1962_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [6:0] or_ln25_fu_1996_p2;
reg   [6:0] or_ln25_reg_4691;
wire   [39:0] mul_ln1192_fu_2015_p2;
reg   [39:0] mul_ln1192_reg_4701;
wire   [31:0] fp_input_img_V_q0;
reg  signed [31:0] r_V_1_reg_4711;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
wire   [5:0] add_ln77_fu_2098_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state12_pp2_stage0_iter0;
wire    ap_block_state13_pp2_stage0_iter1;
wire    ap_block_state14_pp2_stage0_iter2;
wire    ap_block_state15_pp2_stage0_iter3;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln77_fu_2104_p2;
reg   [4:0] temp_output_0_V_addr_1_reg_4730;
reg   [4:0] temp_output_0_V_addr_1_reg_4730_pp2_iter1_reg;
reg   [4:0] temp_output_0_V_addr_1_reg_4730_pp2_iter2_reg;
wire   [0:0] icmp_ln885_fu_2115_p2;
reg   [0:0] icmp_ln885_reg_4736;
reg   [0:0] icmp_ln885_reg_4736_pp2_iter2_reg;
wire   [0:0] p_Result_10_fu_2121_p3;
reg   [0:0] p_Result_10_reg_4740;
wire   [31:0] tmp_V_4_fu_2135_p3;
reg   [31:0] tmp_V_4_reg_4745;
wire   [0:0] icmp_ln908_fu_2255_p2;
reg   [0:0] icmp_ln908_reg_4750;
wire   [31:0] add_ln908_fu_2269_p2;
reg   [31:0] add_ln908_reg_4755;
wire   [31:0] sub_ln909_fu_2281_p2;
reg   [31:0] sub_ln909_reg_4760;
wire   [0:0] select_ln908_fu_2287_p3;
reg   [0:0] select_ln908_reg_4765;
wire   [10:0] trunc_ln893_fu_2295_p1;
reg   [10:0] trunc_ln893_reg_4770;
wire   [63:0] bitcast_ln734_fu_2396_p1;
wire   [0:0] icmp_ln1506_fu_2411_p2;
reg   [0:0] icmp_ln1506_reg_4780;
wire   [0:0] icmp_ln1506_1_fu_2417_p2;
reg   [0:0] icmp_ln1506_1_reg_4785;
wire    ap_CS_fsm_state16;
wire   [31:0] temp_output_0_V_q0;
reg   [31:0] temp_output_0_V_load_reg_4798;
wire    ap_CS_fsm_state17;
wire   [31:0] temp_output_0_V_q1;
reg   [31:0] temp_output_0_V_load_1_reg_4803;
reg   [31:0] temp_output_0_V_load_2_reg_4818;
wire    ap_CS_fsm_state18;
reg   [31:0] temp_output_0_V_load_3_reg_4823;
reg   [31:0] temp_output_0_V_load_4_reg_4838;
wire    ap_CS_fsm_state19;
reg   [31:0] temp_output_0_V_load_5_reg_4843;
reg   [31:0] temp_output_0_V_load_6_reg_4858;
wire    ap_CS_fsm_state20;
reg   [31:0] temp_output_0_V_load_7_reg_4863;
reg   [31:0] temp_output_0_V_load_8_reg_4878;
wire    ap_CS_fsm_state21;
reg   [31:0] temp_output_0_V_load_9_reg_4883;
reg   [31:0] temp_output_0_V_load_10_reg_4898;
wire    ap_CS_fsm_state22;
reg   [31:0] temp_output_0_V_load_11_reg_4903;
reg   [31:0] temp_output_0_V_load_12_reg_4918;
wire    ap_CS_fsm_state23;
reg   [31:0] temp_output_0_V_load_13_reg_4923;
reg   [31:0] temp_output_0_V_load_14_reg_4938;
wire    ap_CS_fsm_state24;
reg   [31:0] temp_output_0_V_load_15_reg_4943;
reg   [31:0] temp_output_0_V_load_16_reg_4958;
wire    ap_CS_fsm_state25;
reg   [31:0] temp_output_0_V_load_17_reg_4963;
reg   [31:0] temp_output_0_V_load_18_reg_4978;
wire    ap_CS_fsm_state26;
reg   [31:0] temp_output_0_V_load_19_reg_4983;
reg   [31:0] temp_output_0_V_load_20_reg_4998;
wire    ap_CS_fsm_state27;
reg   [31:0] temp_output_0_V_load_21_reg_5003;
reg   [31:0] temp_output_0_V_load_22_reg_5018;
wire    ap_CS_fsm_state28;
reg   [31:0] temp_output_0_V_load_23_reg_5023;
reg   [31:0] temp_output_0_V_load_24_reg_5038;
wire    ap_CS_fsm_state29;
reg   [31:0] temp_output_0_V_load_25_reg_5043;
reg   [31:0] temp_output_0_V_load_26_reg_5058;
wire    ap_CS_fsm_state30;
reg   [31:0] temp_output_0_V_load_27_reg_5063;
reg   [31:0] temp_output_0_V_load_28_reg_5078;
wire    ap_CS_fsm_state31;
reg   [31:0] temp_output_0_V_load_29_reg_5083;
wire  signed [39:0] sext_ln708_fu_2433_p1;
reg  signed [39:0] sext_ln708_reg_5098;
wire    ap_CS_fsm_state32;
wire  signed [39:0] sext_ln1192_fu_2436_p1;
reg  signed [39:0] sext_ln1192_reg_5103;
wire  signed [39:0] sext_ln1192_1_fu_2439_p1;
reg  signed [39:0] sext_ln1192_1_reg_5108;
wire  signed [39:0] sext_ln1192_2_fu_2442_p1;
reg  signed [39:0] sext_ln1192_2_reg_5113;
wire  signed [39:0] sext_ln1192_3_fu_2445_p1;
reg  signed [39:0] sext_ln1192_3_reg_5118;
wire  signed [39:0] sext_ln1192_4_fu_2448_p1;
reg  signed [39:0] sext_ln1192_4_reg_5123;
wire  signed [39:0] sext_ln1192_5_fu_2451_p1;
reg  signed [39:0] sext_ln1192_5_reg_5128;
wire  signed [39:0] sext_ln1192_6_fu_2454_p1;
reg  signed [39:0] sext_ln1192_6_reg_5133;
wire  signed [39:0] sext_ln1192_7_fu_2457_p1;
reg  signed [39:0] sext_ln1192_7_reg_5138;
wire  signed [39:0] sext_ln1192_8_fu_2460_p1;
reg  signed [39:0] sext_ln1192_8_reg_5143;
wire  signed [39:0] sext_ln1192_9_fu_2463_p1;
reg  signed [39:0] sext_ln1192_9_reg_5148;
wire  signed [39:0] sext_ln1192_10_fu_2466_p1;
reg  signed [39:0] sext_ln1192_10_reg_5153;
wire  signed [39:0] sext_ln1192_11_fu_2469_p1;
reg  signed [39:0] sext_ln1192_11_reg_5158;
wire  signed [39:0] sext_ln1192_12_fu_2472_p1;
reg  signed [39:0] sext_ln1192_12_reg_5163;
wire  signed [39:0] sext_ln1192_13_fu_2475_p1;
reg  signed [39:0] sext_ln1192_13_reg_5168;
wire  signed [39:0] sext_ln1192_14_fu_2478_p1;
reg  signed [39:0] sext_ln1192_14_reg_5173;
wire  signed [39:0] sext_ln1192_15_fu_2481_p1;
reg  signed [39:0] sext_ln1192_15_reg_5178;
wire  signed [39:0] sext_ln1192_16_fu_2484_p1;
reg  signed [39:0] sext_ln1192_16_reg_5183;
wire  signed [39:0] sext_ln1192_17_fu_2487_p1;
reg  signed [39:0] sext_ln1192_17_reg_5188;
wire  signed [39:0] sext_ln1192_18_fu_2490_p1;
reg  signed [39:0] sext_ln1192_18_reg_5193;
wire  signed [39:0] sext_ln1192_19_fu_2493_p1;
reg  signed [39:0] sext_ln1192_19_reg_5198;
wire  signed [39:0] sext_ln1192_20_fu_2496_p1;
reg  signed [39:0] sext_ln1192_20_reg_5203;
wire  signed [39:0] sext_ln1192_21_fu_2499_p1;
reg  signed [39:0] sext_ln1192_21_reg_5208;
wire  signed [39:0] sext_ln1192_22_fu_2502_p1;
reg  signed [39:0] sext_ln1192_22_reg_5213;
wire  signed [39:0] sext_ln1192_23_fu_2505_p1;
reg  signed [39:0] sext_ln1192_23_reg_5218;
wire  signed [39:0] sext_ln1192_24_fu_2508_p1;
reg  signed [39:0] sext_ln1192_24_reg_5223;
wire  signed [39:0] sext_ln1192_25_fu_2511_p1;
reg  signed [39:0] sext_ln1192_25_reg_5228;
wire  signed [39:0] sext_ln1192_26_fu_2514_p1;
reg  signed [39:0] sext_ln1192_26_reg_5233;
wire  signed [39:0] sext_ln1192_27_fu_2517_p1;
reg  signed [39:0] sext_ln1192_27_reg_5238;
wire  signed [39:0] sext_ln1192_28_fu_2520_p1;
reg  signed [39:0] sext_ln1192_28_reg_5243;
wire  signed [39:0] sext_ln1192_29_fu_2523_p1;
reg  signed [39:0] sext_ln1192_29_reg_5248;
wire  signed [39:0] sext_ln1192_30_fu_2527_p1;
reg  signed [39:0] sext_ln1192_30_reg_5253;
wire   [4:0] add_ln40_fu_2531_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state33_pp3_stage0_iter0;
wire    ap_block_state34_pp3_stage0_iter1;
wire    ap_block_state35_pp3_stage0_iter2;
wire    ap_block_state36_pp3_stage0_iter3;
wire    ap_block_state37_pp3_stage0_iter4;
wire    ap_block_state38_pp3_stage0_iter5;
wire    ap_block_state39_pp3_stage0_iter6;
wire    ap_block_state40_pp3_stage0_iter7;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln40_fu_2537_p2;
reg   [0:0] icmp_ln40_reg_5263;
reg   [0:0] icmp_ln40_reg_5263_pp3_iter1_reg;
reg   [0:0] icmp_ln40_reg_5263_pp3_iter2_reg;
reg   [0:0] icmp_ln40_reg_5263_pp3_iter3_reg;
reg   [0:0] icmp_ln40_reg_5263_pp3_iter4_reg;
reg   [0:0] icmp_ln40_reg_5263_pp3_iter5_reg;
reg   [0:0] icmp_ln40_reg_5263_pp3_iter6_reg;
wire   [63:0] j_1_cast_fu_2543_p1;
reg   [63:0] j_1_cast_reg_5267;
reg   [63:0] j_1_cast_reg_5267_pp3_iter1_reg;
reg   [63:0] j_1_cast_reg_5267_pp3_iter2_reg;
reg   [63:0] j_1_cast_reg_5267_pp3_iter3_reg;
reg   [63:0] j_1_cast_reg_5267_pp3_iter4_reg;
reg   [63:0] j_1_cast_reg_5267_pp3_iter5_reg;
reg   [63:0] j_1_cast_reg_5267_pp3_iter6_reg;
wire   [39:0] mul_ln1192_4_fu_2632_p2;
reg   [39:0] mul_ln1192_4_reg_5328;
reg   [31:0] tmp_10_reg_5333;
wire   [39:0] mul_ln1192_5_fu_2651_p2;
reg   [39:0] mul_ln1192_5_reg_5338;
wire   [39:0] mul_ln1192_6_fu_2660_p2;
reg   [39:0] mul_ln1192_6_reg_5343;
wire   [39:0] mul_ln1192_9_fu_2793_p2;
reg   [39:0] mul_ln1192_9_reg_5373;
reg   [31:0] tmp_15_reg_5378;
wire   [39:0] mul_ln1192_10_fu_2812_p2;
reg   [39:0] mul_ln1192_10_reg_5383;
wire   [39:0] mul_ln1192_11_fu_2821_p2;
reg   [39:0] mul_ln1192_11_reg_5388;
wire   [39:0] mul_ln1192_14_fu_2954_p2;
reg   [39:0] mul_ln1192_14_reg_5418;
reg   [31:0] tmp_20_reg_5423;
wire   [39:0] mul_ln1192_15_fu_2973_p2;
reg   [39:0] mul_ln1192_15_reg_5428;
wire   [39:0] mul_ln1192_16_fu_2982_p2;
reg   [39:0] mul_ln1192_16_reg_5433;
wire   [39:0] mul_ln1192_19_fu_3115_p2;
reg   [39:0] mul_ln1192_19_reg_5463;
reg   [31:0] tmp_25_reg_5468;
wire   [39:0] mul_ln1192_20_fu_3134_p2;
reg   [39:0] mul_ln1192_20_reg_5473;
wire   [39:0] mul_ln1192_21_fu_3143_p2;
reg   [39:0] mul_ln1192_21_reg_5478;
wire   [39:0] mul_ln1192_24_fu_3276_p2;
reg   [39:0] mul_ln1192_24_reg_5508;
reg   [31:0] tmp_30_reg_5513;
wire   [39:0] mul_ln1192_25_fu_3295_p2;
reg   [39:0] mul_ln1192_25_reg_5518;
wire   [39:0] mul_ln1192_26_fu_3304_p2;
reg   [39:0] mul_ln1192_26_reg_5523;
wire   [39:0] mul_ln1192_29_fu_3437_p2;
reg   [39:0] mul_ln1192_29_reg_5553;
reg   [31:0] tmp_35_reg_5558;
wire   [39:0] mul_ln1192_30_fu_3456_p2;
reg   [39:0] mul_ln1192_30_reg_5563;
reg  signed [8:0] layer2_weights_V_30_load_reg_5568;
wire   [4:0] add_ln92_fu_3572_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state42_pp4_stage0_iter0;
wire    ap_block_state43_pp4_stage0_iter1;
wire    ap_block_state44_pp4_stage0_iter2;
wire    ap_block_state45_pp4_stage0_iter3;
wire    ap_block_pp4_stage0_11001;
wire   [0:0] icmp_ln92_fu_3578_p2;
reg   [3:0] temp_output2_0_V_addr_2_reg_5587;
reg   [3:0] temp_output2_0_V_addr_2_reg_5587_pp4_iter1_reg;
reg   [3:0] temp_output2_0_V_addr_2_reg_5587_pp4_iter2_reg;
wire   [0:0] icmp_ln885_1_fu_3589_p2;
reg   [0:0] icmp_ln885_1_reg_5593;
reg   [0:0] icmp_ln885_1_reg_5593_pp4_iter2_reg;
wire   [0:0] p_Result_14_fu_3595_p3;
reg   [0:0] p_Result_14_reg_5597;
wire   [31:0] tmp_V_5_fu_3609_p3;
reg   [31:0] tmp_V_5_reg_5602;
wire   [0:0] icmp_ln908_1_fu_3729_p2;
reg   [0:0] icmp_ln908_1_reg_5607;
wire   [31:0] add_ln908_1_fu_3743_p2;
reg   [31:0] add_ln908_1_reg_5612;
wire   [31:0] sub_ln909_1_fu_3755_p2;
reg   [31:0] sub_ln909_1_reg_5617;
wire   [0:0] select_ln908_2_fu_3761_p3;
reg   [0:0] select_ln908_2_reg_5622;
wire   [10:0] trunc_ln893_1_fu_3769_p1;
reg   [10:0] trunc_ln893_1_reg_5627;
wire   [63:0] bitcast_ln734_1_fu_3870_p1;
wire   [0:0] icmp_ln1506_2_fu_3885_p2;
reg   [0:0] icmp_ln1506_2_reg_5637;
wire   [0:0] icmp_ln1506_3_fu_3891_p2;
reg   [0:0] icmp_ln1506_3_reg_5642;
wire    ap_CS_fsm_state46;
wire   [31:0] temp_output2_0_V_q0;
reg   [31:0] temp_output2_0_V_load_reg_5655;
wire    ap_CS_fsm_state47;
wire   [31:0] temp_output2_0_V_q1;
reg   [31:0] temp_output2_0_V_load_1_reg_5660;
reg   [31:0] temp_output2_0_V_load_2_reg_5675;
wire    ap_CS_fsm_state48;
reg   [31:0] temp_output2_0_V_load_3_reg_5680;
reg   [31:0] temp_output2_0_V_load_4_reg_5695;
wire    ap_CS_fsm_state49;
reg   [31:0] temp_output2_0_V_load_5_reg_5700;
reg   [31:0] temp_output2_0_V_load_6_reg_5715;
wire    ap_CS_fsm_state50;
reg   [31:0] temp_output2_0_V_load_7_reg_5720;
reg   [31:0] temp_output2_0_V_load_8_reg_5735;
wire    ap_CS_fsm_state51;
reg   [31:0] temp_output2_0_V_load_9_reg_5740;
reg   [31:0] temp_output2_0_V_load_10_reg_5755;
wire    ap_CS_fsm_state52;
reg   [31:0] temp_output2_0_V_load_11_reg_5760;
reg   [31:0] temp_output2_0_V_load_12_reg_5775;
wire    ap_CS_fsm_state53;
reg   [31:0] temp_output2_0_V_load_13_reg_5780;
wire  signed [39:0] sext_ln708_2_fu_3907_p1;
reg  signed [39:0] sext_ln708_2_reg_5795;
wire    ap_CS_fsm_state54;
wire  signed [39:0] sext_ln1192_66_fu_3910_p1;
reg  signed [39:0] sext_ln1192_66_reg_5800;
wire  signed [39:0] sext_ln1192_67_fu_3913_p1;
reg  signed [39:0] sext_ln1192_67_reg_5805;
wire  signed [39:0] sext_ln1192_68_fu_3916_p1;
reg  signed [39:0] sext_ln1192_68_reg_5810;
wire  signed [39:0] sext_ln1192_69_fu_3919_p1;
reg  signed [39:0] sext_ln1192_69_reg_5815;
wire  signed [39:0] sext_ln1192_70_fu_3922_p1;
reg  signed [39:0] sext_ln1192_70_reg_5820;
wire  signed [39:0] sext_ln1192_71_fu_3925_p1;
reg  signed [39:0] sext_ln1192_71_reg_5825;
wire  signed [39:0] sext_ln1192_72_fu_3928_p1;
reg  signed [39:0] sext_ln1192_72_reg_5830;
wire  signed [39:0] sext_ln1192_73_fu_3931_p1;
reg  signed [39:0] sext_ln1192_73_reg_5835;
wire  signed [39:0] sext_ln1192_74_fu_3934_p1;
reg  signed [39:0] sext_ln1192_74_reg_5840;
wire  signed [39:0] sext_ln1192_75_fu_3937_p1;
reg  signed [39:0] sext_ln1192_75_reg_5845;
wire  signed [39:0] sext_ln1192_76_fu_3940_p1;
reg  signed [39:0] sext_ln1192_76_reg_5850;
wire  signed [39:0] sext_ln1192_77_fu_3943_p1;
reg  signed [39:0] sext_ln1192_77_reg_5855;
wire  signed [39:0] sext_ln1192_78_fu_3946_p1;
reg  signed [39:0] sext_ln1192_78_reg_5860;
wire  signed [39:0] sext_ln1192_79_fu_3949_p1;
reg  signed [39:0] sext_ln1192_79_reg_5865;
wire  signed [39:0] sext_ln1192_80_fu_3953_p1;
reg  signed [39:0] sext_ln1192_80_reg_5870;
wire   [3:0] add_ln59_fu_3957_p2;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
wire    ap_block_state55_pp5_stage0_iter0;
wire    ap_block_state56_pp5_stage0_iter1;
wire    ap_block_state57_pp5_stage0_iter2;
wire    ap_block_state58_pp5_stage0_iter3;
wire    ap_block_state59_pp5_stage0_iter4;
wire    ap_block_pp5_stage0_11001;
wire   [0:0] icmp_ln59_fu_3963_p2;
reg   [0:0] icmp_ln59_reg_5880;
reg   [0:0] icmp_ln59_reg_5880_pp5_iter1_reg;
reg   [0:0] icmp_ln59_reg_5880_pp5_iter2_reg;
reg   [0:0] icmp_ln59_reg_5880_pp5_iter3_reg;
wire   [63:0] j_2_cast_fu_3969_p1;
reg   [63:0] j_2_cast_reg_5884;
reg   [63:0] j_2_cast_reg_5884_pp5_iter1_reg;
reg   [63:0] j_2_cast_reg_5884_pp5_iter2_reg;
reg   [63:0] j_2_cast_reg_5884_pp5_iter3_reg;
wire   [39:0] mul_ln1192_35_fu_4058_p2;
reg   [39:0] mul_ln1192_35_reg_5929;
reg   [31:0] tmp_41_reg_5934;
wire   [39:0] mul_ln1192_36_fu_4077_p2;
reg   [39:0] mul_ln1192_36_reg_5939;
wire   [39:0] mul_ln1192_37_fu_4086_p2;
reg   [39:0] mul_ln1192_37_reg_5944;
wire   [39:0] mul_ln1192_40_fu_4219_p2;
reg   [39:0] mul_ln1192_40_reg_5974;
reg   [31:0] tmp_46_reg_5979;
wire   [39:0] mul_ln1192_41_fu_4238_p2;
reg   [39:0] mul_ln1192_41_reg_5984;
wire   [39:0] mul_ln1192_42_fu_4247_p2;
reg   [39:0] mul_ln1192_42_reg_5989;
wire   [39:0] mul_ln1192_45_fu_4380_p2;
reg   [39:0] mul_ln1192_45_reg_6014;
reg   [31:0] tmp_51_reg_6019;
reg  signed [9:0] layer3_weights_V_14_load_reg_6024;
wire   [3:0] add_ln109_fu_4483_p2;
reg   [3:0] add_ln109_reg_6034;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter0;
wire    ap_block_state61_pp6_stage0_iter0;
wire    ap_block_state62_pp6_stage0_iter1;
wire    ap_block_pp6_stage0_11001;
wire   [0:0] icmp_ln109_fu_4489_p2;
reg   [0:0] icmp_ln109_reg_6039;
wire   [31:0] max_val_V_1_fu_4506_p3;
reg    ap_enable_reg_pp6_iter1;
wire   [31:0] max_idx_V_1_fu_4526_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter1_state9;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state12;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state33;
reg    ap_enable_reg_pp3_iter1;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter6;
reg    ap_enable_reg_pp3_iter7;
wire    ap_CS_fsm_state41;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state42;
reg    ap_enable_reg_pp4_iter1;
reg    ap_enable_reg_pp4_iter2;
reg    ap_enable_reg_pp4_iter3;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state55;
reg    ap_enable_reg_pp5_iter1;
reg    ap_enable_reg_pp5_iter2;
reg    ap_enable_reg_pp5_iter3;
reg    ap_enable_reg_pp5_iter4;
wire    ap_CS_fsm_state60;
wire    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_flush_enable;
reg   [6:0] fp_input_img_V_address0;
reg    fp_input_img_V_ce0;
reg    fp_input_img_V_we0;
reg   [31:0] fp_input_img_V_d0;
wire   [6:0] fp_input_img_V_address1;
reg    fp_input_img_V_ce1;
wire  signed [31:0] fp_input_img_V_q1;
reg   [4:0] temp_output_0_V_address0;
reg    temp_output_0_V_ce0;
reg    temp_output_0_V_we0;
reg   [31:0] temp_output_0_V_d0;
reg   [4:0] temp_output_0_V_address1;
reg    temp_output_0_V_ce1;
reg   [3:0] temp_output2_0_V_address0;
reg    temp_output2_0_V_ce0;
reg    temp_output2_0_V_we0;
reg   [31:0] temp_output2_0_V_d0;
reg   [3:0] temp_output2_0_V_address1;
reg    temp_output2_0_V_ce1;
reg   [3:0] temp_output3_0_V_address0;
reg    temp_output3_0_V_ce0;
reg    temp_output3_0_V_we0;
reg   [31:0] temp_output3_0_V_d0;
wire   [31:0] temp_output3_0_V_q0;
reg   [5:0] j_reg_1525;
wire    ap_CS_fsm_state11;
wire    ap_block_pp1_stage0;
reg   [3:0] ap_phi_mux_i_3_phi_fu_1609_p4;
wire    ap_block_pp6_stage0;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1118_fu_1991_p1;
wire   [63:0] k_cast58_fu_1968_p1;
wire   [63:0] zext_ln23_fu_2002_p1;
wire   [63:0] zext_ln1118_1_fu_2033_p1;
wire   [63:0] i_1_cast_fu_2110_p1;
wire    ap_block_pp2_stage0;
wire    ap_block_pp3_stage0;
wire   [63:0] i_2_cast_fu_3584_p1;
wire    ap_block_pp4_stage0;
wire    ap_block_pp5_stage0;
wire   [63:0] trunc_ln731_cast59_fu_4495_p1;
wire   [31:0] select_ln571_4_fu_1927_p3;
wire   [0:0] and_ln1506_fu_2427_p2;
wire   [0:0] and_ln1506_1_fu_3901_p2;
wire   [31:0] grp_fu_1640_p0;
reg   [63:0] grp_fu_1643_p0;
wire   [63:0] grp_fu_1640_p1;
wire   [63:0] ireg_fu_1670_p1;
wire   [10:0] exp_tmp_fu_1686_p4;
wire   [62:0] trunc_ln555_fu_1674_p1;
wire   [11:0] zext_ln455_fu_1696_p1;
wire   [52:0] p_Result_9_fu_1716_p3;
wire   [53:0] zext_ln569_fu_1723_p1;
wire   [53:0] man_V_1_fu_1727_p2;
wire   [0:0] icmp_ln581_fu_1740_p2;
wire   [11:0] add_ln581_fu_1745_p2;
wire   [11:0] sub_ln581_fu_1750_p2;
wire  signed [11:0] sh_amt_fu_1755_p3;
wire   [53:0] man_V_2_fu_1733_p3;
wire   [6:0] tmp_5_fu_1776_p4;
wire  signed [31:0] sext_ln581_fu_1763_p1;
wire   [53:0] zext_ln586_fu_1792_p1;
wire   [53:0] ashr_ln586_fu_1796_p2;
wire   [0:0] tmp_56_fu_1806_p3;
wire   [31:0] trunc_ln583_fu_1772_p1;
wire   [0:0] icmp_ln582_fu_1767_p2;
wire   [0:0] xor_ln571_fu_1827_p2;
wire   [0:0] or_ln582_fu_1838_p2;
wire   [0:0] xor_ln582_fu_1843_p2;
wire   [0:0] and_ln581_fu_1849_p2;
wire   [0:0] icmp_ln585_fu_1855_p2;
wire   [0:0] or_ln581_fu_1867_p2;
wire   [0:0] icmp_ln603_fu_1786_p2;
wire   [0:0] xor_ln581_fu_1873_p2;
wire   [31:0] shl_ln604_fu_1821_p2;
wire   [0:0] and_ln603_fu_1879_p2;
wire   [0:0] and_ln585_fu_1861_p2;
wire   [31:0] select_ln588_fu_1813_p3;
wire   [31:0] trunc_ln586_fu_1802_p1;
wire   [0:0] and_ln582_fu_1832_p2;
wire   [0:0] or_ln571_fu_1892_p2;
wire   [31:0] select_ln571_fu_1885_p3;
wire   [31:0] select_ln571_1_fu_1897_p3;
wire   [0:0] or_ln571_1_fu_1921_p2;
wire   [31:0] select_ln571_3_fu_1913_p3;
wire   [31:0] select_ln571_2_fu_1905_p3;
wire   [5:0] tmp_6_fu_1973_p4;
wire   [11:0] tmp_7_fu_1983_p3;
wire   [11:0] tmp_8_fu_2021_p3;
wire   [11:0] add_ln1118_fu_2028_p2;
wire   [39:0] lhs_1_fu_2038_p3;
wire   [39:0] ret_V_fu_2046_p2;
wire   [31:0] tmp_9_fu_2064_p4;
wire   [39:0] lhs_2_fu_2074_p3;
wire   [39:0] mul_ln1192_1_fu_2058_p2;
wire   [39:0] ret_V_1_fu_2082_p2;
wire   [31:0] tmp_V_fu_2129_p2;
reg   [31:0] p_Result_11_fu_2143_p4;
reg   [31:0] l_fu_2153_p3;
wire   [31:0] sub_ln894_fu_2161_p2;
wire   [31:0] lsb_index_fu_2167_p2;
wire   [30:0] tmp_58_fu_2173_p4;
wire   [5:0] trunc_ln897_fu_2189_p1;
wire   [5:0] sub_ln897_fu_2193_p2;
wire   [31:0] zext_ln897_fu_2199_p1;
wire   [31:0] lshr_ln897_fu_2203_p2;
wire   [31:0] shl_ln899_fu_2209_p2;
wire   [31:0] or_ln899_2_fu_2215_p2;
wire   [31:0] and_ln899_fu_2221_p2;
wire   [0:0] tmp_59_fu_2233_p3;
wire   [0:0] icmp_ln896_fu_2183_p2;
wire   [0:0] icmp_ln899_fu_2227_p2;
wire   [0:0] p_Result_12_fu_2247_p3;
wire   [0:0] xor_ln899_fu_2241_p2;
wire   [0:0] select_ln896_fu_2261_p3;
wire   [0:0] and_ln899_1_fu_2275_p2;
wire   [63:0] zext_ln907_fu_2299_p1;
wire   [63:0] zext_ln908_fu_2302_p1;
wire   [63:0] zext_ln909_fu_2311_p1;
wire   [63:0] lshr_ln908_fu_2305_p2;
wire   [63:0] shl_ln909_fu_2314_p2;
wire   [63:0] m_2_fu_2320_p3;
wire   [63:0] zext_ln911_fu_2327_p1;
wire   [63:0] m_3_fu_2330_p2;
wire   [62:0] m_8_fu_2336_p4;
wire   [0:0] p_Result_s_fu_2350_p3;
wire   [10:0] sub_ln915_fu_2366_p2;
wire   [10:0] select_ln893_fu_2358_p3;
wire   [10:0] add_ln915_fu_2371_p2;
wire   [63:0] zext_ln912_fu_2346_p1;
wire   [11:0] tmp_1_fu_2377_p3;
wire   [63:0] p_Result_13_fu_2384_p5;
wire   [51:0] trunc_ln6_fu_2401_p4;
wire   [0:0] or_ln1506_fu_2423_p2;
wire   [0:0] grp_fu_1643_p2;
wire  signed [31:0] mul_ln708_fu_2557_p1;
wire  signed [31:0] mul_ln1192_2_fu_2566_p1;
wire   [39:0] mul_ln708_fu_2557_p2;
wire   [31:0] tmp_s_fu_2571_p4;
wire   [39:0] shl_ln_fu_2581_p3;
wire   [39:0] mul_ln1192_2_fu_2566_p2;
wire  signed [31:0] mul_ln1192_3_fu_2599_p1;
wire   [39:0] add_ln1192_fu_2589_p2;
wire   [31:0] tmp_4_fu_2604_p4;
wire   [39:0] shl_ln728_1_fu_2614_p3;
wire   [39:0] mul_ln1192_3_fu_2599_p2;
wire  signed [31:0] mul_ln1192_4_fu_2632_p1;
wire   [39:0] add_ln1192_1_fu_2622_p2;
wire  signed [31:0] mul_ln1192_5_fu_2651_p1;
wire  signed [31:0] mul_ln1192_6_fu_2660_p1;
wire   [39:0] shl_ln728_2_fu_2665_p3;
wire   [39:0] add_ln1192_2_fu_2672_p2;
wire   [31:0] tmp_11_fu_2677_p4;
wire   [39:0] shl_ln728_3_fu_2687_p3;
wire   [39:0] add_ln1192_3_fu_2695_p2;
wire   [31:0] tmp_12_fu_2700_p4;
wire   [39:0] shl_ln728_4_fu_2710_p3;
wire  signed [31:0] mul_ln1192_7_fu_2727_p1;
wire   [39:0] add_ln1192_4_fu_2718_p2;
wire   [31:0] tmp_13_fu_2732_p4;
wire   [39:0] shl_ln728_5_fu_2742_p3;
wire   [39:0] mul_ln1192_7_fu_2727_p2;
wire  signed [31:0] mul_ln1192_8_fu_2760_p1;
wire   [39:0] add_ln1192_5_fu_2750_p2;
wire   [31:0] tmp_14_fu_2765_p4;
wire   [39:0] shl_ln728_6_fu_2775_p3;
wire   [39:0] mul_ln1192_8_fu_2760_p2;
wire  signed [31:0] mul_ln1192_9_fu_2793_p1;
wire   [39:0] add_ln1192_6_fu_2783_p2;
wire  signed [31:0] mul_ln1192_10_fu_2812_p1;
wire  signed [31:0] mul_ln1192_11_fu_2821_p1;
wire   [39:0] shl_ln728_7_fu_2826_p3;
wire   [39:0] add_ln1192_7_fu_2833_p2;
wire   [31:0] tmp_16_fu_2838_p4;
wire   [39:0] shl_ln728_8_fu_2848_p3;
wire   [39:0] add_ln1192_8_fu_2856_p2;
wire   [31:0] tmp_17_fu_2861_p4;
wire   [39:0] shl_ln728_9_fu_2871_p3;
wire  signed [31:0] mul_ln1192_12_fu_2888_p1;
wire   [39:0] add_ln1192_9_fu_2879_p2;
wire   [31:0] tmp_18_fu_2893_p4;
wire   [39:0] shl_ln728_s_fu_2903_p3;
wire   [39:0] mul_ln1192_12_fu_2888_p2;
wire  signed [31:0] mul_ln1192_13_fu_2921_p1;
wire   [39:0] add_ln1192_10_fu_2911_p2;
wire   [31:0] tmp_19_fu_2926_p4;
wire   [39:0] shl_ln728_10_fu_2936_p3;
wire   [39:0] mul_ln1192_13_fu_2921_p2;
wire  signed [31:0] mul_ln1192_14_fu_2954_p1;
wire   [39:0] add_ln1192_11_fu_2944_p2;
wire  signed [31:0] mul_ln1192_15_fu_2973_p1;
wire  signed [31:0] mul_ln1192_16_fu_2982_p1;
wire   [39:0] shl_ln728_11_fu_2987_p3;
wire   [39:0] add_ln1192_12_fu_2994_p2;
wire   [31:0] tmp_21_fu_2999_p4;
wire   [39:0] shl_ln728_12_fu_3009_p3;
wire   [39:0] add_ln1192_13_fu_3017_p2;
wire   [31:0] tmp_22_fu_3022_p4;
wire   [39:0] shl_ln728_13_fu_3032_p3;
wire  signed [31:0] mul_ln1192_17_fu_3049_p1;
wire   [39:0] add_ln1192_14_fu_3040_p2;
wire   [31:0] tmp_23_fu_3054_p4;
wire   [39:0] shl_ln728_14_fu_3064_p3;
wire   [39:0] mul_ln1192_17_fu_3049_p2;
wire  signed [31:0] mul_ln1192_18_fu_3082_p1;
wire   [39:0] add_ln1192_15_fu_3072_p2;
wire   [31:0] tmp_24_fu_3087_p4;
wire   [39:0] shl_ln728_15_fu_3097_p3;
wire   [39:0] mul_ln1192_18_fu_3082_p2;
wire  signed [31:0] mul_ln1192_19_fu_3115_p1;
wire   [39:0] add_ln1192_16_fu_3105_p2;
wire  signed [31:0] mul_ln1192_20_fu_3134_p1;
wire  signed [31:0] mul_ln1192_21_fu_3143_p1;
wire   [39:0] shl_ln728_16_fu_3148_p3;
wire   [39:0] add_ln1192_17_fu_3155_p2;
wire   [31:0] tmp_26_fu_3160_p4;
wire   [39:0] shl_ln728_17_fu_3170_p3;
wire   [39:0] add_ln1192_18_fu_3178_p2;
wire   [31:0] tmp_27_fu_3183_p4;
wire   [39:0] shl_ln728_18_fu_3193_p3;
wire  signed [31:0] mul_ln1192_22_fu_3210_p1;
wire   [39:0] add_ln1192_19_fu_3201_p2;
wire   [31:0] tmp_28_fu_3215_p4;
wire   [39:0] shl_ln728_19_fu_3225_p3;
wire   [39:0] mul_ln1192_22_fu_3210_p2;
wire  signed [31:0] mul_ln1192_23_fu_3243_p1;
wire   [39:0] add_ln1192_20_fu_3233_p2;
wire   [31:0] tmp_29_fu_3248_p4;
wire   [39:0] shl_ln728_20_fu_3258_p3;
wire   [39:0] mul_ln1192_23_fu_3243_p2;
wire  signed [31:0] mul_ln1192_24_fu_3276_p1;
wire   [39:0] add_ln1192_21_fu_3266_p2;
wire  signed [31:0] mul_ln1192_25_fu_3295_p1;
wire  signed [31:0] mul_ln1192_26_fu_3304_p1;
wire   [39:0] shl_ln728_21_fu_3309_p3;
wire   [39:0] add_ln1192_22_fu_3316_p2;
wire   [31:0] tmp_31_fu_3321_p4;
wire   [39:0] shl_ln728_22_fu_3331_p3;
wire   [39:0] add_ln1192_23_fu_3339_p2;
wire   [31:0] tmp_32_fu_3344_p4;
wire   [39:0] shl_ln728_23_fu_3354_p3;
wire  signed [31:0] mul_ln1192_27_fu_3371_p1;
wire   [39:0] add_ln1192_24_fu_3362_p2;
wire   [31:0] tmp_33_fu_3376_p4;
wire   [39:0] shl_ln728_24_fu_3386_p3;
wire   [39:0] mul_ln1192_27_fu_3371_p2;
wire  signed [31:0] mul_ln1192_28_fu_3404_p1;
wire   [39:0] add_ln1192_25_fu_3394_p2;
wire   [31:0] tmp_34_fu_3409_p4;
wire   [39:0] shl_ln728_25_fu_3419_p3;
wire   [39:0] mul_ln1192_28_fu_3404_p2;
wire  signed [31:0] mul_ln1192_29_fu_3437_p1;
wire   [39:0] add_ln1192_26_fu_3427_p2;
wire  signed [31:0] mul_ln1192_30_fu_3456_p1;
wire   [39:0] shl_ln728_26_fu_3461_p3;
wire   [39:0] add_ln1192_27_fu_3468_p2;
wire   [31:0] tmp_36_fu_3473_p4;
wire   [39:0] shl_ln728_27_fu_3483_p3;
wire  signed [31:0] mul_ln1192_31_fu_3499_p1;
wire   [39:0] add_ln1192_28_fu_3491_p2;
wire   [31:0] tmp_37_fu_3504_p4;
wire   [39:0] shl_ln728_28_fu_3514_p3;
wire   [39:0] mul_ln1192_31_fu_3499_p2;
wire  signed [31:0] mul_ln1192_32_fu_3532_p1;
wire   [39:0] add_ln1192_29_fu_3522_p2;
wire   [31:0] tmp_38_fu_3537_p4;
wire   [39:0] shl_ln728_29_fu_3547_p3;
wire   [39:0] mul_ln1192_32_fu_3532_p2;
wire   [39:0] add_ln1192_30_fu_3555_p2;
wire   [31:0] tmp_V_2_fu_3603_p2;
reg   [31:0] p_Result_15_fu_3617_p4;
reg   [31:0] l_1_fu_3627_p3;
wire   [31:0] sub_ln894_1_fu_3635_p2;
wire   [31:0] lsb_index_1_fu_3641_p2;
wire   [30:0] tmp_62_fu_3647_p4;
wire   [5:0] trunc_ln897_1_fu_3663_p1;
wire   [5:0] sub_ln897_1_fu_3667_p2;
wire   [31:0] zext_ln897_1_fu_3673_p1;
wire   [31:0] lshr_ln897_1_fu_3677_p2;
wire   [31:0] shl_ln899_1_fu_3683_p2;
wire   [31:0] or_ln899_fu_3689_p2;
wire   [31:0] and_ln899_2_fu_3695_p2;
wire   [0:0] tmp_63_fu_3707_p3;
wire   [0:0] icmp_ln896_1_fu_3657_p2;
wire   [0:0] icmp_ln899_1_fu_3701_p2;
wire   [0:0] p_Result_16_fu_3721_p3;
wire   [0:0] xor_ln899_1_fu_3715_p2;
wire   [0:0] select_ln896_1_fu_3735_p3;
wire   [0:0] and_ln899_3_fu_3749_p2;
wire   [63:0] zext_ln907_1_fu_3773_p1;
wire   [63:0] zext_ln908_1_fu_3776_p1;
wire   [63:0] zext_ln909_1_fu_3785_p1;
wire   [63:0] lshr_ln908_1_fu_3779_p2;
wire   [63:0] shl_ln909_1_fu_3788_p2;
wire   [63:0] m_4_fu_3794_p3;
wire   [63:0] zext_ln911_1_fu_3801_p1;
wire   [63:0] m_5_fu_3804_p2;
wire   [62:0] m_fu_3810_p4;
wire   [0:0] p_Result_5_fu_3824_p3;
wire   [10:0] sub_ln915_1_fu_3840_p2;
wire   [10:0] select_ln893_1_fu_3832_p3;
wire   [10:0] add_ln915_1_fu_3845_p2;
wire   [63:0] zext_ln912_1_fu_3820_p1;
wire   [11:0] tmp_2_fu_3851_p3;
wire   [63:0] p_Result_17_fu_3858_p5;
wire   [51:0] trunc_ln1506_1_fu_3875_p4;
wire   [0:0] or_ln1506_1_fu_3897_p2;
wire  signed [31:0] mul_ln708_1_fu_3983_p1;
wire  signed [31:0] mul_ln1192_33_fu_3992_p1;
wire   [39:0] mul_ln708_1_fu_3983_p2;
wire   [31:0] tmp_39_fu_3997_p4;
wire   [39:0] shl_ln728_30_fu_4007_p3;
wire   [39:0] mul_ln1192_33_fu_3992_p2;
wire  signed [31:0] mul_ln1192_34_fu_4025_p1;
wire   [39:0] add_ln1192_33_fu_4015_p2;
wire   [31:0] tmp_40_fu_4030_p4;
wire   [39:0] shl_ln728_31_fu_4040_p3;
wire   [39:0] mul_ln1192_34_fu_4025_p2;
wire  signed [31:0] mul_ln1192_35_fu_4058_p1;
wire   [39:0] add_ln1192_34_fu_4048_p2;
wire  signed [31:0] mul_ln1192_36_fu_4077_p1;
wire  signed [31:0] mul_ln1192_37_fu_4086_p1;
wire   [39:0] shl_ln728_32_fu_4091_p3;
wire   [39:0] add_ln1192_35_fu_4098_p2;
wire   [31:0] tmp_42_fu_4103_p4;
wire   [39:0] shl_ln728_33_fu_4113_p3;
wire   [39:0] add_ln1192_36_fu_4121_p2;
wire   [31:0] tmp_43_fu_4126_p4;
wire   [39:0] shl_ln728_34_fu_4136_p3;
wire  signed [31:0] mul_ln1192_38_fu_4153_p1;
wire   [39:0] add_ln1192_37_fu_4144_p2;
wire   [31:0] tmp_44_fu_4158_p4;
wire   [39:0] shl_ln728_35_fu_4168_p3;
wire   [39:0] mul_ln1192_38_fu_4153_p2;
wire  signed [31:0] mul_ln1192_39_fu_4186_p1;
wire   [39:0] add_ln1192_38_fu_4176_p2;
wire   [31:0] tmp_45_fu_4191_p4;
wire   [39:0] shl_ln728_36_fu_4201_p3;
wire   [39:0] mul_ln1192_39_fu_4186_p2;
wire  signed [31:0] mul_ln1192_40_fu_4219_p1;
wire   [39:0] add_ln1192_39_fu_4209_p2;
wire  signed [31:0] mul_ln1192_41_fu_4238_p1;
wire  signed [31:0] mul_ln1192_42_fu_4247_p1;
wire   [39:0] shl_ln728_37_fu_4252_p3;
wire   [39:0] add_ln1192_40_fu_4259_p2;
wire   [31:0] tmp_47_fu_4264_p4;
wire   [39:0] shl_ln728_38_fu_4274_p3;
wire   [39:0] add_ln1192_41_fu_4282_p2;
wire   [31:0] tmp_48_fu_4287_p4;
wire   [39:0] shl_ln728_39_fu_4297_p3;
wire  signed [31:0] mul_ln1192_43_fu_4314_p1;
wire   [39:0] add_ln1192_42_fu_4305_p2;
wire   [31:0] tmp_49_fu_4319_p4;
wire   [39:0] shl_ln728_40_fu_4329_p3;
wire   [39:0] mul_ln1192_43_fu_4314_p2;
wire  signed [31:0] mul_ln1192_44_fu_4347_p1;
wire   [39:0] add_ln1192_43_fu_4337_p2;
wire   [31:0] tmp_50_fu_4352_p4;
wire   [39:0] shl_ln728_41_fu_4362_p3;
wire   [39:0] mul_ln1192_44_fu_4347_p2;
wire  signed [31:0] mul_ln1192_45_fu_4380_p1;
wire   [39:0] add_ln1192_44_fu_4370_p2;
wire   [39:0] shl_ln728_42_fu_4395_p3;
wire  signed [31:0] mul_ln1192_46_fu_4410_p1;
wire   [39:0] add_ln1192_45_fu_4402_p2;
wire   [31:0] tmp_52_fu_4415_p4;
wire   [39:0] shl_ln728_43_fu_4425_p3;
wire   [39:0] mul_ln1192_46_fu_4410_p2;
wire  signed [31:0] mul_ln1192_47_fu_4443_p1;
wire   [39:0] add_ln1192_46_fu_4433_p2;
wire   [31:0] tmp_53_fu_4448_p4;
wire   [39:0] shl_ln728_44_fu_4458_p3;
wire   [39:0] mul_ln1192_47_fu_4443_p2;
wire   [39:0] add_ln1192_47_fu_4466_p2;
wire   [0:0] icmp_ln1494_fu_4500_p2;
wire   [11:0] shl_ln1_fu_4514_p3;
wire   [31:0] zext_ln111_fu_4522_p1;
wire    ap_CS_fsm_state63;
wire   [7:0] trunc_ln851_fu_4552_p1;
wire   [23:0] ret_V_2_fu_4534_p4;
wire   [0:0] icmp_ln851_fu_4556_p2;
wire   [23:0] ret_V_3_fu_4562_p2;
wire   [0:0] p_Result_7_fu_4544_p3;
wire   [23:0] select_ln850_fu_4568_p3;
wire   [23:0] ret_V_5_fu_4576_p3;
wire    ap_block_pp2_stage0_00001;
wire    ap_block_pp4_stage0_00001;
reg   [39:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter3 = 1'b0;
#0 ap_enable_reg_pp5_iter4 = 1'b0;
end

nn_inference_weights_layer1_weights_V #(
    .DataWidth( 12 ),
    .AddressRange( 3200 ),
    .AddressWidth( 12 ))
weights_layer1_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_layer1_weights_V_address0),
    .ce0(weights_layer1_weights_V_ce0),
    .q0(weights_layer1_weights_V_q0),
    .address1(weights_layer1_weights_V_address1),
    .ce1(weights_layer1_weights_V_ce1),
    .q1(weights_layer1_weights_V_q1)
);

nn_inference_layer2_weights_V_0 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_0_address0),
    .ce0(layer2_weights_V_0_ce0),
    .q0(layer2_weights_V_0_q0)
);

nn_inference_layer2_weights_V_1 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_1_address0),
    .ce0(layer2_weights_V_1_ce0),
    .q0(layer2_weights_V_1_q0)
);

nn_inference_layer2_weights_V_2 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_2_address0),
    .ce0(layer2_weights_V_2_ce0),
    .q0(layer2_weights_V_2_q0)
);

nn_inference_layer2_weights_V_3 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_3_address0),
    .ce0(layer2_weights_V_3_ce0),
    .q0(layer2_weights_V_3_q0)
);

nn_inference_layer2_weights_V_4 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_4_address0),
    .ce0(layer2_weights_V_4_ce0),
    .q0(layer2_weights_V_4_q0)
);

nn_inference_layer2_weights_V_5 #(
    .DataWidth( 11 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_5_address0),
    .ce0(layer2_weights_V_5_ce0),
    .q0(layer2_weights_V_5_q0)
);

nn_inference_layer2_weights_V_6 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_6_address0),
    .ce0(layer2_weights_V_6_ce0),
    .q0(layer2_weights_V_6_q0)
);

nn_inference_layer2_weights_V_7 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_7_address0),
    .ce0(layer2_weights_V_7_ce0),
    .q0(layer2_weights_V_7_q0)
);

nn_inference_layer2_weights_V_8 #(
    .DataWidth( 11 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_8_address0),
    .ce0(layer2_weights_V_8_ce0),
    .q0(layer2_weights_V_8_q0)
);

nn_inference_layer2_weights_V_9 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_9_address0),
    .ce0(layer2_weights_V_9_ce0),
    .q0(layer2_weights_V_9_q0)
);

nn_inference_layer2_weights_V_10 #(
    .DataWidth( 11 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_10_address0),
    .ce0(layer2_weights_V_10_ce0),
    .q0(layer2_weights_V_10_q0)
);

nn_inference_layer2_weights_V_11 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_11_address0),
    .ce0(layer2_weights_V_11_ce0),
    .q0(layer2_weights_V_11_q0)
);

nn_inference_layer2_weights_V_12 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_12_address0),
    .ce0(layer2_weights_V_12_ce0),
    .q0(layer2_weights_V_12_q0)
);

nn_inference_layer2_weights_V_13 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_13_address0),
    .ce0(layer2_weights_V_13_ce0),
    .q0(layer2_weights_V_13_q0)
);

nn_inference_layer2_weights_V_14 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_14_address0),
    .ce0(layer2_weights_V_14_ce0),
    .q0(layer2_weights_V_14_q0)
);

nn_inference_layer2_weights_V_15 #(
    .DataWidth( 11 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_15_address0),
    .ce0(layer2_weights_V_15_ce0),
    .q0(layer2_weights_V_15_q0)
);

nn_inference_layer2_weights_V_16 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_16_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_16_address0),
    .ce0(layer2_weights_V_16_ce0),
    .q0(layer2_weights_V_16_q0)
);

nn_inference_layer2_weights_V_17 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_17_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_17_address0),
    .ce0(layer2_weights_V_17_ce0),
    .q0(layer2_weights_V_17_q0)
);

nn_inference_layer2_weights_V_18 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_18_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_18_address0),
    .ce0(layer2_weights_V_18_ce0),
    .q0(layer2_weights_V_18_q0)
);

nn_inference_layer2_weights_V_19 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_19_address0),
    .ce0(layer2_weights_V_19_ce0),
    .q0(layer2_weights_V_19_q0)
);

nn_inference_layer2_weights_V_20 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_20_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_20_address0),
    .ce0(layer2_weights_V_20_ce0),
    .q0(layer2_weights_V_20_q0)
);

nn_inference_layer2_weights_V_21 #(
    .DataWidth( 11 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_21_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_21_address0),
    .ce0(layer2_weights_V_21_ce0),
    .q0(layer2_weights_V_21_q0)
);

nn_inference_layer2_weights_V_22 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_22_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_22_address0),
    .ce0(layer2_weights_V_22_ce0),
    .q0(layer2_weights_V_22_q0)
);

nn_inference_layer2_weights_V_23 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_23_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_23_address0),
    .ce0(layer2_weights_V_23_ce0),
    .q0(layer2_weights_V_23_q0)
);

nn_inference_layer2_weights_V_24 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_24_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_24_address0),
    .ce0(layer2_weights_V_24_ce0),
    .q0(layer2_weights_V_24_q0)
);

nn_inference_layer2_weights_V_25 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_25_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_25_address0),
    .ce0(layer2_weights_V_25_ce0),
    .q0(layer2_weights_V_25_q0)
);

nn_inference_layer2_weights_V_26 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_26_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_26_address0),
    .ce0(layer2_weights_V_26_ce0),
    .q0(layer2_weights_V_26_q0)
);

nn_inference_layer2_weights_V_27 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_27_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_27_address0),
    .ce0(layer2_weights_V_27_ce0),
    .q0(layer2_weights_V_27_q0)
);

nn_inference_layer2_weights_V_28 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_28_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_28_address0),
    .ce0(layer2_weights_V_28_ce0),
    .q0(layer2_weights_V_28_q0)
);

nn_inference_layer2_weights_V_29 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_29_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_29_address0),
    .ce0(layer2_weights_V_29_ce0),
    .q0(layer2_weights_V_29_q0)
);

nn_inference_layer2_weights_V_30 #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_30_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_30_address0),
    .ce0(layer2_weights_V_30_ce0),
    .q0(layer2_weights_V_30_q0)
);

nn_inference_layer2_weights_V_31 #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_31_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_31_address0),
    .ce0(layer2_weights_V_31_ce0),
    .q0(layer2_weights_V_31_q0)
);

nn_inference_layer3_weights_V_0 #(
    .DataWidth( 10 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer3_weights_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_0_address0),
    .ce0(layer3_weights_V_0_ce0),
    .q0(layer3_weights_V_0_q0)
);

nn_inference_layer3_weights_V_1 #(
    .DataWidth( 9 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer3_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_1_address0),
    .ce0(layer3_weights_V_1_ce0),
    .q0(layer3_weights_V_1_q0)
);

nn_inference_layer3_weights_V_2 #(
    .DataWidth( 10 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer3_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_2_address0),
    .ce0(layer3_weights_V_2_ce0),
    .q0(layer3_weights_V_2_q0)
);

nn_inference_layer3_weights_V_3 #(
    .DataWidth( 10 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer3_weights_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_3_address0),
    .ce0(layer3_weights_V_3_ce0),
    .q0(layer3_weights_V_3_q0)
);

nn_inference_layer3_weights_V_4 #(
    .DataWidth( 10 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer3_weights_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_4_address0),
    .ce0(layer3_weights_V_4_ce0),
    .q0(layer3_weights_V_4_q0)
);

nn_inference_layer3_weights_V_5 #(
    .DataWidth( 10 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer3_weights_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_5_address0),
    .ce0(layer3_weights_V_5_ce0),
    .q0(layer3_weights_V_5_q0)
);

nn_inference_layer3_weights_V_6 #(
    .DataWidth( 10 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer3_weights_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_6_address0),
    .ce0(layer3_weights_V_6_ce0),
    .q0(layer3_weights_V_6_q0)
);

nn_inference_layer3_weights_V_7 #(
    .DataWidth( 11 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer3_weights_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_7_address0),
    .ce0(layer3_weights_V_7_ce0),
    .q0(layer3_weights_V_7_q0)
);

nn_inference_layer3_weights_V_8 #(
    .DataWidth( 10 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer3_weights_V_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_8_address0),
    .ce0(layer3_weights_V_8_ce0),
    .q0(layer3_weights_V_8_q0)
);

nn_inference_layer3_weights_V_9 #(
    .DataWidth( 11 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer3_weights_V_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_9_address0),
    .ce0(layer3_weights_V_9_ce0),
    .q0(layer3_weights_V_9_q0)
);

nn_inference_layer3_weights_V_10 #(
    .DataWidth( 10 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer3_weights_V_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_10_address0),
    .ce0(layer3_weights_V_10_ce0),
    .q0(layer3_weights_V_10_q0)
);

nn_inference_layer3_weights_V_11 #(
    .DataWidth( 10 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer3_weights_V_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_11_address0),
    .ce0(layer3_weights_V_11_ce0),
    .q0(layer3_weights_V_11_q0)
);

nn_inference_layer3_weights_V_12 #(
    .DataWidth( 10 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer3_weights_V_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_12_address0),
    .ce0(layer3_weights_V_12_ce0),
    .q0(layer3_weights_V_12_q0)
);

nn_inference_layer3_weights_V_13 #(
    .DataWidth( 10 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer3_weights_V_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_13_address0),
    .ce0(layer3_weights_V_13_ce0),
    .q0(layer3_weights_V_13_q0)
);

nn_inference_layer3_weights_V_14 #(
    .DataWidth( 10 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer3_weights_V_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_14_address0),
    .ce0(layer3_weights_V_14_ce0),
    .q0(layer3_weights_V_14_q0)
);

nn_inference_layer3_weights_V_15 #(
    .DataWidth( 11 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer3_weights_V_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_15_address0),
    .ce0(layer3_weights_V_15_ce0),
    .q0(layer3_weights_V_15_q0)
);

nn_inference_fp_input_img_V #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
fp_input_img_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fp_input_img_V_address0),
    .ce0(fp_input_img_V_ce0),
    .we0(fp_input_img_V_we0),
    .d0(fp_input_img_V_d0),
    .q0(fp_input_img_V_q0),
    .address1(fp_input_img_V_address1),
    .ce1(fp_input_img_V_ce1),
    .q1(fp_input_img_V_q1)
);

nn_inference_temp_output_0_V #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
temp_output_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_output_0_V_address0),
    .ce0(temp_output_0_V_ce0),
    .we0(temp_output_0_V_we0),
    .d0(temp_output_0_V_d0),
    .q0(temp_output_0_V_q0),
    .address1(temp_output_0_V_address1),
    .ce1(temp_output_0_V_ce1),
    .q1(temp_output_0_V_q1)
);

nn_inference_temp_output2_0_V #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
temp_output2_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_output2_0_V_address0),
    .ce0(temp_output2_0_V_ce0),
    .we0(temp_output2_0_V_we0),
    .d0(temp_output2_0_V_d0),
    .q0(temp_output2_0_V_q0),
    .address1(temp_output2_0_V_address1),
    .ce1(temp_output2_0_V_ce1),
    .q1(temp_output2_0_V_q1)
);

nn_inference_temp_output3_0_V #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
temp_output3_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_output3_0_V_address0),
    .ce0(temp_output3_0_V_ce0),
    .we0(temp_output3_0_V_we0),
    .d0(temp_output3_0_V_d0),
    .q0(temp_output3_0_V_q0)
);

nn_inference_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1640_p0),
    .ce(1'b1),
    .dout(grp_fu_1640_p1)
);

nn_inference_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1643_p0),
    .din1(64'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_1643_p2)
);

nn_inference_mul_12s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_12s_32s_40_1_1_U3(
    .din0(weights_layer1_weights_V_q1),
    .din1(fp_input_img_V_q1),
    .dout(mul_ln1192_fu_2015_p2)
);

nn_inference_mul_12s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_12s_32s_40_1_1_U4(
    .din0(weights_layer1_weights_V_q0),
    .din1(r_V_1_reg_4711),
    .dout(mul_ln1192_1_fu_2058_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U5(
    .din0(layer2_weights_V_0_q0),
    .din1(mul_ln708_fu_2557_p1),
    .dout(mul_ln708_fu_2557_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U6(
    .din0(layer2_weights_V_1_q0),
    .din1(mul_ln1192_2_fu_2566_p1),
    .dout(mul_ln1192_2_fu_2566_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U7(
    .din0(layer2_weights_V_2_q0),
    .din1(mul_ln1192_3_fu_2599_p1),
    .dout(mul_ln1192_3_fu_2599_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U8(
    .din0(layer2_weights_V_3_q0),
    .din1(mul_ln1192_4_fu_2632_p1),
    .dout(mul_ln1192_4_fu_2632_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U9(
    .din0(layer2_weights_V_4_q0),
    .din1(mul_ln1192_5_fu_2651_p1),
    .dout(mul_ln1192_5_fu_2651_p2)
);

nn_inference_mul_11s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_11s_32s_40_1_1_U10(
    .din0(layer2_weights_V_5_q0),
    .din1(mul_ln1192_6_fu_2660_p1),
    .dout(mul_ln1192_6_fu_2660_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U11(
    .din0(layer2_weights_V_6_q0),
    .din1(mul_ln1192_7_fu_2727_p1),
    .dout(mul_ln1192_7_fu_2727_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U12(
    .din0(layer2_weights_V_7_q0),
    .din1(mul_ln1192_8_fu_2760_p1),
    .dout(mul_ln1192_8_fu_2760_p2)
);

nn_inference_mul_11s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_11s_32s_40_1_1_U13(
    .din0(layer2_weights_V_8_q0),
    .din1(mul_ln1192_9_fu_2793_p1),
    .dout(mul_ln1192_9_fu_2793_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U14(
    .din0(layer2_weights_V_9_q0),
    .din1(mul_ln1192_10_fu_2812_p1),
    .dout(mul_ln1192_10_fu_2812_p2)
);

nn_inference_mul_11s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_11s_32s_40_1_1_U15(
    .din0(layer2_weights_V_10_q0),
    .din1(mul_ln1192_11_fu_2821_p1),
    .dout(mul_ln1192_11_fu_2821_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U16(
    .din0(layer2_weights_V_11_q0),
    .din1(mul_ln1192_12_fu_2888_p1),
    .dout(mul_ln1192_12_fu_2888_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U17(
    .din0(layer2_weights_V_12_q0),
    .din1(mul_ln1192_13_fu_2921_p1),
    .dout(mul_ln1192_13_fu_2921_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U18(
    .din0(layer2_weights_V_13_q0),
    .din1(mul_ln1192_14_fu_2954_p1),
    .dout(mul_ln1192_14_fu_2954_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U19(
    .din0(layer2_weights_V_14_q0),
    .din1(mul_ln1192_15_fu_2973_p1),
    .dout(mul_ln1192_15_fu_2973_p2)
);

nn_inference_mul_11s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_11s_32s_40_1_1_U20(
    .din0(layer2_weights_V_15_q0),
    .din1(mul_ln1192_16_fu_2982_p1),
    .dout(mul_ln1192_16_fu_2982_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U21(
    .din0(layer2_weights_V_16_q0),
    .din1(mul_ln1192_17_fu_3049_p1),
    .dout(mul_ln1192_17_fu_3049_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U22(
    .din0(layer2_weights_V_17_q0),
    .din1(mul_ln1192_18_fu_3082_p1),
    .dout(mul_ln1192_18_fu_3082_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U23(
    .din0(layer2_weights_V_18_q0),
    .din1(mul_ln1192_19_fu_3115_p1),
    .dout(mul_ln1192_19_fu_3115_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U24(
    .din0(layer2_weights_V_19_q0),
    .din1(mul_ln1192_20_fu_3134_p1),
    .dout(mul_ln1192_20_fu_3134_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U25(
    .din0(layer2_weights_V_20_q0),
    .din1(mul_ln1192_21_fu_3143_p1),
    .dout(mul_ln1192_21_fu_3143_p2)
);

nn_inference_mul_11s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_11s_32s_40_1_1_U26(
    .din0(layer2_weights_V_21_q0),
    .din1(mul_ln1192_22_fu_3210_p1),
    .dout(mul_ln1192_22_fu_3210_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U27(
    .din0(layer2_weights_V_22_q0),
    .din1(mul_ln1192_23_fu_3243_p1),
    .dout(mul_ln1192_23_fu_3243_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U28(
    .din0(layer2_weights_V_23_q0),
    .din1(mul_ln1192_24_fu_3276_p1),
    .dout(mul_ln1192_24_fu_3276_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U29(
    .din0(layer2_weights_V_24_q0),
    .din1(mul_ln1192_25_fu_3295_p1),
    .dout(mul_ln1192_25_fu_3295_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U30(
    .din0(layer2_weights_V_25_q0),
    .din1(mul_ln1192_26_fu_3304_p1),
    .dout(mul_ln1192_26_fu_3304_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U31(
    .din0(layer2_weights_V_26_q0),
    .din1(mul_ln1192_27_fu_3371_p1),
    .dout(mul_ln1192_27_fu_3371_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U32(
    .din0(layer2_weights_V_27_q0),
    .din1(mul_ln1192_28_fu_3404_p1),
    .dout(mul_ln1192_28_fu_3404_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U33(
    .din0(layer2_weights_V_28_q0),
    .din1(mul_ln1192_29_fu_3437_p1),
    .dout(mul_ln1192_29_fu_3437_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U34(
    .din0(layer2_weights_V_29_q0),
    .din1(mul_ln1192_30_fu_3456_p1),
    .dout(mul_ln1192_30_fu_3456_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U35(
    .din0(layer2_weights_V_30_load_reg_5568),
    .din1(mul_ln1192_31_fu_3499_p1),
    .dout(mul_ln1192_31_fu_3499_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U36(
    .din0(layer2_weights_V_31_q0),
    .din1(mul_ln1192_32_fu_3532_p1),
    .dout(mul_ln1192_32_fu_3532_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U37(
    .din0(layer3_weights_V_0_q0),
    .din1(mul_ln708_1_fu_3983_p1),
    .dout(mul_ln708_1_fu_3983_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U38(
    .din0(layer3_weights_V_1_q0),
    .din1(mul_ln1192_33_fu_3992_p1),
    .dout(mul_ln1192_33_fu_3992_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U39(
    .din0(layer3_weights_V_2_q0),
    .din1(mul_ln1192_34_fu_4025_p1),
    .dout(mul_ln1192_34_fu_4025_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U40(
    .din0(layer3_weights_V_3_q0),
    .din1(mul_ln1192_35_fu_4058_p1),
    .dout(mul_ln1192_35_fu_4058_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U41(
    .din0(layer3_weights_V_4_q0),
    .din1(mul_ln1192_36_fu_4077_p1),
    .dout(mul_ln1192_36_fu_4077_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U42(
    .din0(layer3_weights_V_5_q0),
    .din1(mul_ln1192_37_fu_4086_p1),
    .dout(mul_ln1192_37_fu_4086_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U43(
    .din0(layer3_weights_V_6_q0),
    .din1(mul_ln1192_38_fu_4153_p1),
    .dout(mul_ln1192_38_fu_4153_p2)
);

nn_inference_mul_11s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_11s_32s_40_1_1_U44(
    .din0(layer3_weights_V_7_q0),
    .din1(mul_ln1192_39_fu_4186_p1),
    .dout(mul_ln1192_39_fu_4186_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U45(
    .din0(layer3_weights_V_8_q0),
    .din1(mul_ln1192_40_fu_4219_p1),
    .dout(mul_ln1192_40_fu_4219_p2)
);

nn_inference_mul_11s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_11s_32s_40_1_1_U46(
    .din0(layer3_weights_V_9_q0),
    .din1(mul_ln1192_41_fu_4238_p1),
    .dout(mul_ln1192_41_fu_4238_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U47(
    .din0(layer3_weights_V_10_q0),
    .din1(mul_ln1192_42_fu_4247_p1),
    .dout(mul_ln1192_42_fu_4247_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U48(
    .din0(layer3_weights_V_11_q0),
    .din1(mul_ln1192_43_fu_4314_p1),
    .dout(mul_ln1192_43_fu_4314_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U49(
    .din0(layer3_weights_V_12_q0),
    .din1(mul_ln1192_44_fu_4347_p1),
    .dout(mul_ln1192_44_fu_4347_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U50(
    .din0(layer3_weights_V_13_q0),
    .din1(mul_ln1192_45_fu_4380_p1),
    .dout(mul_ln1192_45_fu_4380_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U51(
    .din0(layer3_weights_V_14_load_reg_6024),
    .din1(mul_ln1192_46_fu_4410_p1),
    .dout(mul_ln1192_46_fu_4410_p2)
);

nn_inference_mul_11s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_11s_32s_40_1_1_U52(
    .din0(layer3_weights_V_15_q0),
    .din1(mul_ln1192_47_fu_4443_p1),
    .dout(mul_ln1192_47_fu_4443_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln21_fu_1942_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((((icmp_ln21_fu_1942_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state9)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state9))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((icmp_ln21_fu_1942_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state12))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln21_fu_1942_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state12)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end else if (((icmp_ln21_fu_1942_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp2_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state33))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state33)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state33);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp3_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state42) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state41)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state42)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state42);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end else if ((1'b1 == ap_CS_fsm_state41)) begin
            ap_enable_reg_pp4_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state55) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state54)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state55)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state55);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
        end else if ((1'b1 == ap_CS_fsm_state54)) begin
            ap_enable_reg_pp5_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp6_flush_enable)) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state60)) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
        end else if ((1'b1 == ap_CS_fsm_state60)) begin
            ap_enable_reg_pp6_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_1942_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_1_reg_1561 <= 6'd0;
    end else if (((icmp_ln77_fu_2104_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_1_reg_1561 <= add_ln77_fu_2098_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        i_2_reg_1583 <= 5'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln92_fu_3578_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        i_2_reg_1583 <= add_ln92_fu_3572_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        i_3_reg_1605 <= 4'd0;
    end else if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (icmp_ln109_reg_6039 == 1'd0))) begin
        i_3_reg_1605 <= add_ln109_reg_6034;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_1514 <= 7'd0;
    end else if (((icmp_ln5_fu_1654_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_1514 <= add_ln5_fu_1648_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        j_1_reg_1572 <= 5'd0;
    end else if (((icmp_ln40_fu_2537_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        j_1_reg_1572 <= add_ln40_fu_2531_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        j_2_reg_1594 <= 4'd0;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln59_fu_3963_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        j_2_reg_1594 <= add_ln59_fu_3957_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_1525 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_1525 <= add_ln21_reg_4653;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_1942_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        k_reg_1537 <= 7'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_1956_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        k_reg_1537 <= add_ln25_fu_1962_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        max_idx_V_reg_1617 <= 32'd4294967040;
    end else if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (icmp_ln109_reg_6039 == 1'd0))) begin
        max_idx_V_reg_1617 <= max_idx_V_1_fu_4526_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        max_val_V_reg_1629 <= 32'd4294935040;
    end else if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (icmp_ln109_reg_6039 == 1'd0))) begin
        max_val_V_reg_1629 <= max_val_V_1_fu_4506_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_1942_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sum_V_2_reg_1548 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln25_reg_4672_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_V_2_reg_1548 <= {{ret_V_1_fu_2082_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_4593_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        F2_reg_4635 <= F2_fu_1710_p2;
        icmp_ln571_reg_4627 <= icmp_ln571_fu_1704_p2;
        p_Result_8_reg_4617 <= ireg_fu_1670_p1[32'd63];
        trunc_ln565_reg_4622 <= trunc_ln565_fu_1700_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1))) begin
        add_ln109_reg_6034 <= add_ln109_fu_4483_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln21_reg_4653 <= add_ln21_fu_1936_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln885_1_fu_3589_p2 == 1'd0))) begin
        add_ln908_1_reg_5612 <= add_ln908_1_fu_3743_p2;
        icmp_ln908_1_reg_5607 <= icmp_ln908_1_fu_3729_p2;
        p_Result_14_reg_5597 <= temp_output2_0_V_q1[32'd31];
        select_ln908_2_reg_5622 <= select_ln908_2_fu_3761_p3;
        sub_ln909_1_reg_5617 <= sub_ln909_1_fu_3755_p2;
        tmp_V_5_reg_5602 <= tmp_V_5_fu_3609_p3;
        trunc_ln893_1_reg_5627 <= trunc_ln893_1_fu_3769_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_fu_2115_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln908_reg_4755 <= add_ln908_fu_2269_p2;
        icmp_ln908_reg_4750 <= icmp_ln908_fu_2255_p2;
        p_Result_10_reg_4740 <= temp_output_0_V_q1[32'd31];
        select_ln908_reg_4765 <= select_ln908_fu_2287_p3;
        sub_ln909_reg_4760 <= sub_ln909_fu_2281_p2;
        tmp_V_4_reg_4745 <= tmp_V_4_fu_2135_p3;
        trunc_ln893_reg_4770 <= trunc_ln893_fu_2295_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_fu_1654_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast_reg_4597[6 : 0] <= i_cast_fu_1660_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast_reg_4597_pp0_iter1_reg[6 : 0] <= i_cast_reg_4597[6 : 0];
        icmp_ln5_reg_4593 <= icmp_ln5_fu_1654_p2;
        icmp_ln5_reg_4593_pp0_iter1_reg <= icmp_ln5_reg_4593;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_cast_reg_4597_pp0_iter2_reg[6 : 0] <= i_cast_reg_4597_pp0_iter1_reg[6 : 0];
        icmp_ln5_reg_4593_pp0_iter2_reg <= icmp_ln5_reg_4593_pp0_iter1_reg;
        input_img_load_reg_4607_pp0_iter2_reg <= input_img_load_reg_4607;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        icmp_ln109_reg_6039 <= icmp_ln109_fu_4489_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_reg_4736 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln1506_1_reg_4785 <= icmp_ln1506_1_fu_2417_p2;
        icmp_ln1506_reg_4780 <= icmp_ln1506_fu_2411_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln885_1_reg_5593 == 1'd0))) begin
        icmp_ln1506_2_reg_5637 <= icmp_ln1506_2_fu_3885_p2;
        icmp_ln1506_3_reg_5642 <= icmp_ln1506_3_fu_3891_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln25_reg_4672 <= icmp_ln25_fu_1956_p2;
        icmp_ln25_reg_4672_pp1_iter1_reg <= icmp_ln25_reg_4672;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln40_reg_5263 <= icmp_ln40_fu_2537_p2;
        icmp_ln40_reg_5263_pp3_iter1_reg <= icmp_ln40_reg_5263;
        j_1_cast_reg_5267_pp3_iter1_reg[4 : 0] <= j_1_cast_reg_5267[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln40_reg_5263_pp3_iter2_reg <= icmp_ln40_reg_5263_pp3_iter1_reg;
        icmp_ln40_reg_5263_pp3_iter3_reg <= icmp_ln40_reg_5263_pp3_iter2_reg;
        icmp_ln40_reg_5263_pp3_iter4_reg <= icmp_ln40_reg_5263_pp3_iter3_reg;
        icmp_ln40_reg_5263_pp3_iter5_reg <= icmp_ln40_reg_5263_pp3_iter4_reg;
        icmp_ln40_reg_5263_pp3_iter6_reg <= icmp_ln40_reg_5263_pp3_iter5_reg;
        j_1_cast_reg_5267_pp3_iter2_reg[4 : 0] <= j_1_cast_reg_5267_pp3_iter1_reg[4 : 0];
        j_1_cast_reg_5267_pp3_iter3_reg[4 : 0] <= j_1_cast_reg_5267_pp3_iter2_reg[4 : 0];
        j_1_cast_reg_5267_pp3_iter4_reg[4 : 0] <= j_1_cast_reg_5267_pp3_iter3_reg[4 : 0];
        j_1_cast_reg_5267_pp3_iter5_reg[4 : 0] <= j_1_cast_reg_5267_pp3_iter4_reg[4 : 0];
        j_1_cast_reg_5267_pp3_iter6_reg[4 : 0] <= j_1_cast_reg_5267_pp3_iter5_reg[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln59_reg_5880 <= icmp_ln59_fu_3963_p2;
        icmp_ln59_reg_5880_pp5_iter1_reg <= icmp_ln59_reg_5880;
        j_2_cast_reg_5884_pp5_iter1_reg[3 : 0] <= j_2_cast_reg_5884[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp5_stage0_11001)) begin
        icmp_ln59_reg_5880_pp5_iter2_reg <= icmp_ln59_reg_5880_pp5_iter1_reg;
        icmp_ln59_reg_5880_pp5_iter3_reg <= icmp_ln59_reg_5880_pp5_iter2_reg;
        j_2_cast_reg_5884_pp5_iter2_reg[3 : 0] <= j_2_cast_reg_5884_pp5_iter1_reg[3 : 0];
        j_2_cast_reg_5884_pp5_iter3_reg[3 : 0] <= j_2_cast_reg_5884_pp5_iter2_reg[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln885_1_reg_5593 <= icmp_ln885_1_fu_3589_p2;
        temp_output2_0_V_addr_2_reg_5587_pp4_iter1_reg <= temp_output2_0_V_addr_2_reg_5587;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp4_stage0_11001)) begin
        icmp_ln885_1_reg_5593_pp4_iter2_reg <= icmp_ln885_1_reg_5593;
        temp_output2_0_V_addr_2_reg_5587_pp4_iter2_reg <= temp_output2_0_V_addr_2_reg_5587_pp4_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln885_reg_4736 <= icmp_ln885_fu_2115_p2;
        temp_output_0_V_addr_1_reg_4730_pp2_iter1_reg <= temp_output_0_V_addr_1_reg_4730;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln885_reg_4736_pp2_iter2_reg <= icmp_ln885_reg_4736;
        temp_output_0_V_addr_1_reg_4730_pp2_iter2_reg <= temp_output_0_V_addr_1_reg_4730_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_4593 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_img_load_reg_4607 <= input_img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_2537_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        j_1_cast_reg_5267[4 : 0] <= j_1_cast_fu_2543_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln59_fu_3963_p2 == 1'd0))) begin
        j_2_cast_reg_5884[3 : 0] <= j_2_cast_fu_3969_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5263_pp3_iter5_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        layer2_weights_V_30_load_reg_5568 <= layer2_weights_V_30_q0;
        mul_ln1192_29_reg_5553 <= mul_ln1192_29_fu_3437_p2;
        mul_ln1192_30_reg_5563 <= mul_ln1192_30_fu_3456_p2;
        tmp_35_reg_5558 <= {{add_ln1192_26_fu_3427_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln59_reg_5880_pp5_iter2_reg == 1'd0))) begin
        layer3_weights_V_14_load_reg_6024 <= layer3_weights_V_14_q0;
        mul_ln1192_45_reg_6014 <= mul_ln1192_45_fu_4380_p2;
        tmp_51_reg_6019 <= {{add_ln1192_44_fu_4370_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5263_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        mul_ln1192_10_reg_5383 <= mul_ln1192_10_fu_2812_p2;
        mul_ln1192_11_reg_5388 <= mul_ln1192_11_fu_2821_p2;
        mul_ln1192_9_reg_5373 <= mul_ln1192_9_fu_2793_p2;
        tmp_15_reg_5378 <= {{add_ln1192_6_fu_2783_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5263_pp3_iter2_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        mul_ln1192_14_reg_5418 <= mul_ln1192_14_fu_2954_p2;
        mul_ln1192_15_reg_5428 <= mul_ln1192_15_fu_2973_p2;
        mul_ln1192_16_reg_5433 <= mul_ln1192_16_fu_2982_p2;
        tmp_20_reg_5423 <= {{add_ln1192_11_fu_2944_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5263_pp3_iter3_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        mul_ln1192_19_reg_5463 <= mul_ln1192_19_fu_3115_p2;
        mul_ln1192_20_reg_5473 <= mul_ln1192_20_fu_3134_p2;
        mul_ln1192_21_reg_5478 <= mul_ln1192_21_fu_3143_p2;
        tmp_25_reg_5468 <= {{add_ln1192_16_fu_3105_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5263_pp3_iter4_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        mul_ln1192_24_reg_5508 <= mul_ln1192_24_fu_3276_p2;
        mul_ln1192_25_reg_5518 <= mul_ln1192_25_fu_3295_p2;
        mul_ln1192_26_reg_5523 <= mul_ln1192_26_fu_3304_p2;
        tmp_30_reg_5513 <= {{add_ln1192_21_fu_3266_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln59_reg_5880 == 1'd0))) begin
        mul_ln1192_35_reg_5929 <= mul_ln1192_35_fu_4058_p2;
        mul_ln1192_36_reg_5939 <= mul_ln1192_36_fu_4077_p2;
        mul_ln1192_37_reg_5944 <= mul_ln1192_37_fu_4086_p2;
        tmp_41_reg_5934 <= {{add_ln1192_34_fu_4048_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln59_reg_5880_pp5_iter1_reg == 1'd0))) begin
        mul_ln1192_40_reg_5974 <= mul_ln1192_40_fu_4219_p2;
        mul_ln1192_41_reg_5984 <= mul_ln1192_41_fu_4238_p2;
        mul_ln1192_42_reg_5989 <= mul_ln1192_42_fu_4247_p2;
        tmp_46_reg_5979 <= {{add_ln1192_39_fu_4209_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_5263 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        mul_ln1192_4_reg_5328 <= mul_ln1192_4_fu_2632_p2;
        mul_ln1192_5_reg_5338 <= mul_ln1192_5_fu_2651_p2;
        mul_ln1192_6_reg_5343 <= mul_ln1192_6_fu_2660_p2;
        tmp_10_reg_5333 <= {{add_ln1192_1_fu_2622_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_4672 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        mul_ln1192_reg_4701 <= mul_ln1192_fu_2015_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_1956_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        or_ln25_reg_4691[6 : 1] <= or_ln25_fu_1996_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln25_reg_4672 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        r_V_1_reg_4711 <= fp_input_img_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        sext_ln1192_10_reg_5153 <= sext_ln1192_10_fu_2466_p1;
        sext_ln1192_11_reg_5158 <= sext_ln1192_11_fu_2469_p1;
        sext_ln1192_12_reg_5163 <= sext_ln1192_12_fu_2472_p1;
        sext_ln1192_13_reg_5168 <= sext_ln1192_13_fu_2475_p1;
        sext_ln1192_14_reg_5173 <= sext_ln1192_14_fu_2478_p1;
        sext_ln1192_15_reg_5178 <= sext_ln1192_15_fu_2481_p1;
        sext_ln1192_16_reg_5183 <= sext_ln1192_16_fu_2484_p1;
        sext_ln1192_17_reg_5188 <= sext_ln1192_17_fu_2487_p1;
        sext_ln1192_18_reg_5193 <= sext_ln1192_18_fu_2490_p1;
        sext_ln1192_19_reg_5198 <= sext_ln1192_19_fu_2493_p1;
        sext_ln1192_1_reg_5108 <= sext_ln1192_1_fu_2439_p1;
        sext_ln1192_20_reg_5203 <= sext_ln1192_20_fu_2496_p1;
        sext_ln1192_21_reg_5208 <= sext_ln1192_21_fu_2499_p1;
        sext_ln1192_22_reg_5213 <= sext_ln1192_22_fu_2502_p1;
        sext_ln1192_23_reg_5218 <= sext_ln1192_23_fu_2505_p1;
        sext_ln1192_24_reg_5223 <= sext_ln1192_24_fu_2508_p1;
        sext_ln1192_25_reg_5228 <= sext_ln1192_25_fu_2511_p1;
        sext_ln1192_26_reg_5233 <= sext_ln1192_26_fu_2514_p1;
        sext_ln1192_27_reg_5238 <= sext_ln1192_27_fu_2517_p1;
        sext_ln1192_28_reg_5243 <= sext_ln1192_28_fu_2520_p1;
        sext_ln1192_29_reg_5248 <= sext_ln1192_29_fu_2523_p1;
        sext_ln1192_2_reg_5113 <= sext_ln1192_2_fu_2442_p1;
        sext_ln1192_30_reg_5253 <= sext_ln1192_30_fu_2527_p1;
        sext_ln1192_3_reg_5118 <= sext_ln1192_3_fu_2445_p1;
        sext_ln1192_4_reg_5123 <= sext_ln1192_4_fu_2448_p1;
        sext_ln1192_5_reg_5128 <= sext_ln1192_5_fu_2451_p1;
        sext_ln1192_6_reg_5133 <= sext_ln1192_6_fu_2454_p1;
        sext_ln1192_7_reg_5138 <= sext_ln1192_7_fu_2457_p1;
        sext_ln1192_8_reg_5143 <= sext_ln1192_8_fu_2460_p1;
        sext_ln1192_9_reg_5148 <= sext_ln1192_9_fu_2463_p1;
        sext_ln1192_reg_5103 <= sext_ln1192_fu_2436_p1;
        sext_ln708_reg_5098 <= sext_ln708_fu_2433_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        sext_ln1192_66_reg_5800 <= sext_ln1192_66_fu_3910_p1;
        sext_ln1192_67_reg_5805 <= sext_ln1192_67_fu_3913_p1;
        sext_ln1192_68_reg_5810 <= sext_ln1192_68_fu_3916_p1;
        sext_ln1192_69_reg_5815 <= sext_ln1192_69_fu_3919_p1;
        sext_ln1192_70_reg_5820 <= sext_ln1192_70_fu_3922_p1;
        sext_ln1192_71_reg_5825 <= sext_ln1192_71_fu_3925_p1;
        sext_ln1192_72_reg_5830 <= sext_ln1192_72_fu_3928_p1;
        sext_ln1192_73_reg_5835 <= sext_ln1192_73_fu_3931_p1;
        sext_ln1192_74_reg_5840 <= sext_ln1192_74_fu_3934_p1;
        sext_ln1192_75_reg_5845 <= sext_ln1192_75_fu_3937_p1;
        sext_ln1192_76_reg_5850 <= sext_ln1192_76_fu_3940_p1;
        sext_ln1192_77_reg_5855 <= sext_ln1192_77_fu_3943_p1;
        sext_ln1192_78_reg_5860 <= sext_ln1192_78_fu_3946_p1;
        sext_ln1192_79_reg_5865 <= sext_ln1192_79_fu_3949_p1;
        sext_ln1192_80_reg_5870 <= sext_ln1192_80_fu_3953_p1;
        sext_ln708_2_reg_5795 <= sext_ln708_2_fu_3907_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln92_fu_3578_p2 == 1'd0))) begin
        temp_output2_0_V_addr_2_reg_5587 <= i_2_cast_fu_3584_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        temp_output2_0_V_load_10_reg_5755 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_11_reg_5760 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        temp_output2_0_V_load_12_reg_5775 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_13_reg_5780 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        temp_output2_0_V_load_1_reg_5660 <= temp_output2_0_V_q1;
        temp_output2_0_V_load_reg_5655 <= temp_output2_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        temp_output2_0_V_load_2_reg_5675 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_3_reg_5680 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        temp_output2_0_V_load_4_reg_5695 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_5_reg_5700 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        temp_output2_0_V_load_6_reg_5715 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_7_reg_5720 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        temp_output2_0_V_load_8_reg_5735 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_9_reg_5740 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_2104_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        temp_output_0_V_addr_1_reg_4730 <= i_1_cast_fu_2110_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_output_0_V_load_10_reg_4898 <= temp_output_0_V_q0;
        temp_output_0_V_load_11_reg_4903 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        temp_output_0_V_load_12_reg_4918 <= temp_output_0_V_q0;
        temp_output_0_V_load_13_reg_4923 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        temp_output_0_V_load_14_reg_4938 <= temp_output_0_V_q0;
        temp_output_0_V_load_15_reg_4943 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_output_0_V_load_16_reg_4958 <= temp_output_0_V_q0;
        temp_output_0_V_load_17_reg_4963 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_output_0_V_load_18_reg_4978 <= temp_output_0_V_q0;
        temp_output_0_V_load_19_reg_4983 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_output_0_V_load_1_reg_4803 <= temp_output_0_V_q1;
        temp_output_0_V_load_reg_4798 <= temp_output_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_output_0_V_load_20_reg_4998 <= temp_output_0_V_q0;
        temp_output_0_V_load_21_reg_5003 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_output_0_V_load_22_reg_5018 <= temp_output_0_V_q0;
        temp_output_0_V_load_23_reg_5023 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_output_0_V_load_24_reg_5038 <= temp_output_0_V_q0;
        temp_output_0_V_load_25_reg_5043 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_output_0_V_load_26_reg_5058 <= temp_output_0_V_q0;
        temp_output_0_V_load_27_reg_5063 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_output_0_V_load_28_reg_5078 <= temp_output_0_V_q0;
        temp_output_0_V_load_29_reg_5083 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_output_0_V_load_2_reg_4818 <= temp_output_0_V_q0;
        temp_output_0_V_load_3_reg_4823 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        temp_output_0_V_load_4_reg_4838 <= temp_output_0_V_q0;
        temp_output_0_V_load_5_reg_4843 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        temp_output_0_V_load_6_reg_4858 <= temp_output_0_V_q0;
        temp_output_0_V_load_7_reg_4863 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_output_0_V_load_8_reg_4878 <= temp_output_0_V_q0;
        temp_output_0_V_load_9_reg_4883 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_1942_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln21_1_reg_4667[5 : 0] <= zext_ln21_1_fu_1952_p1[5 : 0];
        zext_ln21_reg_4662[5 : 0] <= zext_ln21_fu_1948_p1[5 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln5_fu_1654_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state9 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_1956_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln77_fu_2104_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln40_fu_2537_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state33 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state33 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln92_fu_3578_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state42 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state42 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln59_fu_3963_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state55 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state55 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln109_fu_4489_p2 == 1'd1))) begin
        ap_condition_pp6_flush_enable = 1'b1;
    end else begin
        ap_condition_pp6_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter4 == 1'b0) & (ap_enable_reg_pp5_iter3 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (icmp_ln109_reg_6039 == 1'd0))) begin
        ap_phi_mux_i_3_phi_fu_1609_p4 = add_ln109_reg_6034;
    end else begin
        ap_phi_mux_i_3_phi_fu_1609_p4 = i_3_reg_1605;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        fp_input_img_V_address0 = zext_ln23_fu_2002_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        fp_input_img_V_address0 = i_cast_reg_4597_pp0_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fp_input_img_V_address0 = 64'd0;
    end else begin
        fp_input_img_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        fp_input_img_V_ce0 = 1'b1;
    end else begin
        fp_input_img_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        fp_input_img_V_ce1 = 1'b1;
    end else begin
        fp_input_img_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        fp_input_img_V_d0 = select_ln571_4_fu_1927_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fp_input_img_V_d0 = 32'd256;
    end else begin
        fp_input_img_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln5_reg_4593_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        fp_input_img_V_we0 = 1'b1;
    end else begin
        fp_input_img_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        grp_fu_1643_p0 = bitcast_ln734_1_fu_3870_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        grp_fu_1643_p0 = bitcast_ln734_fu_2396_p1;
    end else begin
        grp_fu_1643_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_img_ce0 = 1'b1;
    end else begin
        input_img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_0_ce0 = 1'b1;
    end else begin
        layer2_weights_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_10_ce0 = 1'b1;
    end else begin
        layer2_weights_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_11_ce0 = 1'b1;
    end else begin
        layer2_weights_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_12_ce0 = 1'b1;
    end else begin
        layer2_weights_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_13_ce0 = 1'b1;
    end else begin
        layer2_weights_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_14_ce0 = 1'b1;
    end else begin
        layer2_weights_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_15_ce0 = 1'b1;
    end else begin
        layer2_weights_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_16_ce0 = 1'b1;
    end else begin
        layer2_weights_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_17_ce0 = 1'b1;
    end else begin
        layer2_weights_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_18_ce0 = 1'b1;
    end else begin
        layer2_weights_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_19_ce0 = 1'b1;
    end else begin
        layer2_weights_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_1_ce0 = 1'b1;
    end else begin
        layer2_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_20_ce0 = 1'b1;
    end else begin
        layer2_weights_V_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_21_ce0 = 1'b1;
    end else begin
        layer2_weights_V_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_22_ce0 = 1'b1;
    end else begin
        layer2_weights_V_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_23_ce0 = 1'b1;
    end else begin
        layer2_weights_V_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_24_ce0 = 1'b1;
    end else begin
        layer2_weights_V_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_25_ce0 = 1'b1;
    end else begin
        layer2_weights_V_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_26_ce0 = 1'b1;
    end else begin
        layer2_weights_V_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_27_ce0 = 1'b1;
    end else begin
        layer2_weights_V_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_28_ce0 = 1'b1;
    end else begin
        layer2_weights_V_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_29_ce0 = 1'b1;
    end else begin
        layer2_weights_V_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_2_ce0 = 1'b1;
    end else begin
        layer2_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_30_ce0 = 1'b1;
    end else begin
        layer2_weights_V_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter6 == 1'b1))) begin
        layer2_weights_V_31_ce0 = 1'b1;
    end else begin
        layer2_weights_V_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_3_ce0 = 1'b1;
    end else begin
        layer2_weights_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_4_ce0 = 1'b1;
    end else begin
        layer2_weights_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer2_weights_V_5_ce0 = 1'b1;
    end else begin
        layer2_weights_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_6_ce0 = 1'b1;
    end else begin
        layer2_weights_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_7_ce0 = 1'b1;
    end else begin
        layer2_weights_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_8_ce0 = 1'b1;
    end else begin
        layer2_weights_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_9_ce0 = 1'b1;
    end else begin
        layer2_weights_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        layer3_weights_V_0_ce0 = 1'b1;
    end else begin
        layer3_weights_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        layer3_weights_V_10_ce0 = 1'b1;
    end else begin
        layer3_weights_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        layer3_weights_V_11_ce0 = 1'b1;
    end else begin
        layer3_weights_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        layer3_weights_V_12_ce0 = 1'b1;
    end else begin
        layer3_weights_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        layer3_weights_V_13_ce0 = 1'b1;
    end else begin
        layer3_weights_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        layer3_weights_V_14_ce0 = 1'b1;
    end else begin
        layer3_weights_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter3 == 1'b1))) begin
        layer3_weights_V_15_ce0 = 1'b1;
    end else begin
        layer3_weights_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        layer3_weights_V_1_ce0 = 1'b1;
    end else begin
        layer3_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        layer3_weights_V_2_ce0 = 1'b1;
    end else begin
        layer3_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        layer3_weights_V_3_ce0 = 1'b1;
    end else begin
        layer3_weights_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        layer3_weights_V_4_ce0 = 1'b1;
    end else begin
        layer3_weights_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        layer3_weights_V_5_ce0 = 1'b1;
    end else begin
        layer3_weights_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        layer3_weights_V_6_ce0 = 1'b1;
    end else begin
        layer3_weights_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        layer3_weights_V_7_ce0 = 1'b1;
    end else begin
        layer3_weights_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        layer3_weights_V_8_ce0 = 1'b1;
    end else begin
        layer3_weights_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        layer3_weights_V_9_ce0 = 1'b1;
    end else begin
        layer3_weights_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        temp_output2_0_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        temp_output2_0_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        temp_output2_0_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        temp_output2_0_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        temp_output2_0_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        temp_output2_0_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        temp_output2_0_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        temp_output2_0_V_address0 = temp_output2_0_V_addr_reg_4648;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        temp_output2_0_V_address0 = temp_output2_0_V_addr_2_reg_5587_pp4_iter2_reg;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter7 == 1'b1))) begin
        temp_output2_0_V_address0 = j_1_cast_reg_5267_pp3_iter6_reg;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output2_0_V_address0 = 64'd0;
    end else begin
        temp_output2_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        temp_output2_0_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        temp_output2_0_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        temp_output2_0_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        temp_output2_0_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        temp_output2_0_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        temp_output2_0_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        temp_output2_0_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        temp_output2_0_V_address1 = 64'd1;
    end else if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        temp_output2_0_V_address1 = i_2_cast_fu_3584_p1;
    end else begin
        temp_output2_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter3 == 1'b1)))) begin
        temp_output2_0_V_ce0 = 1'b1;
    end else begin
        temp_output2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
        temp_output2_0_V_ce1 = 1'b1;
    end else begin
        temp_output2_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        temp_output2_0_V_d0 = 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter7 == 1'b1))) begin
        temp_output2_0_V_d0 = {{add_ln1192_30_fu_3555_p2[39:8]}};
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output2_0_V_d0 = 32'd256;
    end else begin
        temp_output2_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'd1 == and_ln1506_1_fu_3901_p2) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter3 == 1'b1) & (icmp_ln885_1_reg_5593_pp4_iter2_reg == 1'd0)) | ((icmp_ln40_reg_5263_pp3_iter6_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1)))) begin
        temp_output2_0_V_we0 = 1'b1;
    end else begin
        temp_output2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1))) begin
        temp_output3_0_V_address0 = trunc_ln731_cast59_fu_4495_p1;
    end else if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter4 == 1'b1))) begin
        temp_output3_0_V_address0 = j_2_cast_reg_5884_pp5_iter3_reg;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output3_0_V_address0 = 64'd0;
    end else begin
        temp_output3_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter4 == 1'b1)))) begin
        temp_output3_0_V_ce0 = 1'b1;
    end else begin
        temp_output3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter4 == 1'b1))) begin
        temp_output3_0_V_d0 = {{add_ln1192_47_fu_4466_p2[39:8]}};
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output3_0_V_d0 = 32'd256;
    end else begin
        temp_output3_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter4 == 1'b1) & (icmp_ln59_reg_5880_pp5_iter3_reg == 1'd0)))) begin
        temp_output3_0_V_we0 = 1'b1;
    end else begin
        temp_output3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_output_0_V_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_output_0_V_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_output_0_V_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_output_0_V_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_output_0_V_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_output_0_V_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_output_0_V_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        temp_output_0_V_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        temp_output_0_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_output_0_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_output_0_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        temp_output_0_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        temp_output_0_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_output_0_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_output_0_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        temp_output_0_V_address0 = temp_output_0_V_addr_reg_4643;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        temp_output_0_V_address0 = temp_output_0_V_addr_1_reg_4730_pp2_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_output_0_V_address0 = zext_ln21_reg_4662;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output_0_V_address0 = 64'd0;
    end else begin
        temp_output_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_output_0_V_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_output_0_V_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_output_0_V_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_output_0_V_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_output_0_V_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_output_0_V_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_output_0_V_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        temp_output_0_V_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        temp_output_0_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_output_0_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_output_0_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        temp_output_0_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        temp_output_0_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_output_0_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_output_0_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        temp_output_0_V_address1 = 64'd1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        temp_output_0_V_address1 = i_1_cast_fu_2110_p1;
    end else begin
        temp_output_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter3 == 1'b1)))) begin
        temp_output_0_V_ce0 = 1'b1;
    end else begin
        temp_output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        temp_output_0_V_ce1 = 1'b1;
    end else begin
        temp_output_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        temp_output_0_V_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_output_0_V_d0 = sum_V_2_reg_1548;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output_0_V_d0 = 32'd256;
    end else begin
        temp_output_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | ((icmp_ln885_reg_4736_pp2_iter2_reg == 1'd0) & (1'd1 == and_ln1506_fu_2427_p2) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter3 == 1'b1)))) begin
        temp_output_0_V_we0 = 1'b1;
    end else begin
        temp_output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weights_layer1_weights_V_ce0 = 1'b1;
    end else begin
        weights_layer1_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weights_layer1_weights_V_ce1 = 1'b1;
    end else begin
        weights_layer1_weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln5_fu_1654_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln5_fu_1654_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln21_fu_1942_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln77_fu_2104_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((icmp_ln77_fu_2104_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((icmp_ln40_fu_2537_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter7 == 1'b1) & (ap_enable_reg_pp3_iter6 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((icmp_ln40_fu_2537_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter7 == 1'b1) & (ap_enable_reg_pp3_iter6 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln92_fu_3578_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter3 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter3 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b0)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln92_fu_3578_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln59_fu_3963_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter4 == 1'b1) & (ap_enable_reg_pp5_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter4 == 1'b1) & (ap_enable_reg_pp5_iter3 == 1'b0)) | ((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln59_fu_3963_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_pp6_stage0;
        end
        ap_ST_fsm_pp6_stage0 : begin
            if (~((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (ap_enable_reg_pp6_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if (((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (ap_enable_reg_pp6_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_1710_p2 = (12'd1075 - zext_ln455_fu_1696_p1);

assign add_ln109_fu_4483_p2 = (ap_phi_mux_i_3_phi_fu_1609_p4 + 4'd1);

assign add_ln1118_fu_2028_p2 = (tmp_8_fu_2021_p3 + zext_ln21_1_reg_4667);

assign add_ln1192_10_fu_2911_p2 = (shl_ln728_s_fu_2903_p3 + mul_ln1192_12_fu_2888_p2);

assign add_ln1192_11_fu_2944_p2 = (shl_ln728_10_fu_2936_p3 + mul_ln1192_13_fu_2921_p2);

assign add_ln1192_12_fu_2994_p2 = (shl_ln728_11_fu_2987_p3 + mul_ln1192_14_reg_5418);

assign add_ln1192_13_fu_3017_p2 = (shl_ln728_12_fu_3009_p3 + mul_ln1192_15_reg_5428);

assign add_ln1192_14_fu_3040_p2 = (shl_ln728_13_fu_3032_p3 + mul_ln1192_16_reg_5433);

assign add_ln1192_15_fu_3072_p2 = (shl_ln728_14_fu_3064_p3 + mul_ln1192_17_fu_3049_p2);

assign add_ln1192_16_fu_3105_p2 = (shl_ln728_15_fu_3097_p3 + mul_ln1192_18_fu_3082_p2);

assign add_ln1192_17_fu_3155_p2 = (shl_ln728_16_fu_3148_p3 + mul_ln1192_19_reg_5463);

assign add_ln1192_18_fu_3178_p2 = (shl_ln728_17_fu_3170_p3 + mul_ln1192_20_reg_5473);

assign add_ln1192_19_fu_3201_p2 = (shl_ln728_18_fu_3193_p3 + mul_ln1192_21_reg_5478);

assign add_ln1192_1_fu_2622_p2 = (shl_ln728_1_fu_2614_p3 + mul_ln1192_3_fu_2599_p2);

assign add_ln1192_20_fu_3233_p2 = (shl_ln728_19_fu_3225_p3 + mul_ln1192_22_fu_3210_p2);

assign add_ln1192_21_fu_3266_p2 = (shl_ln728_20_fu_3258_p3 + mul_ln1192_23_fu_3243_p2);

assign add_ln1192_22_fu_3316_p2 = (shl_ln728_21_fu_3309_p3 + mul_ln1192_24_reg_5508);

assign add_ln1192_23_fu_3339_p2 = (shl_ln728_22_fu_3331_p3 + mul_ln1192_25_reg_5518);

assign add_ln1192_24_fu_3362_p2 = (shl_ln728_23_fu_3354_p3 + mul_ln1192_26_reg_5523);

assign add_ln1192_25_fu_3394_p2 = (shl_ln728_24_fu_3386_p3 + mul_ln1192_27_fu_3371_p2);

assign add_ln1192_26_fu_3427_p2 = (shl_ln728_25_fu_3419_p3 + mul_ln1192_28_fu_3404_p2);

assign add_ln1192_27_fu_3468_p2 = (shl_ln728_26_fu_3461_p3 + mul_ln1192_29_reg_5553);

assign add_ln1192_28_fu_3491_p2 = (shl_ln728_27_fu_3483_p3 + mul_ln1192_30_reg_5563);

assign add_ln1192_29_fu_3522_p2 = (shl_ln728_28_fu_3514_p3 + mul_ln1192_31_fu_3499_p2);

assign add_ln1192_2_fu_2672_p2 = (shl_ln728_2_fu_2665_p3 + mul_ln1192_4_reg_5328);

assign add_ln1192_30_fu_3555_p2 = (shl_ln728_29_fu_3547_p3 + mul_ln1192_32_fu_3532_p2);

assign add_ln1192_33_fu_4015_p2 = (shl_ln728_30_fu_4007_p3 + mul_ln1192_33_fu_3992_p2);

assign add_ln1192_34_fu_4048_p2 = (shl_ln728_31_fu_4040_p3 + mul_ln1192_34_fu_4025_p2);

assign add_ln1192_35_fu_4098_p2 = (shl_ln728_32_fu_4091_p3 + mul_ln1192_35_reg_5929);

assign add_ln1192_36_fu_4121_p2 = (shl_ln728_33_fu_4113_p3 + mul_ln1192_36_reg_5939);

assign add_ln1192_37_fu_4144_p2 = (shl_ln728_34_fu_4136_p3 + mul_ln1192_37_reg_5944);

assign add_ln1192_38_fu_4176_p2 = (shl_ln728_35_fu_4168_p3 + mul_ln1192_38_fu_4153_p2);

assign add_ln1192_39_fu_4209_p2 = (shl_ln728_36_fu_4201_p3 + mul_ln1192_39_fu_4186_p2);

assign add_ln1192_3_fu_2695_p2 = (shl_ln728_3_fu_2687_p3 + mul_ln1192_5_reg_5338);

assign add_ln1192_40_fu_4259_p2 = (shl_ln728_37_fu_4252_p3 + mul_ln1192_40_reg_5974);

assign add_ln1192_41_fu_4282_p2 = (shl_ln728_38_fu_4274_p3 + mul_ln1192_41_reg_5984);

assign add_ln1192_42_fu_4305_p2 = (shl_ln728_39_fu_4297_p3 + mul_ln1192_42_reg_5989);

assign add_ln1192_43_fu_4337_p2 = (shl_ln728_40_fu_4329_p3 + mul_ln1192_43_fu_4314_p2);

assign add_ln1192_44_fu_4370_p2 = (shl_ln728_41_fu_4362_p3 + mul_ln1192_44_fu_4347_p2);

assign add_ln1192_45_fu_4402_p2 = (shl_ln728_42_fu_4395_p3 + mul_ln1192_45_reg_6014);

assign add_ln1192_46_fu_4433_p2 = (shl_ln728_43_fu_4425_p3 + mul_ln1192_46_fu_4410_p2);

assign add_ln1192_47_fu_4466_p2 = (shl_ln728_44_fu_4458_p3 + mul_ln1192_47_fu_4443_p2);

assign add_ln1192_4_fu_2718_p2 = (shl_ln728_4_fu_2710_p3 + mul_ln1192_6_reg_5343);

assign add_ln1192_5_fu_2750_p2 = (shl_ln728_5_fu_2742_p3 + mul_ln1192_7_fu_2727_p2);

assign add_ln1192_6_fu_2783_p2 = (shl_ln728_6_fu_2775_p3 + mul_ln1192_8_fu_2760_p2);

assign add_ln1192_7_fu_2833_p2 = (shl_ln728_7_fu_2826_p3 + mul_ln1192_9_reg_5373);

assign add_ln1192_8_fu_2856_p2 = (shl_ln728_8_fu_2848_p3 + mul_ln1192_10_reg_5383);

assign add_ln1192_9_fu_2879_p2 = (shl_ln728_9_fu_2871_p3 + mul_ln1192_11_reg_5388);

assign add_ln1192_fu_2589_p2 = (shl_ln_fu_2581_p3 + mul_ln1192_2_fu_2566_p2);

assign add_ln21_fu_1936_p2 = (j_reg_1525 + 6'd1);

assign add_ln25_fu_1962_p2 = (k_reg_1537 + 7'd2);

assign add_ln40_fu_2531_p2 = (j_1_reg_1572 + 5'd1);

assign add_ln581_fu_1745_p2 = ($signed(F2_reg_4635) + $signed(12'd4088));

assign add_ln59_fu_3957_p2 = (j_2_reg_1594 + 4'd1);

assign add_ln5_fu_1648_p2 = (i_reg_1514 + 7'd1);

assign add_ln77_fu_2098_p2 = (i_1_reg_1561 + 6'd1);

assign add_ln908_1_fu_3743_p2 = ($signed(sub_ln894_1_fu_3635_p2) + $signed(32'd4294967242));

assign add_ln908_fu_2269_p2 = ($signed(sub_ln894_fu_2161_p2) + $signed(32'd4294967242));

assign add_ln915_1_fu_3845_p2 = (sub_ln915_1_fu_3840_p2 + select_ln893_1_fu_3832_p3);

assign add_ln915_fu_2371_p2 = (sub_ln915_fu_2366_p2 + select_ln893_fu_2358_p3);

assign add_ln92_fu_3572_p2 = (i_2_reg_1583 + 5'd1);

assign and_ln1506_1_fu_3901_p2 = (or_ln1506_1_fu_3897_p2 & grp_fu_1643_p2);

assign and_ln1506_fu_2427_p2 = (or_ln1506_fu_2423_p2 & grp_fu_1643_p2);

assign and_ln581_fu_1849_p2 = (xor_ln582_fu_1843_p2 & icmp_ln581_fu_1740_p2);

assign and_ln582_fu_1832_p2 = (xor_ln571_fu_1827_p2 & icmp_ln582_fu_1767_p2);

assign and_ln585_fu_1861_p2 = (icmp_ln585_fu_1855_p2 & and_ln581_fu_1849_p2);

assign and_ln603_fu_1879_p2 = (xor_ln581_fu_1873_p2 & icmp_ln603_fu_1786_p2);

assign and_ln899_1_fu_2275_p2 = (xor_ln899_fu_2241_p2 & p_Result_12_fu_2247_p3);

assign and_ln899_2_fu_3695_p2 = (tmp_V_5_fu_3609_p3 & or_ln899_fu_3689_p2);

assign and_ln899_3_fu_3749_p2 = (xor_ln899_1_fu_3715_p2 & p_Result_16_fu_3721_p3);

assign and_ln899_fu_2221_p2 = (tmp_V_4_fu_2135_p3 & or_ln899_2_fu_2215_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp5_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp5_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_return = $signed(ret_V_5_fu_4576_p3);

assign ashr_ln586_fu_1796_p2 = $signed(man_V_2_fu_1733_p3) >>> zext_ln586_fu_1792_p1;

assign bitcast_ln734_1_fu_3870_p1 = p_Result_17_fu_3858_p5;

assign bitcast_ln734_fu_2396_p1 = p_Result_13_fu_2384_p5;

assign exp_tmp_fu_1686_p4 = {{ireg_fu_1670_p1[62:52]}};

assign fp_input_img_V_address1 = k_cast58_fu_1968_p1;

assign grp_fu_1640_p0 = input_img_q0;

assign i_1_cast_fu_2110_p1 = i_1_reg_1561;

assign i_2_cast_fu_3584_p1 = i_2_reg_1583;

assign i_cast_fu_1660_p1 = i_reg_1514;

assign icmp_ln109_fu_4489_p2 = ((ap_phi_mux_i_3_phi_fu_1609_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_4500_p2 = (($signed(temp_output3_0_V_q0) > $signed(max_val_V_reg_1629)) ? 1'b1 : 1'b0);

assign icmp_ln1506_1_fu_2417_p2 = ((trunc_ln6_fu_2401_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1506_2_fu_3885_p2 = ((add_ln915_1_fu_3845_p2 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln1506_3_fu_3891_p2 = ((trunc_ln1506_1_fu_3875_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1506_fu_2411_p2 = ((add_ln915_fu_2371_p2 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_1942_p2 = ((j_reg_1525 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_1956_p2 = ((k_reg_1537 < 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_2537_p2 = ((j_1_reg_1572 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_1704_p2 = ((trunc_ln555_fu_1674_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_1740_p2 = (($signed(F2_reg_4635) > $signed(12'd8)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_1767_p2 = ((F2_reg_4635 == 12'd8) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_1855_p2 = ((sh_amt_fu_1755_p3 > 12'd53) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_3963_p2 = ((j_2_reg_1594 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_1654_p2 = ((i_reg_1514 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_1786_p2 = ((tmp_5_fu_1776_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_2104_p2 = ((i_1_reg_1561 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_4556_p2 = ((trunc_ln851_fu_4552_p1 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln885_1_fu_3589_p2 = ((temp_output2_0_V_q1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln885_fu_2115_p2 = ((temp_output_0_V_q1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln896_1_fu_3657_p2 = (($signed(tmp_62_fu_3647_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln896_fu_2183_p2 = (($signed(tmp_58_fu_2173_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln899_1_fu_3701_p2 = ((and_ln899_2_fu_3695_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln899_fu_2227_p2 = ((and_ln899_fu_2221_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln908_1_fu_3729_p2 = (($signed(lsb_index_1_fu_3641_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln908_fu_2255_p2 = (($signed(lsb_index_fu_2167_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_3578_p2 = ((i_2_reg_1583 == 5'd16) ? 1'b1 : 1'b0);

assign input_img_address0 = i_cast_fu_1660_p1;

assign ireg_fu_1670_p1 = grp_fu_1640_p1;

assign j_1_cast_fu_2543_p1 = j_1_reg_1572;

assign j_2_cast_fu_3969_p1 = j_2_reg_1594;

assign k_cast58_fu_1968_p1 = k_reg_1537;


always @ (p_Result_15_fu_3617_p4) begin
    if (p_Result_15_fu_3617_p4[0] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd0;
    end else if (p_Result_15_fu_3617_p4[1] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd1;
    end else if (p_Result_15_fu_3617_p4[2] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd2;
    end else if (p_Result_15_fu_3617_p4[3] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd3;
    end else if (p_Result_15_fu_3617_p4[4] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd4;
    end else if (p_Result_15_fu_3617_p4[5] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd5;
    end else if (p_Result_15_fu_3617_p4[6] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd6;
    end else if (p_Result_15_fu_3617_p4[7] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd7;
    end else if (p_Result_15_fu_3617_p4[8] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd8;
    end else if (p_Result_15_fu_3617_p4[9] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd9;
    end else if (p_Result_15_fu_3617_p4[10] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd10;
    end else if (p_Result_15_fu_3617_p4[11] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd11;
    end else if (p_Result_15_fu_3617_p4[12] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd12;
    end else if (p_Result_15_fu_3617_p4[13] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd13;
    end else if (p_Result_15_fu_3617_p4[14] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd14;
    end else if (p_Result_15_fu_3617_p4[15] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd15;
    end else if (p_Result_15_fu_3617_p4[16] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd16;
    end else if (p_Result_15_fu_3617_p4[17] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd17;
    end else if (p_Result_15_fu_3617_p4[18] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd18;
    end else if (p_Result_15_fu_3617_p4[19] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd19;
    end else if (p_Result_15_fu_3617_p4[20] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd20;
    end else if (p_Result_15_fu_3617_p4[21] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd21;
    end else if (p_Result_15_fu_3617_p4[22] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd22;
    end else if (p_Result_15_fu_3617_p4[23] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd23;
    end else if (p_Result_15_fu_3617_p4[24] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd24;
    end else if (p_Result_15_fu_3617_p4[25] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd25;
    end else if (p_Result_15_fu_3617_p4[26] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd26;
    end else if (p_Result_15_fu_3617_p4[27] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd27;
    end else if (p_Result_15_fu_3617_p4[28] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd28;
    end else if (p_Result_15_fu_3617_p4[29] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd29;
    end else if (p_Result_15_fu_3617_p4[30] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd30;
    end else if (p_Result_15_fu_3617_p4[31] == 1'b1) begin
        l_1_fu_3627_p3 = 32'd31;
    end else begin
        l_1_fu_3627_p3 = 32'd32;
    end
end


always @ (p_Result_11_fu_2143_p4) begin
    if (p_Result_11_fu_2143_p4[0] == 1'b1) begin
        l_fu_2153_p3 = 32'd0;
    end else if (p_Result_11_fu_2143_p4[1] == 1'b1) begin
        l_fu_2153_p3 = 32'd1;
    end else if (p_Result_11_fu_2143_p4[2] == 1'b1) begin
        l_fu_2153_p3 = 32'd2;
    end else if (p_Result_11_fu_2143_p4[3] == 1'b1) begin
        l_fu_2153_p3 = 32'd3;
    end else if (p_Result_11_fu_2143_p4[4] == 1'b1) begin
        l_fu_2153_p3 = 32'd4;
    end else if (p_Result_11_fu_2143_p4[5] == 1'b1) begin
        l_fu_2153_p3 = 32'd5;
    end else if (p_Result_11_fu_2143_p4[6] == 1'b1) begin
        l_fu_2153_p3 = 32'd6;
    end else if (p_Result_11_fu_2143_p4[7] == 1'b1) begin
        l_fu_2153_p3 = 32'd7;
    end else if (p_Result_11_fu_2143_p4[8] == 1'b1) begin
        l_fu_2153_p3 = 32'd8;
    end else if (p_Result_11_fu_2143_p4[9] == 1'b1) begin
        l_fu_2153_p3 = 32'd9;
    end else if (p_Result_11_fu_2143_p4[10] == 1'b1) begin
        l_fu_2153_p3 = 32'd10;
    end else if (p_Result_11_fu_2143_p4[11] == 1'b1) begin
        l_fu_2153_p3 = 32'd11;
    end else if (p_Result_11_fu_2143_p4[12] == 1'b1) begin
        l_fu_2153_p3 = 32'd12;
    end else if (p_Result_11_fu_2143_p4[13] == 1'b1) begin
        l_fu_2153_p3 = 32'd13;
    end else if (p_Result_11_fu_2143_p4[14] == 1'b1) begin
        l_fu_2153_p3 = 32'd14;
    end else if (p_Result_11_fu_2143_p4[15] == 1'b1) begin
        l_fu_2153_p3 = 32'd15;
    end else if (p_Result_11_fu_2143_p4[16] == 1'b1) begin
        l_fu_2153_p3 = 32'd16;
    end else if (p_Result_11_fu_2143_p4[17] == 1'b1) begin
        l_fu_2153_p3 = 32'd17;
    end else if (p_Result_11_fu_2143_p4[18] == 1'b1) begin
        l_fu_2153_p3 = 32'd18;
    end else if (p_Result_11_fu_2143_p4[19] == 1'b1) begin
        l_fu_2153_p3 = 32'd19;
    end else if (p_Result_11_fu_2143_p4[20] == 1'b1) begin
        l_fu_2153_p3 = 32'd20;
    end else if (p_Result_11_fu_2143_p4[21] == 1'b1) begin
        l_fu_2153_p3 = 32'd21;
    end else if (p_Result_11_fu_2143_p4[22] == 1'b1) begin
        l_fu_2153_p3 = 32'd22;
    end else if (p_Result_11_fu_2143_p4[23] == 1'b1) begin
        l_fu_2153_p3 = 32'd23;
    end else if (p_Result_11_fu_2143_p4[24] == 1'b1) begin
        l_fu_2153_p3 = 32'd24;
    end else if (p_Result_11_fu_2143_p4[25] == 1'b1) begin
        l_fu_2153_p3 = 32'd25;
    end else if (p_Result_11_fu_2143_p4[26] == 1'b1) begin
        l_fu_2153_p3 = 32'd26;
    end else if (p_Result_11_fu_2143_p4[27] == 1'b1) begin
        l_fu_2153_p3 = 32'd27;
    end else if (p_Result_11_fu_2143_p4[28] == 1'b1) begin
        l_fu_2153_p3 = 32'd28;
    end else if (p_Result_11_fu_2143_p4[29] == 1'b1) begin
        l_fu_2153_p3 = 32'd29;
    end else if (p_Result_11_fu_2143_p4[30] == 1'b1) begin
        l_fu_2153_p3 = 32'd30;
    end else if (p_Result_11_fu_2143_p4[31] == 1'b1) begin
        l_fu_2153_p3 = 32'd31;
    end else begin
        l_fu_2153_p3 = 32'd32;
    end
end

assign layer2_weights_V_0_address0 = j_1_cast_fu_2543_p1;

assign layer2_weights_V_10_address0 = j_1_cast_reg_5267;

assign layer2_weights_V_11_address0 = j_1_cast_reg_5267_pp3_iter1_reg;

assign layer2_weights_V_12_address0 = j_1_cast_reg_5267_pp3_iter1_reg;

assign layer2_weights_V_13_address0 = j_1_cast_reg_5267_pp3_iter1_reg;

assign layer2_weights_V_14_address0 = j_1_cast_reg_5267_pp3_iter1_reg;

assign layer2_weights_V_15_address0 = j_1_cast_reg_5267_pp3_iter1_reg;

assign layer2_weights_V_16_address0 = j_1_cast_reg_5267_pp3_iter2_reg;

assign layer2_weights_V_17_address0 = j_1_cast_reg_5267_pp3_iter2_reg;

assign layer2_weights_V_18_address0 = j_1_cast_reg_5267_pp3_iter2_reg;

assign layer2_weights_V_19_address0 = j_1_cast_reg_5267_pp3_iter2_reg;

assign layer2_weights_V_1_address0 = j_1_cast_fu_2543_p1;

assign layer2_weights_V_20_address0 = j_1_cast_reg_5267_pp3_iter2_reg;

assign layer2_weights_V_21_address0 = j_1_cast_reg_5267_pp3_iter3_reg;

assign layer2_weights_V_22_address0 = j_1_cast_reg_5267_pp3_iter3_reg;

assign layer2_weights_V_23_address0 = j_1_cast_reg_5267_pp3_iter3_reg;

assign layer2_weights_V_24_address0 = j_1_cast_reg_5267_pp3_iter3_reg;

assign layer2_weights_V_25_address0 = j_1_cast_reg_5267_pp3_iter3_reg;

assign layer2_weights_V_26_address0 = j_1_cast_reg_5267_pp3_iter4_reg;

assign layer2_weights_V_27_address0 = j_1_cast_reg_5267_pp3_iter4_reg;

assign layer2_weights_V_28_address0 = j_1_cast_reg_5267_pp3_iter4_reg;

assign layer2_weights_V_29_address0 = j_1_cast_reg_5267_pp3_iter4_reg;

assign layer2_weights_V_2_address0 = j_1_cast_fu_2543_p1;

assign layer2_weights_V_30_address0 = j_1_cast_reg_5267_pp3_iter4_reg;

assign layer2_weights_V_31_address0 = j_1_cast_reg_5267_pp3_iter5_reg;

assign layer2_weights_V_3_address0 = j_1_cast_fu_2543_p1;

assign layer2_weights_V_4_address0 = j_1_cast_fu_2543_p1;

assign layer2_weights_V_5_address0 = j_1_cast_fu_2543_p1;

assign layer2_weights_V_6_address0 = j_1_cast_reg_5267;

assign layer2_weights_V_7_address0 = j_1_cast_reg_5267;

assign layer2_weights_V_8_address0 = j_1_cast_reg_5267;

assign layer2_weights_V_9_address0 = j_1_cast_reg_5267;

assign layer3_weights_V_0_address0 = j_2_cast_fu_3969_p1;

assign layer3_weights_V_10_address0 = j_2_cast_reg_5884;

assign layer3_weights_V_11_address0 = j_2_cast_reg_5884_pp5_iter1_reg;

assign layer3_weights_V_12_address0 = j_2_cast_reg_5884_pp5_iter1_reg;

assign layer3_weights_V_13_address0 = j_2_cast_reg_5884_pp5_iter1_reg;

assign layer3_weights_V_14_address0 = j_2_cast_reg_5884_pp5_iter1_reg;

assign layer3_weights_V_15_address0 = j_2_cast_reg_5884_pp5_iter2_reg;

assign layer3_weights_V_1_address0 = j_2_cast_fu_3969_p1;

assign layer3_weights_V_2_address0 = j_2_cast_fu_3969_p1;

assign layer3_weights_V_3_address0 = j_2_cast_fu_3969_p1;

assign layer3_weights_V_4_address0 = j_2_cast_fu_3969_p1;

assign layer3_weights_V_5_address0 = j_2_cast_fu_3969_p1;

assign layer3_weights_V_6_address0 = j_2_cast_reg_5884;

assign layer3_weights_V_7_address0 = j_2_cast_reg_5884;

assign layer3_weights_V_8_address0 = j_2_cast_reg_5884;

assign layer3_weights_V_9_address0 = j_2_cast_reg_5884;

assign lhs_1_fu_2038_p3 = {{sum_V_2_reg_1548}, {8'd0}};

assign lhs_2_fu_2074_p3 = {{tmp_9_fu_2064_p4}, {8'd0}};

assign lsb_index_1_fu_3641_p2 = ($signed(sub_ln894_1_fu_3635_p2) + $signed(32'd4294967243));

assign lsb_index_fu_2167_p2 = ($signed(sub_ln894_fu_2161_p2) + $signed(32'd4294967243));

assign lshr_ln897_1_fu_3677_p2 = 32'd4294967295 >> zext_ln897_1_fu_3673_p1;

assign lshr_ln897_fu_2203_p2 = 32'd4294967295 >> zext_ln897_fu_2199_p1;

assign lshr_ln908_1_fu_3779_p2 = zext_ln907_1_fu_3773_p1 >> zext_ln908_1_fu_3776_p1;

assign lshr_ln908_fu_2305_p2 = zext_ln907_fu_2299_p1 >> zext_ln908_fu_2302_p1;

assign m_2_fu_2320_p3 = ((icmp_ln908_reg_4750[0:0] == 1'b1) ? lshr_ln908_fu_2305_p2 : shl_ln909_fu_2314_p2);

assign m_3_fu_2330_p2 = (m_2_fu_2320_p3 + zext_ln911_fu_2327_p1);

assign m_4_fu_3794_p3 = ((icmp_ln908_1_reg_5607[0:0] == 1'b1) ? lshr_ln908_1_fu_3779_p2 : shl_ln909_1_fu_3788_p2);

assign m_5_fu_3804_p2 = (m_4_fu_3794_p3 + zext_ln911_1_fu_3801_p1);

assign m_8_fu_2336_p4 = {{m_3_fu_2330_p2[63:1]}};

assign m_fu_3810_p4 = {{m_5_fu_3804_p2[63:1]}};

assign man_V_1_fu_1727_p2 = (54'd0 - zext_ln569_fu_1723_p1);

assign man_V_2_fu_1733_p3 = ((p_Result_8_reg_4617[0:0] == 1'b1) ? man_V_1_fu_1727_p2 : zext_ln569_fu_1723_p1);

assign max_idx_V_1_fu_4526_p3 = ((icmp_ln1494_fu_4500_p2[0:0] == 1'b1) ? zext_ln111_fu_4522_p1 : max_idx_V_reg_1617);

assign max_val_V_1_fu_4506_p3 = ((icmp_ln1494_fu_4500_p2[0:0] == 1'b1) ? temp_output3_0_V_q0 : max_val_V_reg_1629);

assign mul_ln1192_10_fu_2812_p1 = sext_ln1192_8_reg_5143;

assign mul_ln1192_11_fu_2821_p1 = sext_ln1192_9_reg_5148;

assign mul_ln1192_12_fu_2888_p1 = sext_ln1192_10_reg_5153;

assign mul_ln1192_13_fu_2921_p1 = sext_ln1192_11_reg_5158;

assign mul_ln1192_14_fu_2954_p1 = sext_ln1192_12_reg_5163;

assign mul_ln1192_15_fu_2973_p1 = sext_ln1192_13_reg_5168;

assign mul_ln1192_16_fu_2982_p1 = sext_ln1192_14_reg_5173;

assign mul_ln1192_17_fu_3049_p1 = sext_ln1192_15_reg_5178;

assign mul_ln1192_18_fu_3082_p1 = sext_ln1192_16_reg_5183;

assign mul_ln1192_19_fu_3115_p1 = sext_ln1192_17_reg_5188;

assign mul_ln1192_20_fu_3134_p1 = sext_ln1192_18_reg_5193;

assign mul_ln1192_21_fu_3143_p1 = sext_ln1192_19_reg_5198;

assign mul_ln1192_22_fu_3210_p1 = sext_ln1192_20_reg_5203;

assign mul_ln1192_23_fu_3243_p1 = sext_ln1192_21_reg_5208;

assign mul_ln1192_24_fu_3276_p1 = sext_ln1192_22_reg_5213;

assign mul_ln1192_25_fu_3295_p1 = sext_ln1192_23_reg_5218;

assign mul_ln1192_26_fu_3304_p1 = sext_ln1192_24_reg_5223;

assign mul_ln1192_27_fu_3371_p1 = sext_ln1192_25_reg_5228;

assign mul_ln1192_28_fu_3404_p1 = sext_ln1192_26_reg_5233;

assign mul_ln1192_29_fu_3437_p1 = sext_ln1192_27_reg_5238;

assign mul_ln1192_2_fu_2566_p1 = sext_ln1192_reg_5103;

assign mul_ln1192_30_fu_3456_p1 = sext_ln1192_28_reg_5243;

assign mul_ln1192_31_fu_3499_p1 = sext_ln1192_29_reg_5248;

assign mul_ln1192_32_fu_3532_p1 = sext_ln1192_30_reg_5253;

assign mul_ln1192_33_fu_3992_p1 = sext_ln1192_66_reg_5800;

assign mul_ln1192_34_fu_4025_p1 = sext_ln1192_67_reg_5805;

assign mul_ln1192_35_fu_4058_p1 = sext_ln1192_68_reg_5810;

assign mul_ln1192_36_fu_4077_p1 = sext_ln1192_69_reg_5815;

assign mul_ln1192_37_fu_4086_p1 = sext_ln1192_70_reg_5820;

assign mul_ln1192_38_fu_4153_p1 = sext_ln1192_71_reg_5825;

assign mul_ln1192_39_fu_4186_p1 = sext_ln1192_72_reg_5830;

assign mul_ln1192_3_fu_2599_p1 = sext_ln1192_1_reg_5108;

assign mul_ln1192_40_fu_4219_p1 = sext_ln1192_73_reg_5835;

assign mul_ln1192_41_fu_4238_p1 = sext_ln1192_74_reg_5840;

assign mul_ln1192_42_fu_4247_p1 = sext_ln1192_75_reg_5845;

assign mul_ln1192_43_fu_4314_p1 = sext_ln1192_76_reg_5850;

assign mul_ln1192_44_fu_4347_p1 = sext_ln1192_77_reg_5855;

assign mul_ln1192_45_fu_4380_p1 = sext_ln1192_78_reg_5860;

assign mul_ln1192_46_fu_4410_p1 = sext_ln1192_79_reg_5865;

assign mul_ln1192_47_fu_4443_p1 = sext_ln1192_80_reg_5870;

assign mul_ln1192_4_fu_2632_p1 = sext_ln1192_2_reg_5113;

assign mul_ln1192_5_fu_2651_p1 = sext_ln1192_3_reg_5118;

assign mul_ln1192_6_fu_2660_p1 = sext_ln1192_4_reg_5123;

assign mul_ln1192_7_fu_2727_p1 = sext_ln1192_5_reg_5128;

assign mul_ln1192_8_fu_2760_p1 = sext_ln1192_6_reg_5133;

assign mul_ln1192_9_fu_2793_p1 = sext_ln1192_7_reg_5138;

assign mul_ln708_1_fu_3983_p1 = sext_ln708_2_reg_5795;

assign mul_ln708_fu_2557_p1 = sext_ln708_reg_5098;

assign or_ln1506_1_fu_3897_p2 = (icmp_ln1506_3_reg_5642 | icmp_ln1506_2_reg_5637);

assign or_ln1506_fu_2423_p2 = (icmp_ln1506_reg_4780 | icmp_ln1506_1_reg_4785);

assign or_ln25_fu_1996_p2 = (k_reg_1537 | 7'd1);

assign or_ln571_1_fu_1921_p2 = (or_ln571_fu_1892_p2 | and_ln581_fu_1849_p2);

assign or_ln571_fu_1892_p2 = (icmp_ln571_reg_4627 | and_ln603_fu_1879_p2);

assign or_ln581_fu_1867_p2 = (or_ln582_fu_1838_p2 | icmp_ln581_fu_1740_p2);

assign or_ln582_fu_1838_p2 = (icmp_ln582_fu_1767_p2 | icmp_ln571_reg_4627);

assign or_ln899_2_fu_2215_p2 = (shl_ln899_fu_2209_p2 | lshr_ln897_fu_2203_p2);

assign or_ln899_fu_3689_p2 = (shl_ln899_1_fu_3683_p2 | lshr_ln897_1_fu_3677_p2);

assign p_Result_10_fu_2121_p3 = temp_output_0_V_q1[32'd31];

integer ap_tvar_int_0;

always @ (tmp_V_4_fu_2135_p3) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_11_fu_2143_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_11_fu_2143_p4[ap_tvar_int_0] = tmp_V_4_fu_2135_p3[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_12_fu_2247_p3 = tmp_V_4_fu_2135_p3[lsb_index_fu_2167_p2];

assign p_Result_13_fu_2384_p5 = {{tmp_1_fu_2377_p3}, {zext_ln912_fu_2346_p1[51:0]}};

assign p_Result_14_fu_3595_p3 = temp_output2_0_V_q1[32'd31];

integer ap_tvar_int_1;

always @ (tmp_V_5_fu_3609_p3) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            p_Result_15_fu_3617_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            p_Result_15_fu_3617_p4[ap_tvar_int_1] = tmp_V_5_fu_3609_p3[31 - ap_tvar_int_1];
        end
    end
end

assign p_Result_16_fu_3721_p3 = tmp_V_5_fu_3609_p3[lsb_index_1_fu_3641_p2];

assign p_Result_17_fu_3858_p5 = {{tmp_2_fu_3851_p3}, {zext_ln912_1_fu_3820_p1[51:0]}};

assign p_Result_5_fu_3824_p3 = m_5_fu_3804_p2[32'd54];

assign p_Result_7_fu_4544_p3 = max_idx_V_reg_1617[32'd31];

assign p_Result_9_fu_1716_p3 = {{1'd1}, {trunc_ln565_reg_4622}};

assign p_Result_s_fu_2350_p3 = m_3_fu_2330_p2[32'd54];

assign ret_V_1_fu_2082_p2 = (lhs_2_fu_2074_p3 + mul_ln1192_1_fu_2058_p2);

assign ret_V_2_fu_4534_p4 = {{max_idx_V_reg_1617[31:8]}};

assign ret_V_3_fu_4562_p2 = (ret_V_2_fu_4534_p4 + 24'd1);

assign ret_V_5_fu_4576_p3 = ((p_Result_7_fu_4544_p3[0:0] == 1'b1) ? select_ln850_fu_4568_p3 : ret_V_2_fu_4534_p4);

assign ret_V_fu_2046_p2 = (lhs_1_fu_2038_p3 + mul_ln1192_reg_4701);

assign select_ln571_1_fu_1897_p3 = ((and_ln585_fu_1861_p2[0:0] == 1'b1) ? select_ln588_fu_1813_p3 : trunc_ln586_fu_1802_p1);

assign select_ln571_2_fu_1905_p3 = ((and_ln582_fu_1832_p2[0:0] == 1'b1) ? trunc_ln583_fu_1772_p1 : 32'd0);

assign select_ln571_3_fu_1913_p3 = ((or_ln571_fu_1892_p2[0:0] == 1'b1) ? select_ln571_fu_1885_p3 : select_ln571_1_fu_1897_p3);

assign select_ln571_4_fu_1927_p3 = ((or_ln571_1_fu_1921_p2[0:0] == 1'b1) ? select_ln571_3_fu_1913_p3 : select_ln571_2_fu_1905_p3);

assign select_ln571_fu_1885_p3 = ((icmp_ln571_reg_4627[0:0] == 1'b1) ? 32'd0 : shl_ln604_fu_1821_p2);

assign select_ln588_fu_1813_p3 = ((tmp_56_fu_1806_p3[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln850_fu_4568_p3 = ((icmp_ln851_fu_4556_p2[0:0] == 1'b1) ? ret_V_2_fu_4534_p4 : ret_V_3_fu_4562_p2);

assign select_ln893_1_fu_3832_p3 = ((p_Result_5_fu_3824_p3[0:0] == 1'b1) ? 11'd1023 : 11'd1022);

assign select_ln893_fu_2358_p3 = ((p_Result_s_fu_2350_p3[0:0] == 1'b1) ? 11'd1023 : 11'd1022);

assign select_ln896_1_fu_3735_p3 = ((icmp_ln896_1_fu_3657_p2[0:0] == 1'b1) ? icmp_ln899_1_fu_3701_p2 : p_Result_16_fu_3721_p3);

assign select_ln896_fu_2261_p3 = ((icmp_ln896_fu_2183_p2[0:0] == 1'b1) ? icmp_ln899_fu_2227_p2 : p_Result_12_fu_2247_p3);

assign select_ln908_2_fu_3761_p3 = ((icmp_ln908_1_fu_3729_p2[0:0] == 1'b1) ? select_ln896_1_fu_3735_p3 : and_ln899_3_fu_3749_p2);

assign select_ln908_fu_2287_p3 = ((icmp_ln908_fu_2255_p2[0:0] == 1'b1) ? select_ln896_fu_2261_p3 : and_ln899_1_fu_2275_p2);

assign sext_ln1192_10_fu_2466_p1 = $signed(temp_output_0_V_load_11_reg_4903);

assign sext_ln1192_11_fu_2469_p1 = $signed(temp_output_0_V_load_12_reg_4918);

assign sext_ln1192_12_fu_2472_p1 = $signed(temp_output_0_V_load_13_reg_4923);

assign sext_ln1192_13_fu_2475_p1 = $signed(temp_output_0_V_load_14_reg_4938);

assign sext_ln1192_14_fu_2478_p1 = $signed(temp_output_0_V_load_15_reg_4943);

assign sext_ln1192_15_fu_2481_p1 = $signed(temp_output_0_V_load_16_reg_4958);

assign sext_ln1192_16_fu_2484_p1 = $signed(temp_output_0_V_load_17_reg_4963);

assign sext_ln1192_17_fu_2487_p1 = $signed(temp_output_0_V_load_18_reg_4978);

assign sext_ln1192_18_fu_2490_p1 = $signed(temp_output_0_V_load_19_reg_4983);

assign sext_ln1192_19_fu_2493_p1 = $signed(temp_output_0_V_load_20_reg_4998);

assign sext_ln1192_1_fu_2439_p1 = $signed(temp_output_0_V_load_2_reg_4818);

assign sext_ln1192_20_fu_2496_p1 = $signed(temp_output_0_V_load_21_reg_5003);

assign sext_ln1192_21_fu_2499_p1 = $signed(temp_output_0_V_load_22_reg_5018);

assign sext_ln1192_22_fu_2502_p1 = $signed(temp_output_0_V_load_23_reg_5023);

assign sext_ln1192_23_fu_2505_p1 = $signed(temp_output_0_V_load_24_reg_5038);

assign sext_ln1192_24_fu_2508_p1 = $signed(temp_output_0_V_load_25_reg_5043);

assign sext_ln1192_25_fu_2511_p1 = $signed(temp_output_0_V_load_26_reg_5058);

assign sext_ln1192_26_fu_2514_p1 = $signed(temp_output_0_V_load_27_reg_5063);

assign sext_ln1192_27_fu_2517_p1 = $signed(temp_output_0_V_load_28_reg_5078);

assign sext_ln1192_28_fu_2520_p1 = $signed(temp_output_0_V_load_29_reg_5083);

assign sext_ln1192_29_fu_2523_p1 = $signed(temp_output_0_V_q0);

assign sext_ln1192_2_fu_2442_p1 = $signed(temp_output_0_V_load_3_reg_4823);

assign sext_ln1192_30_fu_2527_p1 = $signed(temp_output_0_V_q1);

assign sext_ln1192_3_fu_2445_p1 = $signed(temp_output_0_V_load_4_reg_4838);

assign sext_ln1192_4_fu_2448_p1 = $signed(temp_output_0_V_load_5_reg_4843);

assign sext_ln1192_5_fu_2451_p1 = $signed(temp_output_0_V_load_6_reg_4858);

assign sext_ln1192_66_fu_3910_p1 = $signed(temp_output2_0_V_load_1_reg_5660);

assign sext_ln1192_67_fu_3913_p1 = $signed(temp_output2_0_V_load_2_reg_5675);

assign sext_ln1192_68_fu_3916_p1 = $signed(temp_output2_0_V_load_3_reg_5680);

assign sext_ln1192_69_fu_3919_p1 = $signed(temp_output2_0_V_load_4_reg_5695);

assign sext_ln1192_6_fu_2454_p1 = $signed(temp_output_0_V_load_7_reg_4863);

assign sext_ln1192_70_fu_3922_p1 = $signed(temp_output2_0_V_load_5_reg_5700);

assign sext_ln1192_71_fu_3925_p1 = $signed(temp_output2_0_V_load_6_reg_5715);

assign sext_ln1192_72_fu_3928_p1 = $signed(temp_output2_0_V_load_7_reg_5720);

assign sext_ln1192_73_fu_3931_p1 = $signed(temp_output2_0_V_load_8_reg_5735);

assign sext_ln1192_74_fu_3934_p1 = $signed(temp_output2_0_V_load_9_reg_5740);

assign sext_ln1192_75_fu_3937_p1 = $signed(temp_output2_0_V_load_10_reg_5755);

assign sext_ln1192_76_fu_3940_p1 = $signed(temp_output2_0_V_load_11_reg_5760);

assign sext_ln1192_77_fu_3943_p1 = $signed(temp_output2_0_V_load_12_reg_5775);

assign sext_ln1192_78_fu_3946_p1 = $signed(temp_output2_0_V_load_13_reg_5780);

assign sext_ln1192_79_fu_3949_p1 = $signed(temp_output2_0_V_q0);

assign sext_ln1192_7_fu_2457_p1 = $signed(temp_output_0_V_load_8_reg_4878);

assign sext_ln1192_80_fu_3953_p1 = $signed(temp_output2_0_V_q1);

assign sext_ln1192_8_fu_2460_p1 = $signed(temp_output_0_V_load_9_reg_4883);

assign sext_ln1192_9_fu_2463_p1 = $signed(temp_output_0_V_load_10_reg_4898);

assign sext_ln1192_fu_2436_p1 = $signed(temp_output_0_V_load_1_reg_4803);

assign sext_ln581_fu_1763_p1 = sh_amt_fu_1755_p3;

assign sext_ln708_2_fu_3907_p1 = $signed(temp_output2_0_V_load_reg_5655);

assign sext_ln708_fu_2433_p1 = $signed(temp_output_0_V_load_reg_4798);

assign sh_amt_fu_1755_p3 = ((icmp_ln581_fu_1740_p2[0:0] == 1'b1) ? add_ln581_fu_1745_p2 : sub_ln581_fu_1750_p2);

assign shl_ln1_fu_4514_p3 = {{i_3_reg_1605}, {8'd0}};

assign shl_ln604_fu_1821_p2 = trunc_ln583_fu_1772_p1 << sext_ln581_fu_1763_p1;

assign shl_ln728_10_fu_2936_p3 = {{tmp_19_fu_2926_p4}, {8'd0}};

assign shl_ln728_11_fu_2987_p3 = {{tmp_20_reg_5423}, {8'd0}};

assign shl_ln728_12_fu_3009_p3 = {{tmp_21_fu_2999_p4}, {8'd0}};

assign shl_ln728_13_fu_3032_p3 = {{tmp_22_fu_3022_p4}, {8'd0}};

assign shl_ln728_14_fu_3064_p3 = {{tmp_23_fu_3054_p4}, {8'd0}};

assign shl_ln728_15_fu_3097_p3 = {{tmp_24_fu_3087_p4}, {8'd0}};

assign shl_ln728_16_fu_3148_p3 = {{tmp_25_reg_5468}, {8'd0}};

assign shl_ln728_17_fu_3170_p3 = {{tmp_26_fu_3160_p4}, {8'd0}};

assign shl_ln728_18_fu_3193_p3 = {{tmp_27_fu_3183_p4}, {8'd0}};

assign shl_ln728_19_fu_3225_p3 = {{tmp_28_fu_3215_p4}, {8'd0}};

assign shl_ln728_1_fu_2614_p3 = {{tmp_4_fu_2604_p4}, {8'd0}};

assign shl_ln728_20_fu_3258_p3 = {{tmp_29_fu_3248_p4}, {8'd0}};

assign shl_ln728_21_fu_3309_p3 = {{tmp_30_reg_5513}, {8'd0}};

assign shl_ln728_22_fu_3331_p3 = {{tmp_31_fu_3321_p4}, {8'd0}};

assign shl_ln728_23_fu_3354_p3 = {{tmp_32_fu_3344_p4}, {8'd0}};

assign shl_ln728_24_fu_3386_p3 = {{tmp_33_fu_3376_p4}, {8'd0}};

assign shl_ln728_25_fu_3419_p3 = {{tmp_34_fu_3409_p4}, {8'd0}};

assign shl_ln728_26_fu_3461_p3 = {{tmp_35_reg_5558}, {8'd0}};

assign shl_ln728_27_fu_3483_p3 = {{tmp_36_fu_3473_p4}, {8'd0}};

assign shl_ln728_28_fu_3514_p3 = {{tmp_37_fu_3504_p4}, {8'd0}};

assign shl_ln728_29_fu_3547_p3 = {{tmp_38_fu_3537_p4}, {8'd0}};

assign shl_ln728_2_fu_2665_p3 = {{tmp_10_reg_5333}, {8'd0}};

assign shl_ln728_30_fu_4007_p3 = {{tmp_39_fu_3997_p4}, {8'd0}};

assign shl_ln728_31_fu_4040_p3 = {{tmp_40_fu_4030_p4}, {8'd0}};

assign shl_ln728_32_fu_4091_p3 = {{tmp_41_reg_5934}, {8'd0}};

assign shl_ln728_33_fu_4113_p3 = {{tmp_42_fu_4103_p4}, {8'd0}};

assign shl_ln728_34_fu_4136_p3 = {{tmp_43_fu_4126_p4}, {8'd0}};

assign shl_ln728_35_fu_4168_p3 = {{tmp_44_fu_4158_p4}, {8'd0}};

assign shl_ln728_36_fu_4201_p3 = {{tmp_45_fu_4191_p4}, {8'd0}};

assign shl_ln728_37_fu_4252_p3 = {{tmp_46_reg_5979}, {8'd0}};

assign shl_ln728_38_fu_4274_p3 = {{tmp_47_fu_4264_p4}, {8'd0}};

assign shl_ln728_39_fu_4297_p3 = {{tmp_48_fu_4287_p4}, {8'd0}};

assign shl_ln728_3_fu_2687_p3 = {{tmp_11_fu_2677_p4}, {8'd0}};

assign shl_ln728_40_fu_4329_p3 = {{tmp_49_fu_4319_p4}, {8'd0}};

assign shl_ln728_41_fu_4362_p3 = {{tmp_50_fu_4352_p4}, {8'd0}};

assign shl_ln728_42_fu_4395_p3 = {{tmp_51_reg_6019}, {8'd0}};

assign shl_ln728_43_fu_4425_p3 = {{tmp_52_fu_4415_p4}, {8'd0}};

assign shl_ln728_44_fu_4458_p3 = {{tmp_53_fu_4448_p4}, {8'd0}};

assign shl_ln728_4_fu_2710_p3 = {{tmp_12_fu_2700_p4}, {8'd0}};

assign shl_ln728_5_fu_2742_p3 = {{tmp_13_fu_2732_p4}, {8'd0}};

assign shl_ln728_6_fu_2775_p3 = {{tmp_14_fu_2765_p4}, {8'd0}};

assign shl_ln728_7_fu_2826_p3 = {{tmp_15_reg_5378}, {8'd0}};

assign shl_ln728_8_fu_2848_p3 = {{tmp_16_fu_2838_p4}, {8'd0}};

assign shl_ln728_9_fu_2871_p3 = {{tmp_17_fu_2861_p4}, {8'd0}};

assign shl_ln728_s_fu_2903_p3 = {{tmp_18_fu_2893_p4}, {8'd0}};

assign shl_ln899_1_fu_3683_p2 = 32'd1 << lsb_index_1_fu_3641_p2;

assign shl_ln899_fu_2209_p2 = 32'd1 << lsb_index_fu_2167_p2;

assign shl_ln909_1_fu_3788_p2 = zext_ln907_1_fu_3773_p1 << zext_ln909_1_fu_3785_p1;

assign shl_ln909_fu_2314_p2 = zext_ln907_fu_2299_p1 << zext_ln909_fu_2311_p1;

assign shl_ln_fu_2581_p3 = {{tmp_s_fu_2571_p4}, {8'd0}};

assign sub_ln581_fu_1750_p2 = (12'd8 - F2_reg_4635);

assign sub_ln894_1_fu_3635_p2 = (32'd32 - l_1_fu_3627_p3);

assign sub_ln894_fu_2161_p2 = (32'd32 - l_fu_2153_p3);

assign sub_ln897_1_fu_3667_p2 = (6'd22 - trunc_ln897_1_fu_3663_p1);

assign sub_ln897_fu_2193_p2 = (6'd22 - trunc_ln897_fu_2189_p1);

assign sub_ln909_1_fu_3755_p2 = (32'd54 - sub_ln894_1_fu_3635_p2);

assign sub_ln909_fu_2281_p2 = (32'd54 - sub_ln894_fu_2161_p2);

assign sub_ln915_1_fu_3840_p2 = (11'd24 - trunc_ln893_1_reg_5627);

assign sub_ln915_fu_2366_p2 = (11'd24 - trunc_ln893_reg_4770);

assign temp_output2_0_V_addr_reg_4648 = 64'd0;

assign temp_output_0_V_addr_reg_4643 = 64'd0;

assign tmp_11_fu_2677_p4 = {{add_ln1192_2_fu_2672_p2[39:8]}};

assign tmp_12_fu_2700_p4 = {{add_ln1192_3_fu_2695_p2[39:8]}};

assign tmp_13_fu_2732_p4 = {{add_ln1192_4_fu_2718_p2[39:8]}};

assign tmp_14_fu_2765_p4 = {{add_ln1192_5_fu_2750_p2[39:8]}};

assign tmp_16_fu_2838_p4 = {{add_ln1192_7_fu_2833_p2[39:8]}};

assign tmp_17_fu_2861_p4 = {{add_ln1192_8_fu_2856_p2[39:8]}};

assign tmp_18_fu_2893_p4 = {{add_ln1192_9_fu_2879_p2[39:8]}};

assign tmp_19_fu_2926_p4 = {{add_ln1192_10_fu_2911_p2[39:8]}};

assign tmp_1_fu_2377_p3 = {{p_Result_10_reg_4740}, {add_ln915_fu_2371_p2}};

assign tmp_21_fu_2999_p4 = {{add_ln1192_12_fu_2994_p2[39:8]}};

assign tmp_22_fu_3022_p4 = {{add_ln1192_13_fu_3017_p2[39:8]}};

assign tmp_23_fu_3054_p4 = {{add_ln1192_14_fu_3040_p2[39:8]}};

assign tmp_24_fu_3087_p4 = {{add_ln1192_15_fu_3072_p2[39:8]}};

assign tmp_26_fu_3160_p4 = {{add_ln1192_17_fu_3155_p2[39:8]}};

assign tmp_27_fu_3183_p4 = {{add_ln1192_18_fu_3178_p2[39:8]}};

assign tmp_28_fu_3215_p4 = {{add_ln1192_19_fu_3201_p2[39:8]}};

assign tmp_29_fu_3248_p4 = {{add_ln1192_20_fu_3233_p2[39:8]}};

assign tmp_2_fu_3851_p3 = {{p_Result_14_reg_5597}, {add_ln915_1_fu_3845_p2}};

assign tmp_31_fu_3321_p4 = {{add_ln1192_22_fu_3316_p2[39:8]}};

assign tmp_32_fu_3344_p4 = {{add_ln1192_23_fu_3339_p2[39:8]}};

assign tmp_33_fu_3376_p4 = {{add_ln1192_24_fu_3362_p2[39:8]}};

assign tmp_34_fu_3409_p4 = {{add_ln1192_25_fu_3394_p2[39:8]}};

assign tmp_36_fu_3473_p4 = {{add_ln1192_27_fu_3468_p2[39:8]}};

assign tmp_37_fu_3504_p4 = {{add_ln1192_28_fu_3491_p2[39:8]}};

assign tmp_38_fu_3537_p4 = {{add_ln1192_29_fu_3522_p2[39:8]}};

assign tmp_39_fu_3997_p4 = {{mul_ln708_1_fu_3983_p2[39:8]}};

assign tmp_40_fu_4030_p4 = {{add_ln1192_33_fu_4015_p2[39:8]}};

assign tmp_42_fu_4103_p4 = {{add_ln1192_35_fu_4098_p2[39:8]}};

assign tmp_43_fu_4126_p4 = {{add_ln1192_36_fu_4121_p2[39:8]}};

assign tmp_44_fu_4158_p4 = {{add_ln1192_37_fu_4144_p2[39:8]}};

assign tmp_45_fu_4191_p4 = {{add_ln1192_38_fu_4176_p2[39:8]}};

assign tmp_47_fu_4264_p4 = {{add_ln1192_40_fu_4259_p2[39:8]}};

assign tmp_48_fu_4287_p4 = {{add_ln1192_41_fu_4282_p2[39:8]}};

assign tmp_49_fu_4319_p4 = {{add_ln1192_42_fu_4305_p2[39:8]}};

assign tmp_4_fu_2604_p4 = {{add_ln1192_fu_2589_p2[39:8]}};

assign tmp_50_fu_4352_p4 = {{add_ln1192_43_fu_4337_p2[39:8]}};

assign tmp_52_fu_4415_p4 = {{add_ln1192_45_fu_4402_p2[39:8]}};

assign tmp_53_fu_4448_p4 = {{add_ln1192_46_fu_4433_p2[39:8]}};

assign tmp_56_fu_1806_p3 = input_img_load_reg_4607_pp0_iter2_reg[32'd31];

assign tmp_58_fu_2173_p4 = {{lsb_index_fu_2167_p2[31:1]}};

assign tmp_59_fu_2233_p3 = lsb_index_fu_2167_p2[32'd31];

assign tmp_5_fu_1776_p4 = {{sh_amt_fu_1755_p3[11:5]}};

assign tmp_62_fu_3647_p4 = {{lsb_index_1_fu_3641_p2[31:1]}};

assign tmp_63_fu_3707_p3 = lsb_index_1_fu_3641_p2[32'd31];

assign tmp_6_fu_1973_p4 = {{k_reg_1537[6:1]}};

assign tmp_7_fu_1983_p3 = {{tmp_6_fu_1973_p4}, {j_reg_1525}};

assign tmp_8_fu_2021_p3 = {{or_ln25_reg_4691}, {5'd0}};

assign tmp_9_fu_2064_p4 = {{ret_V_fu_2046_p2[39:8]}};

assign tmp_V_2_fu_3603_p2 = (32'd0 - temp_output2_0_V_q1);

assign tmp_V_4_fu_2135_p3 = ((p_Result_10_fu_2121_p3[0:0] == 1'b1) ? tmp_V_fu_2129_p2 : temp_output_0_V_q1);

assign tmp_V_5_fu_3609_p3 = ((p_Result_14_fu_3595_p3[0:0] == 1'b1) ? tmp_V_2_fu_3603_p2 : temp_output2_0_V_q1);

assign tmp_V_fu_2129_p2 = (32'd0 - temp_output_0_V_q1);

assign tmp_s_fu_2571_p4 = {{mul_ln708_fu_2557_p2[39:8]}};

assign trunc_ln1506_1_fu_3875_p4 = {{m_5_fu_3804_p2[52:1]}};

assign trunc_ln555_fu_1674_p1 = ireg_fu_1670_p1[62:0];

assign trunc_ln565_fu_1700_p1 = ireg_fu_1670_p1[51:0];

assign trunc_ln583_fu_1772_p1 = man_V_2_fu_1733_p3[31:0];

assign trunc_ln586_fu_1802_p1 = ashr_ln586_fu_1796_p2[31:0];

assign trunc_ln6_fu_2401_p4 = {{m_3_fu_2330_p2[52:1]}};

assign trunc_ln731_cast59_fu_4495_p1 = ap_phi_mux_i_3_phi_fu_1609_p4;

assign trunc_ln851_fu_4552_p1 = max_idx_V_reg_1617[7:0];

assign trunc_ln893_1_fu_3769_p1 = l_1_fu_3627_p3[10:0];

assign trunc_ln893_fu_2295_p1 = l_fu_2153_p3[10:0];

assign trunc_ln897_1_fu_3663_p1 = sub_ln894_1_fu_3635_p2[5:0];

assign trunc_ln897_fu_2189_p1 = sub_ln894_fu_2161_p2[5:0];

assign weights_layer1_weights_V_address0 = zext_ln1118_1_fu_2033_p1;

assign weights_layer1_weights_V_address1 = zext_ln1118_fu_1991_p1;

assign xor_ln571_fu_1827_p2 = (icmp_ln571_reg_4627 ^ 1'd1);

assign xor_ln581_fu_1873_p2 = (or_ln581_fu_1867_p2 ^ 1'd1);

assign xor_ln582_fu_1843_p2 = (or_ln582_fu_1838_p2 ^ 1'd1);

assign xor_ln899_1_fu_3715_p2 = (tmp_63_fu_3707_p3 ^ 1'd1);

assign xor_ln899_fu_2241_p2 = (tmp_59_fu_2233_p3 ^ 1'd1);

assign zext_ln1118_1_fu_2033_p1 = add_ln1118_fu_2028_p2;

assign zext_ln1118_fu_1991_p1 = tmp_7_fu_1983_p3;

assign zext_ln111_fu_4522_p1 = shl_ln1_fu_4514_p3;

assign zext_ln21_1_fu_1952_p1 = j_reg_1525;

assign zext_ln21_fu_1948_p1 = j_reg_1525;

assign zext_ln23_fu_2002_p1 = or_ln25_fu_1996_p2;

assign zext_ln455_fu_1696_p1 = exp_tmp_fu_1686_p4;

assign zext_ln569_fu_1723_p1 = p_Result_9_fu_1716_p3;

assign zext_ln586_fu_1792_p1 = $unsigned(sext_ln581_fu_1763_p1);

assign zext_ln897_1_fu_3673_p1 = sub_ln897_1_fu_3667_p2;

assign zext_ln897_fu_2199_p1 = sub_ln897_fu_2193_p2;

assign zext_ln907_1_fu_3773_p1 = tmp_V_5_reg_5602;

assign zext_ln907_fu_2299_p1 = tmp_V_4_reg_4745;

assign zext_ln908_1_fu_3776_p1 = add_ln908_1_reg_5612;

assign zext_ln908_fu_2302_p1 = add_ln908_reg_4755;

assign zext_ln909_1_fu_3785_p1 = sub_ln909_1_reg_5617;

assign zext_ln909_fu_2311_p1 = sub_ln909_reg_4760;

assign zext_ln911_1_fu_3801_p1 = select_ln908_2_reg_5622;

assign zext_ln911_fu_2327_p1 = select_ln908_reg_4765;

assign zext_ln912_1_fu_3820_p1 = m_fu_3810_p4;

assign zext_ln912_fu_2346_p1 = m_8_fu_2336_p4;

always @ (posedge ap_clk) begin
    i_cast_reg_4597[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_4597_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_4597_pp0_iter2_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln21_reg_4662[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln21_1_reg_4667[11:6] <= 6'b000000;
    or_ln25_reg_4691[0] <= 1'b1;
    j_1_cast_reg_5267[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5267_pp3_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5267_pp3_iter2_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5267_pp3_iter3_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5267_pp3_iter4_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5267_pp3_iter5_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_5267_pp3_iter6_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_5884[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_5884_pp5_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_5884_pp5_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_5884_pp5_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //nn_inference
